bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos  +=  buffer.length  -  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  -  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  -  1;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
2	[BUG]  [BUGGY]  pos  +=  buffer.length  -  inAvail;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  -  inAvail;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  -  inAvail;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
3	[BUG]  [BUGGY]  pos  +=  buffer.length  -  2;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  -  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  -  2;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
4	[BUG]  [BUGGY]  pos  +=  lineSize;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSize;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSize;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
5	[BUG]  [BUGGY]  pos  +=  buffer.length  -  4;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  -  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  -  4;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
6	[BUG]  [BUGGY]  pos  +=  buffer.length  -  3;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  -  3;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  -  3;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  3);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1,  inAvail);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1,  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  32);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
14	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(frameBuffer,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  +  2);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineLength);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
20	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
21	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  )&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  )&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  )&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
22	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
23	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
24	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  )&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  )&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  )&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
25	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
26	[BUG]  [BUGGY]  pos  +=  2;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  2;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  pos  +=  4;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  4;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  pos  +=  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  1;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
29	[BUG]  [BUGGY]  pos  +=  3;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  3;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  3;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
30	[BUG]  [BUGGY]  pos  +=  len;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  len;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  len;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
31	[BUG]  [BUGGY]  pos  +=  lineLength  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineLength  +  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineLength  +  1;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
32	[BUG]  [BUGGY]  pos  +=  length;  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  length;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  length;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
33	[BUG]  [BUGGY]  pos  +=  6;  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  6;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  6;	  pos    +=    lineLength;    	non-compiled	[CE]  ';'  expected	14	None	replace
34	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	3	None	replace
35	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  /  2;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  /  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  /  2;	  pos    +=    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	16	None	replace
36	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  -  5;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  -  5;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  -  5;	  pos    +=    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	16	None	replace
37	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  -  6;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  -  6;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  -  6;	  pos    +=    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	16	None	replace
38	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  -  10;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  -  10;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  -  10;	  pos    +=    lineSeparator.length    -    2;    	non-compiled	[CE]  ';'  expected	16	None	replace
39	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
40	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
41	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
42	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
43	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  *  4;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  *  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  *  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
44	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  +  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  +  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  +  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
45	[BUG]  [BUGGY]  pos  +=  linenoSeparator.length  +  4;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  linenoSeparator.length  +  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  linenoSeparator.length  +  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
46	[BUG]  [BUGGY]  pos  +=  buffer.length  +  4;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  +  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  +  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
47	[BUG]  [BUGGY]  pos  +=  lineSeparator.length/  4;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length/  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length/  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  2);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  4);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
51	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1,  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1,  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  1,  lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
52	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  3);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  3);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  3);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  length);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  6);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  6);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  6);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength,  inAvail);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength,  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength,  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
56	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  pos  +=  inAvail  -  lineSeparator.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  inAvail  -  lineSeparator.length;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  inAvail  -  lineSeparator.length;	  pos    +=    lineSeparator.length    -    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
61	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  -  inPos;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  -  inPos;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  -  inPos;	  pos    +=    lineSeparator.length    -    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
62	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  -  inAvail;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  -  inAvail;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  -  inAvail;	  pos    +=    lineSeparator.length    -    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSize.length);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSize.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSize.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  1);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  4);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  4);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  2);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  2);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos  +  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos  +  lineSeparator.length);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  3);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  3);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  +  3);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
74	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
75	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
77	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
79	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  2)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
80	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
81	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  1)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
82	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
83	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos  +  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  pos  +  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  pos  +  lineLength);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
84	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
85	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
86	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSeparator.length);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSeparator.length);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
87	[BUG]  [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSeparator.length);  }  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSeparator.length);  }  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	if(inPos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSeparator.length);  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
88	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSize);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSize);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineSize);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
89	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
90	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
91	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	7	None	replace
92	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
93	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inPos  >>  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inPos  >>  4)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inPos  >>  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
94	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
95	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  4)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  4)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inAvail  >>  4)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
96	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  4)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(y  >>  4)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(y  >>  4)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
97	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  1)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
98	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
99	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  -  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  -  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  -  1;	  pos    +=    fileSeparator.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
100	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  +  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  +  1;	  pos    +=    fileSeparator.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
101	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  -  2;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  -  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  -  2;	  pos    +=    fileSeparator.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
102	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  -  4;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  -  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  -  4;	  pos    +=    fileSeparator.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
103	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  -  3;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  -  3;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  -  3;	  pos    +=    fileSeparator.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
104	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  /  3;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  /  3;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  /  3;	  pos    +=    lineSeparator.length    -    3;    	non-compiled	[CE]  ';'  expected	28	None	replace
105	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
106	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
107	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
108	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  /  1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  /  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  /  1;	  pos    +=    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
109	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  *  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  *  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  *  2;	  pos    +=    lineSeparator.length    +    2;    	non-compiled	[CE]  ';'  expected	17	None	replace
110	[BUG]  [BUGGY]  pos  +=  fileSeparator.length  +  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileSeparator.length  +  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileSeparator.length  +  2;	  pos    +=    lineSeparator.length    +    2;    	non-compiled	[CE]  ';'  expected	17	None	replace
111	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  -  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos);    	non-compiled	[CE]  ';'  expected	26	None	replace
112	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  16);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  16);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  16);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
113	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  *  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  *  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  *  1;	  pos    +=    lineSeparator.length    +    1;    	non-compiled	[CE]  ';'  expected	12	None	replace
114	[BUG]  [BUGGY]  pos  +=  buffer.length  +  1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  +  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  +  1;	  pos    +=    lineSeparator.length    +    1;    	non-compiled	[CE]  ';'  expected	12	None	replace
115	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  +  3;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  +  3;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  +  3;	  pos    +=    lineSeparator.length    +    1;    	non-compiled	[CE]  ';'  expected	12	None	replace
116	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  4)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  4)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
117	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
118	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  3)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  3)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
119	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
120	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  2)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  2)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
121	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  2)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  2)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
122	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  5)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  5)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
123	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  1)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
124	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
125	[BUG]  [BUGGY]  pos  +=  inPos;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  inPos;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  inPos;	  pos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	21	None	replace
126	[BUG]  [BUGGY]  pos  +=  inAvail  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  inAvail  +  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  inAvail  +  1;	  pos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	21	None	replace
127	[BUG]  [BUGGY]  pos  +=  inAvail  +  2;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  inAvail  +  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  inAvail  +  2;	  pos    +=    inAvail;    	non-compiled	[CE]  ';'  expected	21	None	replace
128	[BUG]  [BUGGY]  pos  +=  16;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  16;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  16;	  pos    +=    MASK_8BITS;    	non-compiled	[CE]  ';'  expected	15	None	replace
129	[BUG]  [BUGGY]  pos  +=  10;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  10;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  10;	  pos    +=    MASK_8BITS;    	non-compiled	[CE]  ';'  expected	15	None	replace
130	[BUG]  [BUGGY]  pos  +=  8;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  8;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  8;	  pos    +=    MASK_8BITS;    	non-compiled	[CE]  ';'  expected	15	None	replace
131	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  1)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
132	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
133	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
134	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
135	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  1);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
137	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
138	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
139	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
140	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  7)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
141	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	23	None	replace
142	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  4];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  4];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  4];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
143	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  3];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  6)&  3];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  6)&  3];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
144	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  -  8;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  -  8;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  -  8;	  pos    +=    lineSeparator.length    -    4;    	non-compiled	[CE]  ';'  expected	18	None	replace
145	[BUG]  [BUGGY]  pos  +=  inAvail  -  lineSeparator;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  inAvail  -  lineSeparator;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  inAvail  -  lineSeparator;	  pos    +=    lineSeparator.length    -    inAvail;    	non-compiled	[CE]  ';'  expected	27	None	replace
146	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
147	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  2)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  2)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inAvail  >>  2)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
148	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  3)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  3)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inAvail  >>  3)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
149	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inAvail  >>  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
150	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  8)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inAvail  >>  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
151	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  -  lineLength);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  -  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  -  lineLength);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
152	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  pos);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  pos);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  +  pos);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
153	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos  +  lineLength);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inPos  +  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inPos  +  lineLength);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  1);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  +  1);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  length);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(inAvail,  0,  buffer,  inAvail  +  length);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
156	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  2];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  2];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  2];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
157	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  4];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  <  <  8)&  4];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  <  <  8)&  4];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
158	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  4)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  4)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  4);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  3);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  3);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  +  3);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  4);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  3);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  3);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  +  3);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  4);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
165	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunkSeparator,  0,  buffer,  pos,  lineSeparator.length);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
169	[BUG]  [BUGGY]  pos  +=  lineSeparator.length  -  1L;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length  -  1L;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length  -  1L;	  pos    +=    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
170	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  inAvail);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos);    	non-compiled	[CE]  ';'  expected	26	None	replace
171	[BUG]  [BUGGY]  pos  +=  base64.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  base64.length;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  base64.length;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
172	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  fileLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  fileLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  fileLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
173	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  base64);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
174	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  endPos);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  endPos);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  endPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    encodeSize);    	non-compiled	[CE]  ';'  expected	24	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outPos);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outPos);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outAvail);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  outAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  2);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
178	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
179	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  8)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	22	None	replace
180	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length,  encodeSize);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
181	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length,  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length,  inAvail);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  -  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  -  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  -  1);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength  -  1);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength  -  1);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength  -  1);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
184	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
185	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	4	None	replace
186	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  ==  8)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    8)&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	8	None	replace
187	[BUG]  [BUGGY]  pos  +=  linenoSeparator.length;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  linenoSeparator.length;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  linenoSeparator.length;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
188	[BUG]  [BUGGY]  pos  +=  lineSeparator.length:  4;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length:  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length:  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
189	[BUG]  [BUGGY]  pos  +=  endPos  +  4;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  endPos  +  4;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  endPos  +  4;	  pos    +=    lineSeparator.length    +    4;    	non-compiled	[CE]  ';'  expected	19	None	replace
190	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  inAvail);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
191	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineLength  -  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineLength);    	non-compiled	[CE]  ';'  expected	29	None	replace
192	[BUG]  [BUGGY]  pos  +=  buffer.length  -  inPos;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  buffer.length  -  inPos;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  buffer.length  -  inPos;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
193	[BUG]  [BUGGY]  pos  +=  fileLength;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  fileLength;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  fileLength;	  pos    +=    buffer.length;    	non-compiled	[CE]  ';'  expected	11	None	replace
194	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  2)&  MASK_6BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(inAvail  >>  2)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(inAvail  >>  2)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(inAvail    >>    4)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	25	None	replace
195	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  5)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    )&    MASK_8BITS];    	non-compiled	[CE]  ';'  expected	9	None	replace
196	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(buffer,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);	      System.arraycopy(buffer,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	6	None	replace
197	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength  *  4);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength  *  4);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  lineLength  *  4);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
198	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  fileLength);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  fileLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos  +  fileLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos    +    lineLength);    	non-compiled	[CE]  ';'  expected	31	None	replace
199	[BUG]  [BUGGY]  if(lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  if(lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	if(lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
200	[BUG]  [BUGGY]  if(inAvail  >  0  &&  inAvail  <  =  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  if(inAvail  >  0  &&  inAvail  <  =  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	if(inAvail  >  0  &&  inAvail  <  =  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
201	[BUG]  [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  if(inAvail  <  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	if(inAvail  <  0)  {  System.arraycopy(inAvail,  0,  buffer,  inAvail  +  lineLength);  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
202	[BUG]  [BUGGY]  if(lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  inAvail  +  lineLength);  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  if(lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  inAvail  +  lineLength);  }  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	if(lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  inAvail  +  lineLength);  }	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  inAvail  +  inAvail);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(lineSeparator,  0,  buffer,  inAvail  +  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(lineSeparator,  0,  buffer,  inAvail  +  inAvail);	      if(inAvail    >    0)    {    System.arraycopy(inAvail,    0,    buffer,    inAvail    +    lineLength);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
204	[BUG]  [BUGGY]  pos  +=  linenoSeparator.length  +  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  linenoSeparator.length  +  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  linenoSeparator.length  +  2;	  pos    +=    lineSeparator.length    +    2;    	non-compiled	[CE]  ';'  expected	17	None	replace
205	[BUG]  [BUGGY]  pos  +=  lineSeparator.length:  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineSeparator.length:  2;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineSeparator.length:  2;	  pos    +=    lineSeparator.length    +    2;    	non-compiled	[CE]  ';'  expected	17	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inPos);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  lineLength);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  lineLength);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  inAvail  +  lineLength);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  len);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  len);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  len);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    inAvail);    	non-compiled	[CE]  ';'  expected	30	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  3);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  3);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  3);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  2);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  2);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(CHUNK_SEPARATOR,  0,  buffer,  pos,  lineSeparator.length  -  2);	      System.arraycopy(CHUNK_SEPARATOR,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	1	None	replace
212	[BUG]  [BUGGY]  pos  +=  lineLength  -  1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  lineLength  -  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  lineLength  -  1;	  pos    +=    lineSeparator.length    -    1;    	non-compiled	[CE]  ';'  expected	13	None	replace
213	[BUG]  [BUGGY]  pos  +=  linenoSeparator.length  +  1;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  linenoSeparator.length  +  1;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  linenoSeparator.length  +  1;	  pos    +=    lineSeparator.length    +    1;    	non-compiled	[CE]  ';'  expected	12	None	replace
214	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_8BITS];  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  3)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    3)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	5	None	replace
215	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  4)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
216	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
217	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
218	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  CHUNK_SEPARATOR;  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  3)&  CHUNK_SEPARATOR;  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  3)&  CHUNK_SEPARATOR;	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR;    	non-compiled	[CE]  ';'  expected	32	None	replace
219	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  4)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  4)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
220	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >>  6)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >>  6)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
221	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  >=  6)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  >=  6)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
222	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  CHUNK_SEPARATOR];  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  CHUNK_SEPARATOR];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  [Delete]  2)&  CHUNK_SEPARATOR];	      buffer[pos++]    =    encodeTable[(x    <    <    2)&    CHUNK_SEPARATOR];    	non-compiled	[CE]  ';'  expected	10	None	replace
223	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x  ==  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
224	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_6BITS];  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_6BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(x!=  6)&  MASK_6BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
225	[BUG]  [BUGGY]  buffer[pos++]  =  encodeTable[(y  <  <  6)&  MASK_8BITS];  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  buffer[pos++]  =  encodeTable[(y  <  <  6)&  MASK_8BITS];  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	buffer[pos++]  =  encodeTable[(y  <  <  6)&  MASK_8BITS];	      buffer[pos++]    =    encodeTable[(x    <    <    6)&    MASK_6BITS];    	non-compiled	[CE]  ';'  expected	2	None	replace
226	[BUG]  [BUGGY]  pos  +=  endSeparator.length;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  pos  +=  endSeparator.length;  [BUGGY]    }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	pos  +=  endSeparator.length;	  pos    +=    fileSeparator.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    buffer[pos++]  =  encodeTable[(x  >>  4)  &  MASK_6BITS];  buffer[pos++]  =  encodeTable[(x  <<  2)  &  MASK_6BITS];  if  (encodeTable  ==  STANDARD_ENCODE_TABLE)  {  buffer[pos++]  =  PAD;  }  break;  }  if  (lineLength  >  0  &&  pos  >  0)  {  System.arraycopy(lineSeparator,  0,  buffer,  pos,  lineSeparator.length);    [BUGGY]  System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);  [BUGGY]    pos  +=  lineSeparator.length;  }  }  else  {  for  (int  i  =  0;  i  <  inAvail;  i++)  {  if  (buffer  ==  null  ||  buffer.length  -  pos  <  encodeSize)  {  resizeBuffer();  }  modulus  =  (++modulus)  %  3;  int  b  =  in[inPos++];  if  (b  <  0)  {  b  +=  256;  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  void  byte[]  in  int  inPos  int  inAvail  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  b  buffer  encodeTable  in  lineSeparator  out  boolean  eof  urlSafe  byte  PAD  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  modulus  outAvail  outPos  pos  readPos  x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	System.arraycopy(chunks,  0,  buffer,  pos,  lineSeparator.length  -  inAvail);	      System.arraycopy(chunks,    0,    buffer,    pos,    lineSeparator.length);    	non-compiled	[CE]  ';'  expected	33	None	replace
