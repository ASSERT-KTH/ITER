bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return pArray; [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { [BUGGY] return pArray; [BUGGY] } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { [BUGGY] [BUGGY] return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	add	
3	[BUG] [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [FE] AssertionFailedError [CONTEXT] buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [BUGGY] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	485	485	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { [BUGGY] [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	485	485	2	add	
5	[BUG] [BUGGY] pos += lineSeparator.length; [FE] AssertionFailedError [CONTEXT] buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [BUGGY] pos += lineSeparator.length; [BUGGY] } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [BUGGY] [BUGGY] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.8164965809277261	486	486	2	add	
7	[BUG] [BUGGY] return this.encodeTable == URL_SAFE_ENCODE_TABLE; [FE] AssertionFailedError [CONTEXT] public boolean isUrlSafe() { [BUGGY] return this.encodeTable == URL_SAFE_ENCODE_TABLE; [BUGGY] } [CLASS] Base64 [METHOD] isUrlSafe [RETURN_TYPE] boolean  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	348	348	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean isUrlSafe() { [BUGGY] [BUGGY] return this.encodeTable == URL_SAFE_ENCODE_TABLE; } [CLASS] Base64 [METHOD] isUrlSafe [RETURN_TYPE] boolean  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	348	348	2	add	
9	[BUG] [BUGGY] if (eof) { [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { [BUGGY] if (eof) { [BUGGY] return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	453	453	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { [BUGGY] [BUGGY] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	453	453	2	add	
11	[BUG] [BUGGY] if (inAvail < 0) { [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   [BUGGY] if (inAvail < 0) { [BUGGY] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	458	458	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   [BUGGY] [BUGGY] if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	458	458	2	add	
13	[BUG] [BUGGY] eof = true; [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { [BUGGY] eof = true; [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	459	459	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { [BUGGY] [BUGGY] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	459	459	2	add	
15	[BUG] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [BUGGY] resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	460	460	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; }   if (inAvail < 0) { eof = true; [BUGGY] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	460	460	2	add	
17	[BUG] [BUGGY] switch (modulus) { [FE] AssertionFailedError [CONTEXT] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] switch (modulus) { [BUGGY] case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break;  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	463	463	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (eof) { return; }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] [BUGGY] switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break;  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	463	463	2	add	
19	[BUG] [BUGGY] buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [FE] AssertionFailedError [CONTEXT] }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : [BUGGY] buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	465	465	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : [BUGGY] [BUGGY] buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	465	465	2	add	
21	[BUG] [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS]; [FE] AssertionFailedError [CONTEXT]   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS]; [BUGGY]  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	466	466	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; [BUGGY] [BUGGY] buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	466	466	2	add	
23	[BUG] [BUGGY] if (encodeTable == STANDARD_ENCODE_TABLE) { [FE] AssertionFailedError [CONTEXT] if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  [BUGGY] if (encodeTable == STANDARD_ENCODE_TABLE) { [BUGGY] buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	468	468	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (inAvail < 0) { eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  [BUGGY] [BUGGY] if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	468	468	2	add	
25	[BUG] [BUGGY] buffer[pos++] = PAD; [FE] AssertionFailedError [CONTEXT] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [BUGGY] buffer[pos++] = PAD; [BUGGY] buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	469	469	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] eof = true; if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [BUGGY] [BUGGY] buffer[pos++] = PAD; buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	469	469	2	add	
27	[BUG] [BUGGY] buffer[pos++] = PAD; [FE] AssertionFailedError [CONTEXT] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [BUGGY] buffer[pos++] = PAD; [BUGGY] } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	470	470	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } switch (modulus) { case 1 : buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [BUGGY] [BUGGY] buffer[pos++] = PAD; } break; case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	470	470	2	add	
29	[BUG] [BUGGY] if (lineLength > 0 && pos > 0) { [FE] AssertionFailedError [CONTEXT] case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } [BUGGY] if (lineLength > 0 && pos > 0) { [BUGGY] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	484	484	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case 2 : buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS]; buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];  if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } [BUGGY] [BUGGY] if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	484	484	2	add	
31	[BUG] [BUGGY] for (int i = 0; i < inAvail; i++) { [FE] AssertionFailedError [CONTEXT] if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { [BUGGY] for (int i = 0; i < inAvail; i++) { [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	489	489	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (encodeTable == STANDARD_ENCODE_TABLE) { buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { [BUGGY] [BUGGY] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	489	489	2	add	
33	[BUG] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [FE] AssertionFailedError [CONTEXT] buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { [BUGGY] resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	490	490	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] buffer[pos++] = PAD; } break; } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { [BUGGY] [BUGGY] if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	490	490	2	add	
35	[BUG] [BUGGY] modulus = (++modulus) % 3; [FE] AssertionFailedError [CONTEXT] } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] modulus = (++modulus) % 3; [BUGGY] int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	493	493	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } [BUGGY] [BUGGY] modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	493	493	2	add	
37	[BUG] [BUGGY] int b = in[inPos++]; [FE] AssertionFailedError [CONTEXT] if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; [BUGGY] int b = in[inPos++]; [BUGGY] if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	494	494	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (lineLength > 0 && pos > 0) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; [BUGGY] [BUGGY] int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	494	494	2	add	
39	[BUG] [BUGGY] if (b < 0) { [FE] AssertionFailedError [CONTEXT] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [BUGGY] if (b < 0) { [BUGGY] b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	495	495	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; [BUGGY] [BUGGY] if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	495	495	2	add	
41	[BUG] [BUGGY] b += 256; [FE] AssertionFailedError [CONTEXT] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { [BUGGY] b += 256; [BUGGY] } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	496	496	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { [BUGGY] [BUGGY] b += 256; } x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	496	496	2	add	
43	[BUG] [BUGGY] x = (x << 8) + b; [FE] AssertionFailedError [CONTEXT] } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } [BUGGY] x = (x << 8) + b; [BUGGY] if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	498	498	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } [BUGGY] [BUGGY] x = (x << 8) + b; if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	498	498	2	add	
45	[BUG] [BUGGY] if (0 == modulus) { [FE] AssertionFailedError [CONTEXT] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; [BUGGY] if (0 == modulus) { [BUGGY] buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	499	499	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int i = 0; i < inAvail; i++) { if (buffer == null || buffer.length - pos < encodeSize) { resizeBuffer(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; [BUGGY] [BUGGY] if (0 == modulus) { buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buffer[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] void  byte[] in int inPos int inAvail [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE b buffer encodeTable in lineSeparator out boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos currentLinePos decodeSize encodeSize i inAvail inPos len lineLength modulus outAvail outPos pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	499	499	2	add	
48	[BUG] [BUGGY] if (!(pObject instanceof byte[])) { [FE] AssertionFailedError [CONTEXT] public Object encode(Object pObject) throws EncoderException { [BUGGY] if (!(pObject instanceof byte[])) { [BUGGY] throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]"); } return encode((byte[]) pObject); } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] Object  Object pObject [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result Object pObject boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	903	903	2	replace	
49	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Object encode(Object pObject) throws EncoderException { [BUGGY] [BUGGY] if (!(pObject instanceof byte[])) { throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]"); } return encode((byte[]) pObject); } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] Object  Object pObject [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result Object pObject boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	903	903	2	add	
50	[BUG] [BUGGY] return encode((byte[]) pObject); [FE] AssertionFailedError [CONTEXT] public Object encode(Object pObject) throws EncoderException { if (!(pObject instanceof byte[])) { throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]"); } [BUGGY] return encode((byte[]) pObject); [BUGGY] } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] Object  Object pObject [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result Object pObject boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	906	906	2	replace	
51	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Object encode(Object pObject) throws EncoderException { if (!(pObject instanceof byte[])) { throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]"); } [BUGGY] [BUGGY] return encode((byte[]) pObject); } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] Object  Object pObject [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result Object pObject boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	906	906	2	add	
52	[BUG] [BUGGY] reset(); [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { [BUGGY] reset(); [BUGGY] if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	929	929	2	replace	
53	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { [BUGGY] [BUGGY] reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	929	929	2	add	
54	[BUG] [BUGGY] if (pArray == null || pArray.length == 0) { [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); [BUGGY] if (pArray == null || pArray.length == 0) { [BUGGY] return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	930	930	2	replace	
55	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); [BUGGY] [BUGGY] if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	930	930	2	add	
56	[BUG] [BUGGY] long len = getEncodeLength(pArray, lineLength, lineSeparator); [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } [BUGGY] long len = getEncodeLength(pArray, lineLength, lineSeparator); [BUGGY] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	933	933	2	replace	
57	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } [BUGGY] [BUGGY] long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	933	933	2	add	
58	[BUG] [BUGGY] byte[] buf = new byte[(int) len]; [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); [BUGGY] byte[] buf = new byte[(int) len]; [BUGGY] setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	replace	
59	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); [BUGGY] [BUGGY] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	934	934	2	add	
60	[BUG] [BUGGY] setInitialBuffer(buf, 0, buf.length); [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; [BUGGY] setInitialBuffer(buf, 0, buf.length); [BUGGY] encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	935	935	2	replace	
61	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; [BUGGY] [BUGGY] setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	935	935	2	add	
62	[BUG] [BUGGY] encode(pArray, 0, pArray.length); [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); [BUGGY] encode(pArray, 0, pArray.length); [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	936	936	2	replace	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); [BUGGY] [BUGGY] encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	936	936	2	add	
64	[BUG] [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF. // Encoder might have resized, even though it was unnecessary. if (buffer != buf) { [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF.  // Encoder might have resized, even though it was unnecessary.    if (buffer != buf) { [BUGGY]  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	937	939	2	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public byte[] encode(byte[] pArray) { reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); [BUGGY] [BUGGY] encode(pArray, 0, -1); // Notify encoder of EOF.  // Encoder might have resized, even though it was unnecessary.    if (buffer != buf) {  if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	937	939	2	add	
66	[BUG] [BUGGY] if (buffer != buf) { [FE] AssertionFailedError [CONTEXT] reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  [BUGGY] if (buffer != buf) { [BUGGY] readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	939	939	2	replace	
67	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] reset(); if (pArray == null || pArray.length == 0) { return pArray; } long len = getEncodeLength(pArray, lineLength, lineSeparator); byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  [BUGGY] [BUGGY] if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	939	939	2	add	
68	[BUG] [BUGGY] if (isUrlSafe() && pos < buf.length) { [FE] AssertionFailedError [CONTEXT] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [BUGGY] if (isUrlSafe() && pos < buf.length) { [BUGGY] byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	944	944	2	replace	
69	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] byte[] buf = new byte[(int) len]; setInitialBuffer(buf, 0, buf.length); encode(pArray, 0, pArray.length); encode(pArray, 0, -1); // Notify encoder of EOF.  if (buffer != buf) { readResults(buf, 0, buf.length); }   [BUGGY] [BUGGY] if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } return buf; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	944	944	2	add	
70	[BUG] [BUGGY] return buf; [FE] AssertionFailedError [CONTEXT] if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } [BUGGY] return buf; [BUGGY] } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	949	949	2	replace	
71	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (buffer != buf) { readResults(buf, 0, buf.length); }   if (isUrlSafe() && pos < buf.length) { byte[] smallerBuf = new byte[pos]; System.arraycopy(buf, 0, smallerBuf, 0, pos); buf = smallerBuf; } [BUGGY] [BUGGY] return buf; } [CLASS] Base64 [METHOD] encode [RETURN_TYPE] byte[]  byte[] pArray [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	949	949	2	add	
72	[BUG] [BUGGY] chunkSize = (chunkSize / 4) * 4; [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  [BUGGY] chunkSize = (chunkSize / 4) * 4; [BUGGY]  long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	965	965	2	replace	
73	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  [BUGGY] [BUGGY] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	965	965	2	add	
74	[BUG] [BUGGY] long len = (pArray.length * 4) / 3; [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; [BUGGY] long len = (pArray.length * 4) / 3; [BUGGY] long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	967	967	2	replace	
75	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; [BUGGY] [BUGGY] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	967	967	2	add	
76	[BUG] [BUGGY] long mod = len % 4; [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; [BUGGY] long mod = len % 4; [BUGGY] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	968	968	2	replace	
77	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; [BUGGY] [BUGGY] long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	968	968	2	add	
78	[BUG] [BUGGY] if (mod != 0) { [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; [BUGGY] if (mod != 0) { [BUGGY] len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	969	969	2	replace	
79	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; [BUGGY] [BUGGY] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	969	969	2	add	
80	[BUG] [BUGGY] len += 4 - mod; [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { [BUGGY] len += 4 - mod; [BUGGY] } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	970	970	2	replace	
81	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { [BUGGY] [BUGGY] len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	970	970	2	add	
82	[BUG] [BUGGY] if (chunkSize > 0) { [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } [BUGGY] if (chunkSize > 0) { [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	972	972	2	replace	
83	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } [BUGGY] [BUGGY] if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	972	972	2	add	
84	[BUG] [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	973	973	2	replace	
85	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private static long getEncodeLength(byte[] pArray, int chunkSize, byte[] chunkSeparator) {  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { [BUGGY] [BUGGY] boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	973	973	2	add	
86	[BUG] [BUGGY] len += (len / chunkSize) * chunkSeparator.length; [FE] AssertionFailedError [CONTEXT]  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] len += (len / chunkSize) * chunkSeparator.length; [BUGGY] if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	974	974	2	replace	
87	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; [BUGGY] [BUGGY] len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	974	974	2	add	
88	[BUG] [BUGGY] if (!lenChunksPerfectly) { [FE] AssertionFailedError [CONTEXT] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; [BUGGY] if (!lenChunksPerfectly) { [BUGGY] len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	975	975	2	replace	
89	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] chunkSize = (chunkSize / 4) * 4; long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; [BUGGY] [BUGGY] if (!lenChunksPerfectly) { len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	975	975	2	add	
90	[BUG] [BUGGY] len += chunkSeparator.length; [FE] AssertionFailedError [CONTEXT] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [BUGGY] len += chunkSeparator.length; [BUGGY] } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	976	976	2	replace	
91	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] long len = (pArray.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { [BUGGY] [BUGGY] len += chunkSeparator.length; } } return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	976	976	2	add	
92	[BUG] [BUGGY] return len; [FE] AssertionFailedError [CONTEXT] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [BUGGY] return len; [BUGGY] } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	979	979	2	replace	
93	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (mod != 0) { len += 4 - mod; } if (chunkSize > 0) { boolean lenChunksPerfectly = len % chunkSize == 0; len += (len / chunkSize) * chunkSeparator.length; if (!lenChunksPerfectly) { len += chunkSeparator.length; } } [BUGGY] [BUGGY] return len; } [CLASS] Base64 [METHOD] getEncodeLength [RETURN_TYPE] long  byte[] pArray int chunkSize byte[] chunkSeparator [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE arrayOctet b base64Data binaryData buf buffer chunkSeparator data encodeTable groomedData in lineSeparator out pArray packedData result smallerBuf boolean eof isChunked lenChunksPerfectly urlSafe byte PAD b byteToCheck octet int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS b bAvail bPos bytesCopied chunkSize currentLinePos decodeSize encodeSize i inAvail inPos len lineLength maxResultSize modulus outAvail outPos pos readPos result x long len mod  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.7071067811865475	979	979	2	add	
94	[BUG] [BUGGY] this(false); [FE] AssertionFailedError [CONTEXT] public Base64() { [BUGGY] this(false); [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64()  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	225	225	2	replace	
95	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64() { [BUGGY] [BUGGY] this(false); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64()  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	225	225	2	add	
96	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public Base64() { this(false); [BUGGY] } [BUGGY]  [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64()  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	226	226	2	replace	
97	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64() { this(false); [BUGGY] [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64()  [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.5773502691896258	226	226	2	add	
98	[BUG] [BUGGY] this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [FE] AssertionFailedError [CONTEXT] public Base64(boolean urlSafe) { [BUGGY] this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); [BUGGY] } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.5345224838248488	244	244	2	replace	
99	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public Base64(boolean urlSafe) { [BUGGY] [BUGGY] this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); } [CLASS] Base64 [METHOD] <init> [RETURN_TYPE] Base64(boolean)  boolean urlSafe [VARIABLES] byte[] CHUNK_SEPARATOR DECODE_TABLE STANDARD_ENCODE_TABLE URL_SAFE_ENCODE_TABLE buffer encodeTable lineSeparator boolean eof urlSafe byte PAD int CHUNK_SIZE DEFAULT_BUFFER_RESIZE_FACTOR DEFAULT_BUFFER_SIZE MASK_6BITS MASK_8BITS currentLinePos decodeSize encodeSize lineLength modulus pos readPos x  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	0.5345224838248488	244	244	2	add	
