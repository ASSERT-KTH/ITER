bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  ')'  expected	2	None	replace
2	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length  +  1);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
3	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length));  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length));	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  buffer,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  buffer,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  buffer,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
5	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  2,  pArray.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  2,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  2,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
6	[BUG]  [BUGGY]  Sys.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Sys.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Sys.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
7	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  1);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length,  pArray.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
10	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length)+  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length)+  1;	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
11	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  2);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  2);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
12	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  *  2);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  *  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  *  2);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
13	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
14	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  }  else  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
15	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
16	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialSize(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialSize(pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
17	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(buffer,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(buffer,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(buffer,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
18	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.readResults(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.readResults(pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
19	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLine(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLine(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLine(pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
20	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Arrays.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Arrays.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    Arrays.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
21	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLineSeparator(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLineSeparator(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLineSeparator(pArray,  0,  pArray.length);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
22	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getBytes();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getBytes();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.getBytes();	  return(pArray!=    null)?    null    :    pArray;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
23	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.clone();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.clone();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.clone();	  return(pArray!=    null)?    null    :    pArray;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
24	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  pArray.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
25	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length,  pArray.length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray.length,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
26	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length  -  1);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray.length  -  1);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
27	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  p.length);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  p.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  p.length);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
28	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length,  pLength);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length,  pLength);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray.length,  pLength);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
29	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray.length  +  1);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
30	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  pLength);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  pLength);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  pLength);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
31	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length  +  1);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  0,  pArray.length  +  1);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
32	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length  -  1);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  0,  pArray.length  -  1);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
33	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length)+  1;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length)+  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  0,  pArray.length)+  1;	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
34	[BUG]  [BUGGY]  byte[]  pArray  =  encodePath(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encodePath(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encodePath(pArray,  0,  pArray.length);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
35	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length;  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  0,  pArray.length;	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  ')'  expected	10	None	replace
36	[BUG]  [BUGGY]  byte[]  pArray  =  encodeBase64(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encodeBase64(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encodeBase64(pArray,  0,  pArray.length);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
37	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  pArray.length);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  pArray.length);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
38	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  0);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  0);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  0);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
39	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray.length);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray.length);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
40	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  pLength);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  pLength);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  pLength);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
41	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  0,  pArray.length);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  0,  pArray.length);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
42	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  null);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  null);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  null);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
43	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  1);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
44	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  false);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  false);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  false);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  +  1);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  4,  pArray.length);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  4,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  4,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length-1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length-1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length-1);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pExpr.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pExpr.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pExpr.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  *  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  *  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  *  2);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  +  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length  +  2);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	22	None	replace
51	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  +  1);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
52	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  -  1);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
53	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  *  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  *  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  *  2);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
54	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length)+  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pArray.length)+  1;	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
55	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  -  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  -  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  -  2);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
56	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  +  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  +  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pArray.length  +  2);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Len  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Len  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Len  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  buffer  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  buffer  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  buffer  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileLength  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileLength  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileLength  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  encode(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  encode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  encode(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  int  len  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  int  len  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  int  len  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
63	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator()  -  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator()  -  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator()  -  1;	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
64	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator().length;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator().length;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator().length;	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
65	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(0);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(0);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(0);	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
66	[BUG]  [BUGGY]  int  lineSeparator  =  getRawLineSeparator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getRawLineSeparator();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getRawLineSeparator();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
67	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator()  +  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator()  +  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator()  +  1;	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
68	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSeparator();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSeparator();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSeparator();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	29	None	replace
69	[BUG]  [BUGGY]  return(pArray  >=  null)?  null  :  pArray.toByteArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  >=  null)?  null  :  pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  >=  null)?  null  :  pArray.toByteArray();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
70	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.length.toByteArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.length.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.length.toByteArray();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
71	[BUG]  [BUGGY]  return(pArray  >>  null)?  null  :  pArray.toByteArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  >>  null)?  null  :  pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  >>  null)?  null  :  pArray.toByteArray();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
72	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.length.toByteArray();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.length.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.length.toByteArray();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  pArray;  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  pArray;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  pArray;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  null;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  null;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  fileSeparator  =  base64;  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  fileSeparator  =  base64;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  fileSeparator  =  base64;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  fileSeparator  =  base64;  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  fileSeparator  =  base64;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  fileSeparator  =  base64;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  1;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  Base64.byteArray;  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  Base64.byteArray;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  Base64.byteArray;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  0;  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  0;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  0;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	24	None	replace
80	[BUG]  [BUGGY]  readResults(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	readResults(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
81	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  readResults,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  readResults,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  readResults,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
82	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  result,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  result,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  result,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
83	[BUG]  [BUGGY]  ReadResults(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  ReadResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	ReadResults(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
84	[BUG]  [BUGGY]  pArray  =  readResults(pArray,  0,  pArray.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  pArray  =  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	pArray  =  readResults(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
85	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  Base64  is  not  abstract  and  does  not  override  abstract  method  encode(byte[])  in  BinaryEncoder  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  readResults(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  Base64  is  not  abstract  and  does  not  override  abstract  method  encode(byte[])  in  BinaryEncoder	5	None	replace
86	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  Base64  is  not  abstract  and  does  not  override  abstract  method  encode(byte[])  in  BinaryEncoder  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  Base64  is  not  abstract  and  does  not  override  abstract  method  encode(byte[])  in  BinaryEncoder	9	None	replace
87	[BUG]  [BUGGY]  byte  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  Base64  is  not  abstract  and  does  not  override  abstract  method  encode(byte[])  in  BinaryEncoder  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  Base64  is  not  abstract  and  does  not  override  abstract  method  encode(byte[])  in  BinaryEncoder	9	None	replace
88	[BUG]  [BUGGY]  Reader  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Reader  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Reader  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
89	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray[0].length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray[0].length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray[0].length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
90	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  readResults(pArray,  0,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
91	[BUG]  [BUGGY]  return  new  byte[pArray.length  +  1];  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  +  1];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  +  1];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
92	[BUG]  [BUGGY]  return  new  byte[pArray.length  *  2];  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  *  2];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  *  2];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
93	[BUG]  [BUGGY]  return  new  byte[pArray.length  +  2];  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  +  2];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  +  2];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
94	[BUG]  [BUGGY]  return  new  byte[pArray.length  -  1];  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  -  1];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  -  1];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
95	[BUG]  [BUGGY]  return  new  byte[pArray.length  +  4];  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  +  4];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  +  4];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
96	[BUG]  [BUGGY]  return  new  byte[pArray.length  +  3];  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  +  3];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  +  3];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
97	[BUG]  [BUGGY]  return  new  byte[pArray.length  *  4];  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length  *  4];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length  *  4];	  return    new    byte[pArray.length];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
98	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  1);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
99	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  +  1);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
100	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length,  pArray.length);  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
101	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  *  2);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  *  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  *  2);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
102	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length)+  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length)+  1;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length)+  1;	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	27	None	replace
103	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  2);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length  -  2);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
104	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.length.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.length.clone();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.length.clone();	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
105	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toArray();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.toArray();	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
106	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.copy();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.copy();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.copy();	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
107	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.asArray();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.asArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.asArray();	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
108	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.next();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.next();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.next();	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
109	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getName();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getName();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.getName();	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
110	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  pArray.length);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
111	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length,  pArray.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray.length,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
112	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length  -  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray.length  -  1);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
113	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  p.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  p.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  p.length);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
114	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  pLength);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  pLength);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  pLength);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
115	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  pStack.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  pStack.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  pStack.length);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
116	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.length);	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
117	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.toByteArray());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.toByteArray());  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.toByteArray());	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
118	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.length).toByteArray();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.length).toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.subtract(pArray.length,  pArray.length).toByteArray();	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
119	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toBytes();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toBytes();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.toBytes();	  return(pArray    ==    null)?    null    :    pArray;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
120	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.byteValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.byteValue();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.byteValue();	  return(pArray    ==    null)?    null    :    pArray;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
121	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.trim();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.trim();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.trim();	  return(pArray    ==    null)?    null    :    pArray;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
122	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.length  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.length  +  1;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.length  +  1;	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
123	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.length  +  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.length  +  1;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.length  +  1;	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
124	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getLength();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getLength();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.getLength();	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
125	[BUG]  [BUGGY]  return(pArray  >=  null)?  null  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  >=  null)?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  >=  null)?  null  :  pArray.length;	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
126	[BUG]  [BUGGY]  return(pArray  >>  null)?  null  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  >>  null)?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  >>  null)?  null  :  pArray.length;	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  return  pArray.length.toByteArray();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
128	[BUG]  [BUGGY]  return  pArray.subtract(pArray.length)?  null  :  pArray.toByteArray();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.subtract(pArray.length)?  null  :  pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.subtract(pArray.length)?  null  :  pArray.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
129	[BUG]  [BUGGY]  return  pArray.subtract(pArray.length,  pArray.length)?  null  :  pArray.toByteArray();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.subtract(pArray.length,  pArray.length)?  null  :  pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.subtract(pArray.length,  pArray.length)?  null  :  pArray.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
130	[BUG]  [BUGGY]  return  pArray.subtract(pArray.length,  pArray.length)?  1  :  pArray.toByteArray();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.subtract(pArray.length,  pArray.length)?  1  :  pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.subtract(pArray.length,  pArray.length)?  1  :  pArray.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
131	[BUG]  [BUGGY]  return  pArray.subtract(pArray.length)?  1  :  pArray.toByteArray();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.subtract(pArray.length)?  1  :  pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.subtract(pArray.length)?  1  :  pArray.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
132	[BUG]  [BUGGY]  return  pArray.subtract(pArray.length).toByteArray();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.subtract(pArray.length).toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.subtract(pArray.length).toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
133	[BUG]  [BUGGY]  return  pArray.subtract(pArray.length,  pArray.length).toByteArray();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.subtract(pArray.length,  pArray.length).toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.subtract(pArray.length,  pArray.length).toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
134	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.decode(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.decode(pArray,  0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.decode(pArray,  0,  pArray.length);	  return(pArray    ==    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
135	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.decode(pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.decode(pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.decode(pArray.length);	  return(pArray    ==    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  1,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
137	[BUG]  [BUGGY]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
138	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  setInitialBuffer,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  setInitialBuffer,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  setInitialBuffer,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
139	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
140	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray[0].length);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray[0].length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray[0].length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
141	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  buffer,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  buffer,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  buffer,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
142	[BUG]  [BUGGY]  return  pArray.length.cloneTree();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length.cloneTree();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length.cloneTree();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
143	[BUG]  [BUGGY]  return  pArray.cloneByte();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.cloneByte();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.cloneByte();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
144	[BUG]  [BUGGY]  return  this.pArray.cloneTree();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  this.pArray.cloneTree();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  this.pArray.cloneTree();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
145	[BUG]  [BUGGY]  return  pArray.clonePosition();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.clonePosition();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.clonePosition();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
146	[BUG]  [BUGGY]  return  pArray.cloneSeparator();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.cloneSeparator();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.cloneSeparator();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
147	[BUG]  [BUGGY]  return  pArray.getBytes();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.getBytes();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.getBytes();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
148	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
149	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Data);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Data);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64Data);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
150	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray.cloneTree());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray.cloneTree());  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray.cloneTree());	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
151	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64Length);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
152	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Separator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Separator);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64Separator);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
153	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Name);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64Name);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
154	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  false);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  false);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  false);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
155	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64();	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
156	[BUG]  [BUGGY]  byte[]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
157	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])pArray.toArray(new  byte[pArray.length]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])pArray.toArray(new  byte[pArray.length]);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])pArray.toArray(new  byte[pArray.length]);	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
158	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])pArray.toArray(new  byte[pArray.size()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])pArray.toArray(new  byte[pArray.size()  ]);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])pArray.toArray(new  byte[pArray.size()  ]);	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
159	[BUG]  [BUGGY]  byte[]  pArray  =  new  byte[pArray.length];  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  new  byte[pArray.length];  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  new  byte[pArray.length];	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
160	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])pArray.getValue();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])pArray.getValue();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])pArray.getValue();	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
161	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])p.clone();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])p.clone();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])p.clone();	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
162	[BUG]  [BUGGY]  return  pArray.length.clone();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length.clone();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length.clone();	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
163	[BUG]  [BUGGY]  return  pArray.copyInt(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.copyInt(pArray,  0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.copyInt(pArray,  0,  pArray.length);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
164	[BUG]  [BUGGY]  return  pArray.copyInt(pArray.length);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.copyInt(pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.copyInt(pArray.length);	  return    pArray.clone();    	non-compiled	[CE]  ';'  expected	13	None	replace
165	[BUG]  [BUGGY]  return  pArray.decode(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.decode(pArray,  0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.decode(pArray,  0,  pArray.length);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
166	[BUG]  [BUGGY]  return  pArray.copyInt(pArray.length,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.copyInt(pArray.length,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.copyInt(pArray.length,  pArray.length);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
167	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  0);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  0);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
168	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  1);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
169	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  null);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  null);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  null);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
170	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  len);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  len);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  len);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
171	[BUG]  [BUGGY]  return  pArray.length  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  +  1;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  +  1;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
172	[BUG]  [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)  {  return  pArray.length;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)  {  return  pArray.length;  }  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)  {  return  pArray.length;  }	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
173	[BUG]  [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length!=  0)  {  return  pArray.length;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length!=  0)  {  return  pArray.length;  }  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ||  pArray.length  }  else  if(pArray.length!=  0)  {  return  pArray.length;  }	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
174	[BUG]  [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  >  0)  {  return  pArray.length;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  >  0)  {  return  pArray.length;  }  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ||  pArray.length  }  else  if(pArray.length  >  0)  {  return  pArray.length;  }	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
175	[BUG]  [BUGGY]  return  pArray.length  -  1;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  -  1;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  -  1;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
176	[BUG]  [BUGGY]  return  pArray.length  ||  pArray.length;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ||  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ||  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
177	[BUG]  [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)  {  return  null;  }  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)  {  return  null;  }	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
178	[BUG]  [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)return  null;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)return  null;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ||  pArray.length  }  else  if(pArray.length  ==  0)return  null;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
179	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  -  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  -  1);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
180	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  +  1);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  +  1);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
181	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
182	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(base64Data,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(base64Data,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(base64Data,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
183	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  *  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  *  2);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  0,  pArray.length  *  2);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
184	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length).toByteArray();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length).toByteArray();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  0,  pArray.length).toByteArray();	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
185	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length).toBytes();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  0,  pArray.length).toBytes();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  0,  pArray.length).toBytes();	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
186	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray.length,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray.length,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray.length,  0,  pArray.length);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
187	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(base64,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(base64,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(base64,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
188	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray.length,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray.length,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray.length,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
189	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64Data(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64Data(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64Data(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
190	[BUG]  [BUGGY]  byte[]  pArray  =  findEncodeBase64(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  findEncodeBase64(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  findEncodeBase64(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
191	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  encodeSize);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  encodeSize);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  encodeSize);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
192	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  data.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  data.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  data.length);	      int    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
193	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
194	[BUG]  [BUGGY]  Integer  lineSeparator  =  findEncodeSize(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  findEncodeSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  findEncodeSize(pArray,  0,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
195	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  1,  pArray.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  1,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  1,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
196	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toArray(new  byte[pArray.length]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toArray(new  byte[pArray.length]);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.toArray(new  byte[pArray.length]);	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
197	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.copyOf(pArray);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.copyOf(pArray);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.copyOf(pArray);	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
198	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.copyOf(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.copyOf(pArray,  0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.copyOf(pArray,  0,  pArray.length);	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
199	[BUG]  [BUGGY]  int  lineSeparator  =  getCharacterSeparator();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getCharacterSeparator();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getCharacterSeparator();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
200	[BUG]  [BUGGY]  int  lineSeparator  =  getBase64Separator();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getBase64Separator();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getBase64Separator();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  checkInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  checkInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  checkInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encodePos,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encodePos,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encodePos,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
203	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  SetInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  SetInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  SetInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  this.base64;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  this.base64;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  this.base64;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(base64,  0,  pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  fileSeparator,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  fileSeparator,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  fileSeparator,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  Base64;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  Base64;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  Base64;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
208	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  lineSeparator  =  base64;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  lineSeparator  =  base64;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  lineSeparator  =  base64;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
209	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.getBytes();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.getBytes();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.getBytes();	  return(pArray!=    null)?    null    :    pArray;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
210	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])pArray.getData();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])pArray.getData();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])pArray.getData();	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
211	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])pArray.get();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])pArray.get();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])pArray.get();	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
212	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.bytes;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.bytes;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.bytes;	  return(pArray    ==    null)?    null    :    pArray;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
213	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.cloneTree();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.cloneTree();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.cloneTree();	  return(pArray    ==    null)?    null    :    pArray;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
214	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encodePos,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encodePos,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encodePos,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
215	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encodedPos,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encodedPos,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encodedPos,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
216	[BUG]  [BUGGY]  return  base64.toByteArray();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  base64.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  base64.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
217	[BUG]  [BUGGY]  return  new  byte[pArray.length].toByteArray();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length].toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length].toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
218	[BUG]  [BUGGY]  return  encode(pArray.toByteArray());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  encode(pArray.toByteArray());  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  encode(pArray.toByteArray());	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
219	[BUG]  [BUGGY]  return  base64Data.toByteArray();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  base64Data.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  base64Data.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
220	[BUG]  [BUGGY]  return  array.toByteArray();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  array.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  array.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
221	[BUG]  [BUGGY]  return  data.toByteArray();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  data.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  data.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
222	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray.length,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray.length,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray.length,  0,  pArray.length);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
223	[BUG]  [BUGGY]  byte[]  pArray  =  findEncode(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  findEncode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  findEncode(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
224	[BUG]  [BUGGY]  byte[]  pArray  =  readEncode(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  readEncode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  readEncode(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
225	[BUG]  [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pExpr.length);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncode(pArray,  0,  pExpr.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncode(pArray,  0,  pExpr.length);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
226	[BUG]  [BUGGY]  return  base64.cloneTree();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  base64.cloneTree();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  base64.cloneTree();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
227	[BUG]  [BUGGY]  return  pArray.cloneBytes();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.cloneBytes();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.cloneBytes();	  return    pArray.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
228	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Delimiter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Delimiter);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64Delimiter);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
229	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64.length);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
230	[BUG]  [BUGGY]  return  pArray.toArray(new  byte[pArray.length]);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.toArray(new  byte[pArray.length]);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.toArray(new  byte[pArray.length]);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
231	[BUG]  [BUGGY]  return  pArray.toArray(new  byte[pArray.size()  ]);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.toArray(new  byte[pArray.size()  ]);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.toArray(new  byte[pArray.size()  ]);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
232	[BUG]  [BUGGY]  return  pArray.copyIn(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.copyIn(pArray,  0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.copyIn(pArray,  0,  pArray.length);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
233	[BUG]  [BUGGY]  return  pArray.toArray(new  String[pArray.size()  ]);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.toArray(new  String[pArray.size()  ]);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.toArray(new  String[pArray.size()  ]);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
234	[BUG]  [BUGGY]  return  pArray.toArray(new  String[pArray.length]);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.toArray(new  String[pArray.length]);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.toArray(new  String[pArray.length]);	  return    pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
235	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  base64);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  base64);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  base64);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
236	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
237	[BUG]  [BUGGY]  int  lineSeparator  =  findEncodeSize(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  findEncodeSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  findEncodeSize(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
238	[BUG]  [BUGGY]  int  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
239	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  len  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  len  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length);  len  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
240	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  data  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  data  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  data  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
241	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  indent  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  indent  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  indent  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
242	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  len  =  getEncodeLength(pArray,  0,  pArray[0].length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  len  =  getEncodeLength(pArray,  0,  pArray[0].length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  len  =  getEncodeLength(pArray,  0,  pArray[0].length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
243	[BUG]  [BUGGY]  return  pArray.length+(pArray.length  >  0)?  pArray.length  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length+(pArray.length  >  0)?  pArray.length  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length+(pArray.length  >  0)?  pArray.length  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
244	[BUG]  [BUGGY]  return  pArray.length  ==  0?  null  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  ==  0?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  ==  0?  null  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
245	[BUG]  [BUGGY]  return  pArray.length+(pArray.length  <  2)?  null  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length+(pArray.length  <  2)?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length+(pArray.length  <  2)?  null  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
246	[BUG]  [BUGGY]  return  pArray.length+(pArray.length  <  1)?  null  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length+(pArray.length  <  1)?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length+(pArray.length  <  1)?  null  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
247	[BUG]  [BUGGY]  return  pArray,  0,  pArray.length;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray,  0,  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray,  0,  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
248	[BUG]  [BUGGY]  return  pArray.length+(pArray.length  <  2)?  new  byte[0]  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length+(pArray.length  <  2)?  new  byte[0]  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length+(pArray.length  <  2)?  new  byte[0]  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
249	[BUG]  [BUGGY]  return  pArray.length+(pArray.length  <  1)?  new  byte[0]  :  pArray.length;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length+(pArray.length  <  1)?  new  byte[0]  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length+(pArray.length  <  1)?  new  byte[0]  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
250	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  encodeSize);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  encodeSize);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  encodeSize);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
251	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  data.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  data.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  data.length);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
252	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  null);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  null);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
253	[BUG]  [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  encodeSize.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  getEncodeSize(pArray,  encodeSize.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  getEncodeSize(pArray,  encodeSize.length);	      Integer    lineSeparator    =    getEncodeSize(pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
254	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray.length,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
255	[BUG]  [BUGGY]  Reader  pArray  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Reader  pArray  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Reader  pArray  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
256	[BUG]  [BUGGY]  EncoderEncoder  encoder  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  EncoderEncoder  encoder  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	EncoderEncoder  encoder  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
257	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length).length;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length).length;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length).length;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
258	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Array.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Array.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    Array.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
259	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length));  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length));	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
260	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  system.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  system.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    system.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
261	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
262	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Base64.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Base64.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    Base64.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
263	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Scheme.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Scheme.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    Scheme.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
264	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  base64);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  base64);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  base64);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
265	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  sourcePos);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  sourcePos);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  sourcePos);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
266	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getByteArray();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.getByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.getByteArray();	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
267	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  new  byte[pArray.toByteArray();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  new  byte[pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  new  byte[pArray.toByteArray();	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
268	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  new  byte[pArray.length].toByteArray();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  new  byte[pArray.length].toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  new  byte[pArray.length].toByteArray();	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
269	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  array.toByteArray();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  array.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  array.toByteArray();	  return(pArray    ==    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
270	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.bytes;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.bytes;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.bytes;	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
271	[BUG]  [BUGGY]  return(pArray  [Delete]  null)?  null  :  pArray.length;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  [Delete]  null)?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  [Delete]  null)?  null  :  pArray.length;	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
272	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  1,  pArray.length);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  1,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encode(pArray,  1,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  3,  pArray.length);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  3,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  3,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  16,  pArray.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  16,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  16,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
275	[BUG]  [BUGGY]  return(pArray.length  ==  0)?  null  :  new  byte[pArray.length];  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  ==  0)?  null  :  new  byte[pArray.length];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  ==  0)?  null  :  new  byte[pArray.length];	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
276	[BUG]  [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  null;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  null;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  >=  0)?  new  byte[pArray.length]  :  null;	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
277	[BUG]  [BUGGY]  return(pArray.length  ==  0)?  new  byte[pArray.length]  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  ==  0)?  new  byte[pArray.length]  :  null;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  ==  0)?  new  byte[pArray.length]  :  null;	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
278	[BUG]  [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.parseInt(pArray.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.parseInt(pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.parseInt(pArray.length);	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
279	[BUG]  [BUGGY]  return  new  byte[pArray.length],  pArray.length];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length],  pArray.length];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length],  pArray.length];	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
280	[BUG]  [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.toHexString(pArray.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.toHexString(pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.toHexString(pArray.length);	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
281	[BUG]  [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.MAX_VALUE;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  >=  0)?  new  byte[pArray.length]  :  Integer.MAX_VALUE;	  return    new    byte[pArray.length];    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
282	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.subtract(pArray.length,  pArray.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.subtract(pArray.length,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.subtract(pArray.length,  pArray.length);	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
283	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.getByteArray();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.getByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.getByteArray();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
284	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  new  byte[pArray.length].toByteArray();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  new  byte[pArray.length].toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  new  byte[pArray.length].toByteArray();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  not  a  statement	17	None	replace
285	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.subtract(0,  pArray.length);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.subtract(0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.subtract(0,  pArray.length);	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  not  a  statement	17	None	replace
286	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.trim();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.trim();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.trim();	  return(pArray!=    null)?    null    :    pArray.toByteArray();    	non-compiled	[CE]  not  a  statement	17	None	replace
287	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.getLength();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.getLength();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.getLength();	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  not  a  statement	26	None	replace
288	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.decode(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.decode(pArray,  0,  pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.decode(pArray,  0,  pArray.length);	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  not  a  statement	26	None	replace
289	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.decode(pArray.length);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.decode(pArray.length);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.decode(pArray.length);	  return(pArray!=    null)?    null    :    pArray.length;    	non-compiled	[CE]  not  a  statement	26	None	replace
290	[BUG]  [BUGGY]  return  new  byte[pArray.length].cloneTree();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  new  byte[pArray.length].cloneTree();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  new  byte[pArray.length].cloneTree();	  return    pArray.cloneTree();    	non-compiled	[CE]  not  a  statement	20	None	replace
291	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Data.length);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray,  base64Data.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray,  base64Data.length);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  not  a  statement	23	None	replace
292	[BUG]  [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray.length);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  getEncodeBase64(pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  getEncodeBase64(pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray);    	non-compiled	[CE]  not  a  statement	23	None	replace
293	[BUG]  [BUGGY]  return(pArray.length  ==  0)?  new  byte[0]  :  new  byte[pArray.length];  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  ==  0)?  new  byte[0]  :  new  byte[pArray.length];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  ==  0)?  new  byte[0]  :  new  byte[pArray.length];	  return    new    byte[pArray.length];    	non-compiled	[CE]  not  a  statement	31	None	replace
294	[BUG]  [BUGGY]  return(pArray.length  >=  0)?  new  byte[0]  :  new  byte[pArray.length];  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray.length  >=  0)?  new  byte[0]  :  new  byte[pArray.length];  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray.length  >=  0)?  new  byte[0]  :  new  byte[pArray.length];	  return    new    byte[pArray.length];    	non-compiled	[CE]  not  a  statement	31	None	replace
295	[BUG]  [BUGGY]  char  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  char  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	char  lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	9	None	replace
296	[BUG]  [BUGGY]  int  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	9	None	replace
297	[BUG]  [BUGGY]  return  pArray.trim().toByteArray();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.trim().toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.trim().toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  not  a  statement	12	None	replace
298	[BUG]  [BUGGY]  return  this.pArray.toByteArray();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  this.pArray.toByteArray();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  this.pArray.toByteArray();	  return    pArray.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
299	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  fileSeparator  =  pArray;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  fileSeparator  =  pArray;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(base64,  0,  pArray,  0,  pArray.length);  fileSeparator  =  pArray;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
300	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  DEFAULT_ENCODE_TABLE;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  DEFAULT_ENCODE_TABLE;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  DEFAULT_ENCODE_TABLE;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  not  a  statement	24	None	replace
301	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  source64;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  source64;  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  fileSeparator  =  source64;	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    fileSeparator    =    base64;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
302	[BUG]  [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  true);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getLineSeparator(pArray,  true);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getLineSeparator(pArray,  true);	      int    lineSeparator    =    getLineSeparator(pArray);    	non-compiled	[CE]  not  a  statement	28	None	replace
303	[BUG]  [BUGGY]  ByteArray  pArray  =  getEncode(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  ByteArray  pArray  =  getEncode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	ByteArray  pArray  =  getEncode(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	8	None	replace
304	[BUG]  [BUGGY]  byte[]  pArray  =  lookupEncode(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  lookupEncode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  lookupEncode(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncode(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	8	None	replace
305	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.toBytes();  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.toBytes();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.toBytes();	  return(pArray!=    null)?    null    :    pArray;    	non-compiled	[CE]  not  a  statement	18	None	replace
306	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.getName();  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.getName();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.getName();	  return(pArray!=    null)?    null    :    pArray;    	non-compiled	[CE]  not  a  statement	18	None	replace
307	[BUG]  [BUGGY]  return(pArray!=  null)?  null  :  pArray.toString();  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray!=  null)?  null  :  pArray.toString();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray!=  null)?  null  :  pArray.toString();	  return(pArray!=    null)?    null    :    pArray;    	non-compiled	[CE]  not  a  statement	18	None	replace
308	[BUG]  [BUGGY]  return  pArray.length  <  2?  null  :  pArray.length;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  <  2?  null  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  <  2?  null  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  not  a  statement	14	None	replace
309	[BUG]  [BUGGY]  return  pArray.length  <  2?  super.encode(pArray,  0,  pArray.length):  null;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  <  2?  super.encode(pArray,  0,  pArray.length):  null;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  <  2?  super.encode(pArray,  0,  pArray.length):  null;	  return    pArray.length;    	non-compiled	[CE]  not  a  statement	14	None	replace
310	[BUG]  [BUGGY]  return  pArray.length  <  2?  super.encode(pArray.length):  null;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  <  2?  super.encode(pArray.length):  null;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  <  2?  super.encode(pArray.length):  null;	  return    pArray.length;    	non-compiled	[CE]  not  a  statement	14	None	replace
311	[BUG]  [BUGGY]  return  pArray.length  <  2?  new  byte[0]  :  pArray.length;  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length  <  2?  new  byte[0]  :  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length  <  2?  new  byte[0]  :  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  not  a  statement	14	None	replace
312	[BUG]  [BUGGY]  return  pArray.length,  pArray.length;  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length,  pArray.length;  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length,  pArray.length;	  return    pArray.length;    	non-compiled	[CE]  not  a  statement	14	None	replace
313	[BUG]  [BUGGY]  int  lineSeparator  =  getBase64LineSeparator();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getBase64LineSeparator();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getBase64LineSeparator();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  not  a  statement	29	None	replace
314	[BUG]  [BUGGY]  int  lineSeparator  =  getCharacterIndex(pArray.length);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getCharacterIndex(pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getCharacterIndex(pArray.length);	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  not  a  statement	29	None	replace
315	[BUG]  [BUGGY]  int  lineSeparator  =  getPos();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getPos();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getPos();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  not  a  statement	29	None	replace
316	[BUG]  [BUGGY]  int  lineSeparator  =  getStringSeparator();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getStringSeparator();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getStringSeparator();	      int    lineSeparator    =    getLineSeparator();    	non-compiled	[CE]  not  a  statement	29	None	replace
317	[BUG]  [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  base64Data);  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  getEncodeSize(pArray,  base64Data);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  getEncodeSize(pArray,  base64Data);	      int    lineSeparator    =    getEncodeSize(pArray);    	non-compiled	[CE]  not  a  statement	11	None	replace
318	[BUG]  [BUGGY]  Integer  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  readEncodeSize(pArray,  0,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	27	None	replace
319	[BUG]  [BUGGY]  Integer  lineSeparator  =  createLineSeparator(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Integer  lineSeparator  =  createLineSeparator(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Integer  lineSeparator  =  createLineSeparator(pArray,  0,  pArray.length);	      Integer    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	27	None	replace
320	[BUG]  [BUGGY]  byte[]  pArray  =  base64Data.encode(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  base64Data.encode(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  base64Data.encode(pArray,  0,  pArray.length);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
321	[BUG]  [BUGGY]  byte[]  pArray  =  encode(pArray,  1,  pArray.length);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  encode(pArray,  1,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  encode(pArray,  1,  pArray.length);	      byte[]    pArray    =    encode(pArray,    0,    pArray.length);    	non-compiled	[CE]  ';'  expected	10	None	replace
322	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toArray(new  String[pArray.length]);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toArray(new  String[pArray.length]);  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.toArray(new  String[pArray.length]);	  return(pArray    ==    null)?    null    :    pArray.clone();    	non-compiled	[CE]  ';'  expected	32	None	replace
323	[BUG]  [BUGGY]  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
324	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length));  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length));  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  encode(pArray,  0,  pArray.length));  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
325	[BUG]  [BUGGY]  Arrays.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  Arrays.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	Arrays.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
326	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.setInitialBuffer(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.setInitialBuffer(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.setInitialBuffer(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    setInitialBuffer(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
327	[BUG]  [BUGGY]  int  lineSeparator  =  lookupEncodeSize(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  int  lineSeparator  =  lookupEncodeSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	int  lineSeparator  =  lookupEncodeSize(pArray,  0,  pArray.length);	      int    lineSeparator    =    getEncodeSize(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
328	[BUG]  [BUGGY]  byte[]  pArray  =(byte[])pArray.toArray();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =(byte[])pArray.toArray();  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =(byte[])pArray.toArray();	      byte[]    pArray    =(byte[])pArray.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
329	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	5	None	replace
330	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  encode(pArray,  0,  pArray.length);  }  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  encode(pArray,  0,  pArray.length);  }  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  encode(pArray,  0,  pArray.length);  }	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	5	None	replace
331	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  if(pArray.length  ==  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	if(pArray.length  ==  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
332	[BUG]  [BUGGY]  if(pArray.length  ==  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  encode(pArray,  0,  pArray.length);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  if(pArray.length  ==  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  encode(pArray,  0,  pArray.length);  }  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	if(pArray.length  ==  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  encode(pArray,  0,  pArray.length);  }	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
333	[BUG]  [BUGGY]  if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  System.arraycopy(pArray,  0,  pArray.length);  }  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  System.arraycopy(pArray,  0,  pArray.length);  }  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	if(pArray.length!=  0)  {  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  readResults(pArray,  0,  pArray.length);  }  else  {  System.arraycopy(pArray,  0,  pArray.length);  }	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    readResults(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	5	None	replace
334	[BUG]  [BUGGY]  System.arraycopy(base64,  0,  pArray,  1,  pArray.length);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(base64,  0,  pArray,  1,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(base64,  0,  pArray,  1,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
335	[BUG]  [BUGGY]  System.arraycopy(base64Data,  0,  pArray,  1,  pArray.length);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(base64Data,  0,  pArray,  1,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(base64Data,  0,  pArray,  1,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    1,    pArray.length);    	non-compiled	[CE]  not  a  statement	22	None	replace
336	[BUG]  [BUGGY]  return  pArray.length,  pArray.clone();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return  pArray.length,  pArray.clone();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return  pArray.length,  pArray.clone();	  return    pArray.clone();    	non-compiled	[CE]  not  a  statement	13	None	replace
337	[BUG]  [BUGGY]  ByteArray  pArray  =  getEncodeBase64(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  ByteArray  pArray  =  getEncodeBase64(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	ByteArray  pArray  =  getEncodeBase64(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	25	None	replace
338	[BUG]  [BUGGY]  byte[]  pArray  =  createEncodeBase64(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  byte[]  pArray  =  createEncodeBase64(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	byte[]  pArray  =  createEncodeBase64(pArray,  0,  pArray.length);	      byte[]    pArray    =    getEncodeBase64(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	25	None	replace
339	[BUG]  [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toString();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  return(pArray  ==  null)?  null  :  pArray.toString();  [BUGGY]    }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	return(pArray  ==  null)?  null  :  pArray.toString();	  return(pArray    ==    null)?    null    :    pArray;    	non-compiled	[CE]  not  a  statement	15	None	replace
340	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Log.v(System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Log.v(System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  Log.v(System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  not  a  statement	1	None	add
341	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);System.arraycopy(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);System.arraycopy(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);System.arraycopy(pArray,  0,  pArray.length);	  	non-compiled	[CE]  not  a  statement	1	None	add
342	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  byte[]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  byte[]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    byte[]  pArray  =  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  not  a  statement	1	None	add
343	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);	  	non-compiled	[CE]  not  a  statement	1	None	add
344	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.lineSeparator  =  getEncodeSize(pArray,  0,  pArray.length);	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
345	[BUG]  [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.setInitialBuffer(buffer,  0,  pArray.length);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]      System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.setInitialBuffer(buffer,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	        System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  this.setInitialBuffer(buffer,  0,  pArray.length);	  	non-compiled	[CE]  not  a  statement	1	None	add
346	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  codeSeparator  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  codeSeparator  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  codeSeparator  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  not  a  statement	6	None	replace
347	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  encoded  =  getEncodeLength(pArray,  0,  pArray.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  encoded  =  getEncodeLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  encoded  =  getEncodeLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
348	[BUG]  [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLineLength(pArray,  0,  pArray.length);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  byte[]  encode(byte[]  pArray)  {  reset();  if  (pArray  ==  null  ||  pArray.length  ==  0)  {    [BUGGY]  System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLineLength(pArray,  0,  pArray.length);  [BUGGY]    return  pArray;  }  long  len  =  getEncodeLength(pArray,  lineLength,  lineSeparator);  byte[]  buf  =  new  byte[(int)  len];  setInitialBuffer(buf,  0,  buf.length);  encode(pArray,  0,  pArray.length);  encode(pArray,  0,  -1);  //  Notify  encoder  of  EOF.  if  (buffer  !=  buf)  {  readResults(buf,  0,  buf.length);  }  [CLASS]  Base64  [METHOD]  encode  [RETURN_TYPE]  byte[]  byte[]  pArray  [VARIABLES]  byte[]  CHUNK_SEPARATOR  DECODE_TABLE  STANDARD_ENCODE_TABLE  URL_SAFE_ENCODE_TABLE  arrayOctet  b  base64Data  binaryData  buf  buffer  data  encodeTable  groomedData  in  lineSeparator  out  pArray  packedData  result  smallerBuf  boolean  eof  isChunked  urlSafe  byte  PAD  b  byteToCheck  octet  int  CHUNK_SIZE  DEFAULT_BUFFER_RESIZE_FACTOR  DEFAULT_BUFFER_SIZE  MASK_6BITS  MASK_8BITS  b  bAvail  bPos  bytesCopied  currentLinePos  decodeSize  encodeSize  i  inAvail  inPos  len  lineLength  maxResultSize  modulus  outAvail  outPos  pos  readPos  result  x  long  len  	projects/Codec4/src/java/org/apache/commons/codec/binary/Base64.java	1.0	931	931	2	replace	System.arraycopy(pArray,  0,  pArray,  0,  pArray.length);  setInitialLineLength(pArray,  0,  pArray.length);	      System.arraycopy(pArray,    0,    pArray,    0,    pArray.length);    len    =    getEncodeLength(pArray,    0,    pArray.length);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
