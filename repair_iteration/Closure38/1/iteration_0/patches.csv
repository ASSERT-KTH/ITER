bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  add(Long.toString(value));  [CE]  cannot  find  symbol  value  [FE]    ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(Long.toString(value));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(Long.toString(value));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
2	[BUG]  [BUGGY]  add(Integer.toString(value));  [CE]  cannot  find  symbol  value  [FE]      ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(Integer.toString(value));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(Integer.toString(value));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
3	[BUG]  [BUGGY]  add(String.valueOf(x)+ "E "  +  Integer.toString(exp));  [CE]  cannot  find  symbol  exp  [FE]        ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x)+ "E "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.valueOf(x)+ "E "  +  Integer.toString(exp));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  exp	1	None	replace
4	[BUG]  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [CE]  cannot  find  symbol  mantissa  [FE]          ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(Long.toString(mantissa)+ "E "  +  Integer.toString(exp));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  mantissa	1	None	replace
5	[BUG]  [BUGGY]  addNumber(String.valueOf(x));  [CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  addNumber(String.valueOf(x));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	addNumber(String.valueOf(x));	add(String.valueOf(x));  	non-compiled	[CE]  method  addNumber  in  class  CodeConsumer  cannot  be  applied  to  given  types;	1	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x)+  1);  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	add	add(String.valueOf(x)+  1);	add(String.valueOf(x));  	compilable	  [FE]  AssertionFailedError  	1	4	replace
7	[BUG]  [BUGGY]  add(String.valueOf(x)+  1);  [FE]  AssertionFailedError  [FE]              ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x)+  1);  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.valueOf(x)+  1);	add(String.valueOf(x));  	compilable	  [FE]  AssertionFailedError  	1	4	replace
8	[BUG]  [BUGGY]  add(Long.toString(mantissa));  [CE]  cannot  find  symbol  mantissa  [FE]                ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(Long.toString(mantissa));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(Long.toString(mantissa));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  mantissa	1	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]    [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	add	  	add(String.valueOf(x));  	compilable	  [FE]  AssertionFailedError  	1	4	replace
10	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]    [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	  	add(String.valueOf(x));  	compilable	  [FE]  AssertionFailedError  	1	4	replace
11	[BUG]  [BUGGY]  add(String.valueOf(x)+  Integer.toString(value));  [CE]  cannot  find  symbol  op  [FE]    ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x)+  Integer.toString(value));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.valueOf(x)+  Integer.toString(value));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  op	1	None	replace
12	[BUG]  [BUGGY]  add(String.valueOf(x)+ "E "  +  Integer.toString(value));  [CE]  cannot  find  symbol  op  [FE]      ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x)+ "E "  +  Integer.toString(value));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.valueOf(x)+ "E "  +  Integer.toString(value));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  op	1	None	replace
13	[BUG]  [BUGGY]  add(String.valueOf(x  +  1));  [CE]  cannot  find  symbol  op  [FE]        ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x  +  1));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.valueOf(x  +  1));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  op	1	None	replace
14	[BUG]  [BUGGY]  add(String.valueOf(x)+  Integer.toString(exp));  [CE]  cannot  find  symbol  op  [FE]          ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.valueOf(x)+  Integer.toString(exp));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.valueOf(x)+  Integer.toString(exp));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  op	1	None	replace
15	[BUG]  [BUGGY]  add(String.toString(value));  [CE]  cannot  find  symbol  op  [FE]    ComparisonFailure  [CONTEXT]  mantissa  /=  10;  exp++;  }  }  if  (exp  >  2)  {  add(Long.toString(mantissa)  +   "E "  +  Integer.toString(exp));  }  else  {  add(Long.toString(value));  }  }  else  {  [BUGGY]  add(String.toString(value));  [BUGGY]  }  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	add(String.toString(value));	add(String.valueOf(x));  	non-compiled	[CE]  cannot  find  symbol  op	1	None	replace
