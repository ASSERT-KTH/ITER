bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
2	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev!=  '-')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
3	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  >>  '-')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev  >>  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
4	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
5	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  >=  0  &&  prev  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  >=  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  >=  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
6	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  If  (prev  <  0  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  If  (prev  <  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    If  (prev  <  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	18	None	add
7	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  [Delete]  '-')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  [Delete]  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev  [Delete]  '-')  {	  	non-compiled	[CE]  ')'  expected	18	None	add
8	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  [BUGGY]  '-')  {  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  [BUGGY]  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev  [BUGGY]  '-')  {	  	non-compiled	[CE]  ')'  expected	18	None	add
9	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  >=  '-'  &&  prev  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  >=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev  >=  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
10	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev!=  '-'  &&  prev  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev!=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev!=  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
11	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  >>  '-'  &&  prev  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  >>  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev  >>  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
12	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  ==  '-'  &&  prev  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  ==  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev  ==  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
13	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  If  (prev  >=  '-'  &&  prev  <=  '9')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  If  (prev  >=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    If  (prev  >=  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  ';'  expected	16	None	add
14	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  [Delete]  '-'  &&  prev  <=  '9')  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  [Delete]  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev  [Delete]  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  ')'  expected	16	None	add
15	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (Prev  >=  '-'  &&  prev  <=  '9')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (Prev  >=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (Prev  >=  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
16	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  [BUGGY]  '-'  &&  prev  <=  '9')  {  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  [BUGGY]  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev  [BUGGY]  '-'  &&  prev  <=  '9')  {	  	non-compiled	[CE]  ')'  expected	16	None	add
17	[BUG]  [BUGGY]  boolean  negativeZero  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  negativeZero  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  boolean  prev  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  prev  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  prev  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  double  prev  =  getFirstChar();  boolean  negativeZero  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getFirstChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getFirstChar();  boolean  negativeZero  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  negativeZero);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  negativeZero);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  negativeZero);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  negativeZero);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  false);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  false);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  false);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  binOp);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  binOp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x,  binOp);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(x);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
26	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev!=  '-')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  prev!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
27	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  If  (x  <=  0  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  If  (x  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    If  (x  <=  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	40	None	add
28	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  prev  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
29	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  >=  =  0  ||  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  >=  =  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  >=  =  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
30	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  >>  '-')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  prev  >>  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
31	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  Prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  Prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
32	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  ==  '.')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  ==  '.')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  prev  ==  '.')  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
33	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
34	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
35	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x).booleanValue();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x).booleanValue();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x).booleanValue();	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
36	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x));  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x));	  	non-compiled	[CE]  ';'  expected	2	None	add
37	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(y);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(y);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(y);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
38	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  int  binOp  =  isNegativeZero(x);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  int  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    int  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
39	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x,  getLastChar());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x,  getLastChar());  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x,  getLastChar());	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
40	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  Boolean  binOp  =  isNegativeZero(x);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  Boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    Boolean  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
41	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(exp);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(exp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(exp);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
42	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x));  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x));  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x));	  	non-compiled	[CE]  ';'  expected	2	None	add
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '-'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
44	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  '9')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '0'  &&  prev  ==  '-')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
46	[BUG]  [BUGGY]  if  (prev  ==  '0'  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '0'  &&  prev  ==  '-')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >=  '0'  &&  prev  ==  '-')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
48	[BUG]  [BUGGY]  if  (prev  >=  '0'  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '0'  &&  prev  ==  '-')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev!=  '0'  &&  prev  ==  '-')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
50	[BUG]  [BUGGY]  if  (prev!=  '0'  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev!=  '0'  &&  prev  ==  '-')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev!=  '-'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	8	replace
52	[BUG]  [BUGGY]  if  (prev!=  '-'  &&  prev  <=  '9')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev!=  '-'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	8	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '0'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '0'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
54	[BUG]  [BUGGY]  if  (prev  ==  '0'  &&  prev  <=  '9')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '0'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '0'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	15	5	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
56	[BUG]  [BUGGY]  if  (prev  >  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
58	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
59	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev!=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
60	[BUG]  [BUGGY]  if  (prev!=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev!=  '-'  &&  prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '-'  &&  prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
62	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  >  0  &&  prev  ==  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	37	5	replace
63	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
64	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev!=  '-')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
65	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  If  (x  >  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  If  (x  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    If  (x  >  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
66	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
67	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  Preconditions.isEmpty(prev))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  Preconditions.isEmpty(prev))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  Preconditions.isEmpty(prev))  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
68	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  Prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  Prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
69	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-')  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-')  {  add( "   ");  }  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  ==  '-')  {  add( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
70	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  >>  '-')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  >>  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
71	[BUG]  [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
72	[BUG]  [BUGGY]  if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
73	[BUG]  [BUGGY]  if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( "   ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
74	[BUG]  [BUGGY]  if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
75	[BUG]  [BUGGY]  if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
76	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev!=  '-')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  ComparisonFailure  	33	10	replace
77	[BUG]  [BUGGY]  if(prev!=  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  ComparisonFailure  	33	10	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '-'  ||  prev  ==  '+')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  AssertionFailedError  	33	6	replace
79	[BUG]  [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '+')  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  ||  prev  ==  '+')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  AssertionFailedError  	33	6	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-'  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev!=  '-'  ||  prev  ==  '+')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  AssertionFailedError  	33	10	replace
81	[BUG]  [BUGGY]  if(prev!=  '-'  ||  prev  ==  '+')  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-'  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-'  ||  prev  ==  '+')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  AssertionFailedError  	33	10	replace
82	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev!=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '-'  ||  prev!=  '+')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  ComparisonFailure  	33	10	replace
83	[BUG]  [BUGGY]  if(prev  ==  '-'  ||  prev!=  '+')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev!=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  ||  prev!=  '+')  {	  if    (prev    >=    '-')    {    	compilable	  [FE]  ComparisonFailure  	33	10	replace
84	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(prev);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(prev);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
85	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
86	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(exp);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(exp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(exp);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
87	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(min);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(min);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(min);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
88	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(null);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(null);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(null);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
89	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(binOp);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(binOp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(binOp);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
90	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(dev);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(dev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(dev);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
91	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(prim);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(prim);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(prim);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
92	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(label);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(label);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(label);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
93	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(remove);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(remove);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(remove);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
94	[BUG]  [BUGGY]  double  prev  =  getLastChar()  +  1;  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar()  +  1;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar()  +  1;	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
95	[BUG]  [BUGGY]  double  prev  =  getLastChar()  -  1;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar()  -  1;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar()  -  1;	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
96	[BUG]  [BUGGY]  double  prev  =  getLastChar().doubleValue();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar().doubleValue();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar().doubleValue();	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
97	[BUG]  [BUGGY]  double  prev  =  getFirstChar();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getFirstChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getFirstChar();	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
98	[BUG]  [BUGGY]  double  prev  =  getLastChar()  /  2;  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar()  /  2;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar()  /  2;	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
99	[BUG]  [BUGGY]  double  prev  =  getLastChar()  /  10;  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar()  /  10;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar()  /  10;	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
100	[BUG]  [BUGGY]  int  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  prev  =  getLastChar();	      double    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
102	[BUG]  [BUGGY]  if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
103	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  <  prev)  {  add( "   ");  }  [CE]  cannot  find  symbol  negativeZero  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  <  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  <  prev)  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  negativeZero	29	None	replace
104	[BUG]  [BUGGY]  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	8	replace
106	[BUG]  [BUGGY]  if  (prev  <=  0  ||  prev  ==  '-')  {  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	8	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
108	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev!=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
110	[BUG]  [BUGGY]  if  (prev!=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev!=  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
112	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  <=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <=  0  &&  x  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
114	[BUG]  [BUGGY]  if  (prev  <=  0  &&  x  ==  '-')  {  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <=  0  &&  x  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	39	6	replace
115	[BUG]  [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
116	[BUG]  [BUGGY]  if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
117	[BUG]  [BUGGY]  if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
118	[BUG]  [BUGGY]  if(prev  ==  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
119	[BUG]  [BUGGY]  if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
120	[BUG]  [BUGGY]  if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
121	[BUG]  [BUGGY]  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
122	[BUG]  [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ".);  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
123	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  <  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
124	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev!=  '-')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  <  0  ||  prev!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
125	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  >=  0  ||  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  >=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  >=  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
126	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  If  (x  <  0  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  If  (x  <  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    If  (x  <  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	20	None	add
127	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  <  0  ||  prev  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
128	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  >  0  ||  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  >  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  >  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
129	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  Prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  <  0  ||  Prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
130	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev  ==  '+')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (x  <  0  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (x  <  0  ||  prev  ==  '+')  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  >  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  <  '0'  ||  prev  >  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	10	replace
132	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  >  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  >  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  <  '0'  ||  prev  >  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	10	replace
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	6	replace
134	[BUG]  [BUGGY]  if(prev  ==  '0'  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	6	replace
135	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  >=  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	9	replace
136	[BUG]  [BUGGY]  if(prev  >=  '0'  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	9	replace
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev!=  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	10	replace
138	[BUG]  [BUGGY]  if(prev!=  '0'  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	10	replace
139	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  '0'  ||  prev  >  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(x  <  '0'  ||  prev  >  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	10	replace
140	[BUG]  [BUGGY]  if(x  <  '0'  ||  prev  >  '-')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  '0'  ||  prev  >  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  '0'  ||  prev  >  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	43	10	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '+'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '+'  ||  prev  ==  '-')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	35	6	replace
142	[BUG]  [BUGGY]  if(prev  ==  '+'  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '+'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '+'  ||  prev  ==  '-')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	35	6	replace
143	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '-'  ||  prev  ==  '-')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
144	[BUG]  [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '-')  {  [FE]  AssertionFailedError  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  ||  prev  ==  '-')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '.'  ||  prev  ==  '-')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
146	[BUG]  [BUGGY]  if(prev  ==  '.'  ||  prev  ==  '-')  {  [FE]  AssertionFailedError  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '.'  ||  prev  ==  '-')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  ':')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '-'  ||  prev  ==  ':')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
148	[BUG]  [BUGGY]  if(prev  ==  '-'  ||  prev  ==  ':')  {  [FE]  AssertionFailedError  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  ':')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  ||  prev  ==  ':')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '0')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  ==  '-'  ||  prev  ==  '0')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
150	[BUG]  [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '0')  {  [FE]  AssertionFailedError  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '0')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  ||  prev  ==  '0')  {	  if    (prev    ==    '-')    {    	compilable	  [FE]  AssertionFailedError  	35	6	replace
151	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeInteger(prev);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeInteger(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeInteger(prev);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeBinOp(x);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeBinOp(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeBinOp(x);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
153	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeBoolean(prev);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeBoolean(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeBoolean(prev);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
154	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(y);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(y);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(y);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
155	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeNull(prev);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeNull(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeNull(prev);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
156	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
157	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
158	[BUG]  [BUGGY]  if(!binOp)  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!binOp)  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!binOp)  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
159	[BUG]  [BUGGY]  double  prev  =  getFirstChar();  boolean  binOp  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getFirstChar();  boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getFirstChar();  boolean  binOp  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
160	[BUG]  [BUGGY]  char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
161	[BUG]  [BUGGY]  int  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
162	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  binOp);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  binOp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  binOp);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
163	[BUG]  [BUGGY]  int  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(prev);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(prev);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
164	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  negativeZero);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  negativeZero);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (value  <  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (value  <  0  ||  prev  ==  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
166	[BUG]  [BUGGY]  if  (value  <  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (value  <  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (value  <  0  ||  prev  ==  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
167	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  ||  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <  0  ||  prev  >=  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
168	[BUG]  [BUGGY]  if  (prev  <  0  ||  prev  >=  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  ||  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <  0  ||  prev  >=  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
169	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  ||  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <  0  ||  prev!=  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
170	[BUG]  [BUGGY]  if  (prev  <  0  ||  prev!=  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  ||  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <  0  ||  prev!=  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
171	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  ||  prev  <  '0'  ||  prev  ==  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >=  '-'  ||  prev  <  '0'  ||  prev  ==  '9')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
172	[BUG]  [BUGGY]  if  (prev  >=  '-'  ||  prev  <  '0'  ||  prev  ==  '9')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  ||  prev  <  '0'  ||  prev  ==  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  ||  prev  <  '0'  ||  prev  ==  '9')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	21	27	replace
173	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  <  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
174	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  >=  0  &&  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  >=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  >=  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
175	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  If  (prev  <  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  If  (prev  <  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    If  (prev  <  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	14	None	add
176	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev!=  '-')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  <  0  &&  prev!=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
177	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev  >=  '-')  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  <  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
178	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  Prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  <  0  &&  Prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
179	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (Prev  <  0  &&  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (Prev  <  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (Prev  <  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
180	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  >  0  &&  prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  >  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
181	[BUG]  [BUGGY]  int  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
182	[BUG]  [BUGGY]  long  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  long  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	long  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(prev);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '-'  &&  prev  <=  0  ||  prev  ==  '-')  {	  if    (prev    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	23	27	replace
184	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  <=  0  ||  prev  ==  '-')  {	  if    (prev    <=    0    &&    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	23	27	replace
185	[BUG]  [BUGGY]  String  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  String  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	String  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
186	[BUG]  [BUGGY]  Character  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Character  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Character  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
187	[BUG]  [BUGGY]  Boolean  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Boolean  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Boolean  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
188	[BUG]  [BUGGY]  Integer  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Integer  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Integer  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
189	[BUG]  [BUGGY]  Char  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Char  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Char  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
190	[BUG]  [BUGGY]  Number  prev  =  getLastChar();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Number  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Number  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  ||  prev  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '-'  ||  prev  <=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
192	[BUG]  [BUGGY]  if  (prev  ==  '-'  ||  prev  <=  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  ||  prev  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  ||  prev  <=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
193	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  ==  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  ==  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
194	[BUG]  [BUGGY]  if  (x  ==  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  ==  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  ==  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (value  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (value  <=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
196	[BUG]  [BUGGY]  if  (value  <=  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (value  <=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (value  <=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
197	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  >=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
198	[BUG]  [BUGGY]  if  (x  >=  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >=  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  >=  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
199	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  ==  prev  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  ==  prev  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
200	[BUG]  [BUGGY]  if  (x  ==  prev  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  ==  prev  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  ==  prev  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	compilable	  [FE]  ComparisonFailure  	41	27	replace
201	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
202	[BUG]  [BUGGY]  if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
203	[BUG]  [BUGGY]  if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  cannot  find  symbol  binOp  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  binOp	26	None	replace
204	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
205	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
206	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  <  prev)  {  add( "   ");  }  [CE]  cannot  find  symbol  negativeZero  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  <  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(x  <  prev)  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  negativeZero	28	None	replace
207	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ".);  }  [CE]  <identifier>  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ".);  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ".);  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
208	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
209	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(null);  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(null);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(null);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
210	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(min);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(min);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(min);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
211	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(exp);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(exp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(exp);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
212	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(binOp);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(binOp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(binOp);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
213	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  Boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  Boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    Boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
214	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prim);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prim);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prim);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
215	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  int  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  int  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    int  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
216	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(def);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(def);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(def);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
217	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
218	[BUG]  [BUGGY]  if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  cannot  find  symbol  binOp  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  cannot  find  symbol  binOp	30	None	replace
219	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
220	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (prev!=  '-')  {  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (prev!=  '-')  {	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	34	None	add
221	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (prev  >=  '-')  {  [CE]  variable  value  is  already  defined  in  method  addNumber(double)  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (prev  >=  '-')  {	  	non-compiled	[CE]  variable  value  is  already  defined  in  method  addNumber(double)	34	None	add
222	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (Prev  ==  '-')  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (Prev  ==  '-')  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
223	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  If  (prev  ==  '-')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  If  (prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    If  (prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	34	None	add
224	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (peek  ==  '-')  {  [CE]  unclosed  character  literal  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (peek  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (peek  ==  '-')  {	  	non-compiled	[CE]  unclosed  character  literal	34	None	add
225	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (prev  ==  '+')  {  [CE]  unclosed  character  literal  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (prev  ==  '+')  {	  	non-compiled	[CE]  unclosed  character  literal	34	None	add
226	[BUG]  [BUGGY]  double  x  =  getLastChar();  [CE]  unclosed  character  literal  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  x  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  x  =  getLastChar();	      int    x    =    getLastChar();    	non-compiled	[CE]  unclosed  character  literal	13	None	replace
227	[BUG]  [BUGGY]  char  x  =  getLastChar();  [CE]  unclosed  character  literal  [FE]                            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  x  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  x  =  getLastChar();	      int    x    =    getLastChar();    	non-compiled	[CE]  unclosed  character  literal	13	None	replace
228	[BUG]  [BUGGY]  int  x  =  getFirstChar();  [CE]  unclosed  character  literal  [FE]                              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  x  =  getFirstChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  x  =  getFirstChar();	      int    x    =    getLastChar();    	non-compiled	[CE]  unclosed  character  literal	13	None	replace
229	[BUG]  [BUGGY]  int  x  =  getLastChar()  +  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  x  =  getLastChar()  +  1;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  x  =  getLastChar()  +  1;	      int    x    =    getLastChar();    	non-compiled	[CE]  ';'  expected	13	None	replace
230	[BUG]  [BUGGY]  long  x  =  getLastChar();  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  long  x  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	long  x  =  getLastChar();	      int    x    =    getLastChar();    	non-compiled	[CE]  ';'  expected	13	None	replace
231	[BUG]  [BUGGY]  int  x  =  getLastChar()  -  1;  [CE]  ';'  expected  [FE]                                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  x  =  getLastChar()  -  1;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  x  =  getLastChar()  -  1;	      int    x    =    getLastChar();    	non-compiled	[CE]  ';'  expected	13	None	replace
232	[BUG]  [BUGGY]  int  x  =  getLastChar().length;  [CE]  ';'  expected  [FE]                                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  x  =  getLastChar().length;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  x  =  getLastChar().length;	      int    x    =    getLastChar();    	non-compiled	[CE]  ';'  expected	13	None	replace
233	[BUG]  [BUGGY]  int  x  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]                                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  x  =  getLastChar().doubleValue();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  x  =  getLastChar().doubleValue();	      int    x    =    getLastChar();    	non-compiled	[CE]  ';'  expected	13	None	replace
234	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(negativeZero);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
235	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
236	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(value);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(value);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(value);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
237	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(prev)||  isNegativeZero(x);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(prev)||  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(prev)||  isNegativeZero(x);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
238	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(null);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(null);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(null);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
239	[BUG]  [BUGGY]  if  (prev  ==  '0'  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '0'  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '0'  &&  prev  >=  '-')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
240	[BUG]  [BUGGY]  if  (prev  >=  '0'  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '0'  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '0'  &&  prev  >=  '-')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
241	[BUG]  [BUGGY]  if  (prev!=  '0'  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '0'  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev!=  '0'  &&  prev  >=  '-')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
242	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <=  0  &&  prev  >=  '-')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
243	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
244	[BUG]  [BUGGY]  if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isSemiColon)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
245	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
246	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ".);  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ".);  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ".);  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  	47	None	replace
247	[BUG]  [BUGGY]  if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!binOp)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
248	[BUG]  [BUGGY]  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
249	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
250	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
251	[BUG]  [BUGGY]  if(!binOp)  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!binOp)  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!binOp)  {  if(negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
252	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
253	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev  >=  '-')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev  >=  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
254	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev!=  '-')  {  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev!=  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
255	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev  ==  '-')  {  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev  ==  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
256	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev  >>  '-')  {  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev  >>  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
257	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev  [Delete]  '-')  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev  [Delete]  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev  [Delete]  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
258	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev  [BUGGY]  '-')  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev  [BUGGY]  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev  [BUGGY]  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
259	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  If  (prev  >=  '-')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  If  (prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    If  (prev  >=  '-')  {	  	non-compiled	[CE]  ')'  expected	32	None	add
260	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  ==  '-')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  <  0  &&  x  ==  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
261	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  >=  0  &&  x  ==  '-')  {  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  >=  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  >=  0  &&  x  ==  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
262	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  >=  '-')  {  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  <  0  &&  x  >=  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
263	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  If  (prev  <  0  &&  x  ==  '-')  {  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  If  (prev  <  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    If  (prev  <  0  &&  x  ==  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
264	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x!=  '-')  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  <  0  &&  x!=  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
265	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (Prev  <  0  &&  x  ==  '-')  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (Prev  <  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (Prev  <  0  &&  x  ==  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
266	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  >  0  &&  x  ==  '-')  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  >  0  &&  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  >  0  &&  x  ==  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
267	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  >>  '-')  {  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  <  0  &&  x  >>  '-')  {	  	non-compiled	[CE]  ')'  expected	24	None	add
268	[BUG]  [BUGGY]  if  (prev  >=  '-'  ||  prev  <=  '9')  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  ||  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  ||  prev  <=  '9')  {	  if    (prev    >=    '-'    &&    prev    <=    '9')    {    	non-compiled	[CE]  ')'  expected	17	None	replace
269	[BUG]  [BUGGY]  if  (prev  ==  '-'  ||  prev  <=  '9')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  ||  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  ||  prev  <=  '9')  {	  if    (prev    >=    '-'    &&    prev    <=    '9')    {    	non-compiled	[CE]  ';'  expected	17	None	replace
270	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
271	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev!=  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  prev!=  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
272	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  If  (x  <=  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  If  (x  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    If  (x  <=  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
273	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
274	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  >=  =  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  >=  =  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  >=  =  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
275	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Prev  ==  '-')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  Prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
276	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  >>  '-')  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  prev  >>  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
277	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  ==  '.')  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  ==  '.')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  prev  ==  '.')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
278	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
279	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  If  (prev  <=  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  If  (prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    If  (prev  <=  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
280	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  >=  =  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  >=  =  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  >=  =  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
281	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev!=  '-')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  prev!=  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
282	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
283	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (Prev  <=  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (Prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (Prev  <=  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
284	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  Prev  ==  '-')  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  Prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  Prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
285	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  >>  '-')  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  prev  >>  '-')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
286	[BUG]  [BUGGY]  boolean  binOp  =  isNegative(prev);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegative(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegative(prev);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
287	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeInteger(x);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeInteger(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeInteger(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
288	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeToken(x);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeToken(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeToken(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
289	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeNull(x);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeNull(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeNull(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
290	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeOrDigits(x);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeOrDigits(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeOrDigits(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
291	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  <  '0'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
292	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  >=  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  <  '0'  ||  prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
293	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  >=  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  >=  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  >=  '0'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
294	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev!=  '-')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  <  '0'  ||  prev!=  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
295	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  If(prev  <  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  If(prev  <  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    If(prev  <  '0'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
296	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(Prev  <  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(Prev  <  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(Prev  <  '0'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
297	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  >>  '-')  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  >>  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  <  '0'  ||  prev  >>  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
298	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  >  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  >  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  >  '0'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
299	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  [BUGGY]  '-')  {  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '0'  ||  prev  [BUGGY]  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  <  '0'  ||  prev  [BUGGY]  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
300	[BUG]  [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
301	[BUG]  [BUGGY]  if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
302	[BUG]  [BUGGY]  if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '.')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
303	[BUG]  [BUGGY]  if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
304	[BUG]  [BUGGY]  if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-')  {  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
305	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  x  <=  '9')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  x  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  x  <=  '9')  {	  if    (prev    <    0    &&    x    ==    '-')    {    	non-compiled	[CE]  ';'  expected	25	None	replace
306	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  false);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  false);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  false);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	5	None	replace
307	[BUG]  [BUGGY]  char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  negativeZero);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x,  negativeZero);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	5	None	replace
308	[BUG]  [BUGGY]  char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	7	None	replace
309	[BUG]  [BUGGY]  char  prev  =  getFirstChar();  boolean  negativeZero  =  isNegativeZero(x);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getFirstChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getFirstChar();  boolean  negativeZero  =  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	7	None	replace
310	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getFirstChar();  if(x  ==  prev)  {  add( "   ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getFirstChar();  if(x  ==  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getFirstChar();  if(x  ==  prev)  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	29	None	replace
311	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  x  <=  '0')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  x  <=  '0')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  x  <=  '0')  {	  if    (prev    <    0    &&    x    ==    '-')    {    	non-compiled	[CE]  ';'  expected	25	None	replace
312	[BUG]  [BUGGY]  if  (prev  >=  '0'  &&  prev  <=  '9')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '0'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '0'  &&  prev  <=  '9')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
313	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  >=  '+')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  >=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  >=  '+')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
314	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '+')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  &&  prev  <=  '+')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
315	[BUG]  [BUGGY]  if  (prev!=  '-'  ||  prev  <=  '9')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev!=  '-'  ||  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev!=  '-'  ||  prev  <=  '9')  {	  if    (prev    >=    '-'    &&    prev    <=    '9')    {    	non-compiled	[CE]  ';'  expected	17	None	replace
316	[BUG]  [BUGGY]  boolean  prev  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  prev  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  prev  =  isNegativeZero(prev);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	6	None	replace
317	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(negativeZero);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	6	None	replace
318	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(binOp);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(binOp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(binOp);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	6	None	replace
319	[BUG]  [BUGGY]  char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(binOp);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(binOp);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(binOp);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	6	None	replace
320	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  0)  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  <=  0)  {	  if    (prev    <=    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	23	None	replace
321	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (X  <  0  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (X  <  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (X  <  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	20	None	add
322	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
323	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  ':')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  ':')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  ':')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
324	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (exp  >  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (exp  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (exp  >  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
325	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  '+')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (x  >  0  &&  prev  ==  '-'  ||  prev  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
326	[BUG]  [BUGGY]  if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
327	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
328	[BUG]  [BUGGY]  if(negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
329	[BUG]  [BUGGY]  if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
330	[BUG]  [BUGGY]  if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
331	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(negativeZero);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
332	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  negativeZero;  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  negativeZero;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)||  negativeZero;	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
333	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(prev)&&  isNegativeZero(x);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(prev)&&  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(prev)&&  isNegativeZero(x);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
334	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(negativeZero);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
335	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeColon(x)||  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeColon(x)||  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeColon(x)||  isNegativeZero(negativeZero);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
336	[BUG]  [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-'  &&  prev  <=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-'  &&  prev  <=  '+')  {	  if    (prev    <    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	15	None	replace
337	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(minor);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(minor);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(minor);	  	non-compiled	[CE]  ';'  expected	11	None	add
338	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(negativeZero);	  	non-compiled	[CE]  ';'  expected	11	None	add
339	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(y)||  isNegativeZero(prev);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(y)||  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(y)||  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	11	None	add
340	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(primv);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(primv);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(primv);	  	non-compiled	[CE]  ';'  expected	11	None	add
341	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(last);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(last);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(last);	  	non-compiled	[CE]  ';'  expected	11	None	add
342	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
343	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "0 ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "0 ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( "0 ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
344	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ".);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ".);  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ".);  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  	27	None	replace
345	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  ==  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0  ||  prev  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	40	None	add
346	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0.0  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0.0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0.0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	40	None	add
347	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  ==  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  if  (prev  <  0  &&  x  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    x    ==    '-')    {    if  (prev  <  0  &&  x  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	24	None	add
348	[BUG]  [BUGGY]  Integer  x  =  getLastChar();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Integer  x  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Integer  x  =  getLastChar();	      int    x    =    getLastChar();    	non-compiled	[CE]  ';'  expected	13	None	replace
349	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  >=  '-'  &&  Prev  <=  '9')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  if  (prev  >=  '-'  &&  Prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-'    &&    prev    <=    '9')    {    if  (prev  >=  '-'  &&  Prev  <=  '9')  {	  	non-compiled	[CE]  ';'  expected	16	None	add
350	[BUG]  [BUGGY]  boolean  binOp  =  needSemiColon  &&  isNegativeZero(x);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  needSemiColon  &&  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  needSemiColon  &&  isNegativeZero(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
351	[BUG]  [BUGGY]  boolean  binOp  =  needsSemiColon  &&  isNegativeZero(x);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  needsSemiColon  &&  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  needsSemiColon  &&  isNegativeZero(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
352	[BUG]  [BUGGY]  boolean  binOp  =  isColon(x);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isColon(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isColon(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
353	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)&&  isSemiColon(prev);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)&&  isSemiColon(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)&&  isSemiColon(prev);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
354	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeOrEqualZero(x);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeOrEqualZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeOrEqualZero(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
355	[BUG]  [BUGGY]  boolean  binOp  =  hasNegativeZero(x);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  hasNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  hasNegativeZero(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
356	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (Prev  >=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (Prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (Prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	32	None	add
357	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  if  (prev  >=  '+')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-')  {  if  (prev  >=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    >=    '-')    {    if  (prev  >=  '+')  {	  	non-compiled	[CE]  ';'  expected	32	None	add
358	[BUG]  [BUGGY]  double  prev  =  getPreviousChar();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getPreviousChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getPreviousChar();	      double    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	1	None	replace
359	[BUG]  [BUGGY]  double  prev  =  getLastChar()  &  0xff;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar()  &  0xff;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar()  &  0xff;	      double    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	1	None	replace
360	[BUG]  [BUGGY]  if  ((  prev  >=  '-')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  ((  prev  >=  '-')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  ((  prev  >=  '-')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
361	[BUG]  [BUGGY]  if  ((  prev  >=  '-')&&(prev!=  '')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  ((  prev  >=  '-')&&(prev!=  '')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  ((  prev  >=  '-')&&(prev!=  '')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
362	[BUG]  [BUGGY]  if  ((  prev  >=  '-')&&(prev!=  '+')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  ((  prev  >=  '-')&&(prev!=  '+')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  ((  prev  >=  '-')&&(prev!=  '+')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
363	[BUG]  [BUGGY]  if  ((  prev  >=  '-')&&(prev  ==  '+')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  ((  prev  >=  '-')&&(prev  ==  '+')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  ((  prev  >=  '-')&&(prev  ==  '+')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
364	[BUG]  [BUGGY]  if  ((  prev  >=  '-')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  ((  prev  >=  '-')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  ((  prev  >=  '-')&&(prev  ==  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&&(prev!=  '')&	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
365	[BUG]  [BUGGY]  if  (prev  <  0  ||  prev  >  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  ||  prev  >  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <  0  ||  prev  >  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	21	None	replace
366	[BUG]  [BUGGY]  if  (prev  >=  '-'  ||  prev  ==  '+')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >=  '-'  ||  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  ||  prev  ==  '+')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	21	None	replace
367	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '1'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  if(prev  <  '1'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev    <    '0'    ||    prev    ==    '-')    {    if(prev  <  '1'  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	42	None	add
368	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (prev  ==  '0')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (prev  ==  '0')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (prev  ==  '0')  {	  	non-compiled	[CE]  ';'  expected	34	None	add
369	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (value  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (value  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (value  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	34	None	add
370	[BUG]  [BUGGY]  if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
371	[BUG]  [BUGGY]  if(negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
372	[BUG]  [BUGGY]  if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
373	[BUG]  [BUGGY]  if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
374	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Preconditions.isTrue(prev  ==  '-'))  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Preconditions.isTrue(prev  ==  '-'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  Preconditions.isTrue(prev  ==  '-'))  {	  	non-compiled	[CE]  ';'  expected	38	None	add
375	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Preconditions.abs(prev)  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Preconditions.abs(prev)  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  Preconditions.abs(prev)  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
376	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Preconditions.isTrue(prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  Preconditions.isTrue(prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  Preconditions.isTrue(prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
377	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
378	[BUG]  [BUGGY]  if(value  ==  0.0)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(value  ==  0.0)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(value  ==  0.0)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
379	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev  ==  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  if  (prev  <  0  &&  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    ==    '-')    {    if  (prev  <  0  &&  prev  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	14	None	add
380	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(negativeZero);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	10	None	replace
381	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(value);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(value);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(value);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	10	None	replace
382	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(minorZero);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(minorZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(minorZero);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	10	None	replace
383	[BUG]  [BUGGY]  if(prev  ==  '0'  &&  prev  <=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '0'  &&  prev  <=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '0'  &&  prev  <=  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
384	[BUG]  [BUGGY]  if(prev  >=  '0'  &&  prev  <=  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  '0'  &&  prev  <=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  '0'  &&  prev  <=  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
385	[BUG]  [BUGGY]  if(prev!=  '0'  &&  prev  <=  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '0'  &&  prev  <=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '0'  &&  prev  <=  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
386	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getFirstChar();  if(x  ==  prev)  {  add( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getFirstChar();  if(x  ==  prev)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getFirstChar();  if(x  ==  prev)  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
387	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  >  prev)  {  add( "   ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  >  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(x  >  prev)  {  add( "   ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
388	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  >=  prev)  {  add( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getLastChar();  if(x  >=  prev)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getLastChar();  if(x  >=  prev)  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
389	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binaryOp  =  isNegativeZero(x);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binaryOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binaryOp  =  isNegativeZero(x);	  	non-compiled	[CE]  ';'  expected	2	None	add
390	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x.charAt(0));  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x.charAt(0));  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x.charAt(0));	  	non-compiled	[CE]  ';'  expected	2	None	add
391	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  Integer  binOp  =  isNegativeZero(x);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  Integer  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    Integer  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  ';'  expected	2	None	add
392	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  double  binOp  =  isNegativeZero(x);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  double  binOp  =  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    double  binOp  =  isNegativeZero(x);	  	non-compiled	[CE]  ';'  expected	2	None	add
393	[BUG]  [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '%')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  ||  prev  ==  '%')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  ||  prev  ==  '%')  {	  if    (prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	35	None	replace
394	[BUG]  [BUGGY]  if(prev  ==  '-'  &&  prev!=  '+')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-'  &&  prev!=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-'  &&  prev!=  '+')  {	  if    (prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	35	None	replace
395	[BUG]  [BUGGY]  if  (prev  >  0  &&  prev!=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >  0  &&  prev!=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >  0  &&  prev!=  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	37	None	replace
396	[BUG]  [BUGGY]  if  (prev  >  0  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >  0  &&  prev  >=  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	37	None	replace
397	[BUG]  [BUGGY]  if  (prev  >  0  &&  prev  <=  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  >  0  &&  prev  <=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >  0  &&  prev  <=  '-')  {	  if    (x    >    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	37	None	replace
398	[BUG]  [BUGGY]  if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
399	[BUG]  [BUGGY]  if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
400	[BUG]  [BUGGY]  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ".);  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
401	[BUG]  [BUGGY]  if  (x  >=  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >=  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  >=  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	39	None	replace
402	[BUG]  [BUGGY]  if  (x  ==  '0'  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  ==  '0'  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  ==  '0'  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	39	None	replace
403	[BUG]  [BUGGY]  if  (x  ==  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  ==  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  ==  0  &&  prev  ==  '-')  {	  if    (x    <=    0    &&    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	39	None	replace
404	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
405	[BUG]  [BUGGY]  if(value  ==  0.0)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(value  ==  0.0)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(value  ==  0.0)  {  if(!negativeZero)  {  prev  =  getLastChar();  if(prev  ==  '.')  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
406	[BUG]  [BUGGY]  char  prev  =  getLastChar().doubleValue();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar().doubleValue();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar().doubleValue();	      char    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	4	None	replace
407	[BUG]  [BUGGY]  char  prev  =  getFirstChar();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getFirstChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getFirstChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	4	None	replace
408	[BUG]  [BUGGY]  char  prev  =  getLastChar().toCharArray();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  char  prev  =  getLastChar().toCharArray();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	char  prev  =  getLastChar().toCharArray();	      char    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	4	None	replace
409	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  ==  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  prev  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	22	None	add
410	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  ==   "-')  {  [CE]  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  if  (prev  <=  0  &&  prev  ==   "-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <=    0    &&    prev    ==    '-')    {    if  (prev  <=  0  &&  prev  ==   "-')  {	  	non-compiled	[CE]  	22	None	add
411	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(minor);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(minor);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(minor);	  	non-compiled	[CE]  ';'  expected	9	None	add
412	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(primv);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(primv);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(primv);	  	non-compiled	[CE]  ';'  expected	9	None	add
413	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  int  binOp  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  int  binOp  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    int  binOp  =  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	9	None	add
414	[BUG]  [BUGGY]  if(negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( ", ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(negativeZero)  {  double  prev  =  getFirstChar();  if(prev  ==  '-')  {  add( ", ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	31	None	replace
415	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  >=  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  prev  >=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  prev  >=  '+')  {	  	non-compiled	[CE]  ';'  expected	18	None	add
416	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (Prev  <  0  &&  prev  >=  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (Prev  <  0  &&  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (Prev  <  0  &&  prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	18	None	add
417	[BUG]  [BUGGY]  double  prev  =  getLastChar()  &  0xFFFF;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar()  &  0xFFFF;  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar()  &  0xFFFF;	      double    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	1	None	replace
418	[BUG]  [BUGGY]  if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
419	[BUG]  [BUGGY]  if(prev  >=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
420	[BUG]  [BUGGY]  if(x  >=  '-'  &&  prev  <=  '9')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  >=  '-'  &&  prev  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  >=  '-'  &&  prev  <=  '9')  {	  if    (prev    >=    '-'    &&    prev    <=    '9')    {    	non-compiled	[CE]  ';'  expected	17	None	replace
421	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeInteger(x)||  isNegativeInteger(prev);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeInteger(x)||  isNegativeInteger(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeInteger(x)||  isNegativeInteger(prev);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
422	[BUG]  [BUGGY]  boolean  binOp  =  isNegative(x)&&  isNegativeZero(prev);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegative(x)&&  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegative(x)&&  isNegativeZero(prev);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
423	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeInteger(x)&&  isNegativeInteger(prev);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeInteger(x)&&  isNegativeInteger(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeInteger(x)&&  isNegativeInteger(prev);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
424	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeInteger(x)&&  isNegativeZero(prev);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeInteger(x)&&  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeInteger(x)&&  isNegativeZero(prev);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
425	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(prev);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(prev);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
426	[BUG]  [BUGGY]  boolean  binOp  =  isNegative(x)||  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegative(x)||  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegative(x)||  isNegativeZero(negativeZero);	      boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	12	None	replace
427	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(negativeZero(x));  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(negativeZero(x));  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(negativeZero(x));	  	non-compiled	[CE]  ';'  expected	9	None	add
428	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(negativeZero);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(negativeZero);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(negativeZero);	  	non-compiled	[CE]  ';'  expected	9	None	add
429	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  Boolean  binOp  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  Boolean  binOp  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    Boolean  binOp  =  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	9	None	add
430	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  prev  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  prev  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  prev  =  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	9	None	add
431	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binaryOp  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(prev);  boolean  binaryOp  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(prev);    boolean  binaryOp  =  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	9	None	add
432	[BUG]  [BUGGY]  if  (x  >  0  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  >  0  ||  prev  ==  '-')  {	  if    (x    <=    0    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	41	None	replace
433	[BUG]  [BUGGY]  double  prev  =  getFirstChar();  boolean  binOp  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getFirstChar();  boolean  binOp  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getFirstChar();  boolean  binOp  =  isNegativeZero(prev);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	6	None	replace
434	[BUG]  [BUGGY]  int  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  int  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	int  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);	      double    prev    =    getLastChar();    boolean    negativeZero    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	7	None	replace
435	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	11	None	add
436	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binaryOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binaryOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binaryOp  =  isNegativeZero(x)||  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	11	None	add
437	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  prev  =  isNegativeZero(x)||  isNegativeZero(prev);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  prev  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  prev  =  isNegativeZero(x)||  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	11	None	add
438	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(prev);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x)||    isNegativeZero(prev);    boolean  binOp  =  isNegativeZero(x)||  hasNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	11	None	add
439	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  >  prev)  {  add( "   ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  >  prev)  {  add( "   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  >  prev)  {  add( "   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	29	None	replace
440	[BUG]  [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  >=  prev)  {  add( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  >=  prev)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  >=  prev)  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	29	None	replace
441	[BUG]  [BUGGY]  if(x  >=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  >=  '-')  {	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
442	[BUG]  [BUGGY]  if(prev!=  '-'  ||  prev  ==  ':')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-'  ||  prev  ==  ':')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-'  ||  prev  ==  ':')  {	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
443	[BUG]  [BUGGY]  if(x  >=  '-'  ||  prev  >=  '+')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  >=  '-'  ||  prev  >=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  >=  '-'  ||  prev  >=  '+')  {	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
444	[BUG]  [BUGGY]  if(prev!=  '-'  ||  prev  >=  '+')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-'  ||  prev  >=  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-'  ||  prev  >=  '+')  {	  if    (prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	33	None	replace
445	[BUG]  [BUGGY]  if(x  <  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
446	[BUG]  [BUGGY]  if(x  <  '0'  ||  prev  >  '9')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  '0'  ||  prev  >  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  '0'  ||  prev  >  '9')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
447	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  >  '9')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  '0'  ||  prev  >  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  <  '0'  ||  prev  >  '9')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
448	[BUG]  [BUGGY]  if(x  <=  '0'  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <=  '0'  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <=  '0'  ||  prev  ==  '-')  {	  if(prev    <    '0'    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	43	None	replace
449	[BUG]  [BUGGY]  if(x  <  0  ||  x  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  x  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  x  ==  '-')  {	  if    (prev    <    0    &&    x    ==    '-')    {    	non-compiled	[CE]  ';'  expected	25	None	replace
450	[BUG]  [BUGGY]  if(prev!=  '-'  &&  x  <=  '9')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev!=  '-'  &&  x  <=  '9')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev!=  '-'  &&  x  <=  '9')  {	  if    (prev    <    0    &&    x    ==    '-')    {    	non-compiled	[CE]  ';'  expected	25	None	replace
451	[BUG]  [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
452	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
453	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ",   ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   ",   ");    }    	non-compiled	[CE]  ';'  expected	30	None	replace
454	[BUG]  [BUGGY]  if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  'n'  ||  prev  ==  't')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  'n'  ||  prev  ==  't')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  'n'  ||  prev  ==  't')  {	  if    (prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	35	None	replace
455	[BUG]  [BUGGY]  if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  'n'  ||  prev  ==  'n'  ||  prev  ==  't')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  'n'  ||  prev  ==  'n'  ||  prev  ==  't')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  'n'  ||  prev  ==  'n'  ||  prev  ==  't')  {	  if    (prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	35	None	replace
456	[BUG]  [BUGGY]  if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  't')  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  't')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  'n'  ||  prev  ==  'r'  ||  prev  ==  't')  {	  if    (prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	35	None	replace
457	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (X  >  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (X  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (X  >  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
458	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (y  >  0  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  if  (y  >  0  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    >    0    &&    prev    ==    '-')    {    if  (y  >  0  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	36	None	add
459	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  1  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  1  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  1  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	40	None	add
460	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0,  prev  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  if  (x  <=  0,  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    ||    prev    ==    '-')    {    if  (x  <=  0,  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	40	None	add
461	[BUG]  [BUGGY]  if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
462	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
463	[BUG]  [BUGGY]  if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
464	[BUG]  [BUGGY]  if(prev  ==  '.')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '.')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
465	[BUG]  [BUGGY]  if(prev  >=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  null)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
466	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	45	None	replace
467	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeOrEmpty(x);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeOrEmpty(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeOrEmpty(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
468	[BUG]  [BUGGY]  boolean  binOp  =  isNegative();  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegative();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegative();	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
469	[BUG]  [BUGGY]  boolean  binOp  =  isBinary(x);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isBinary(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isBinary(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
470	[BUG]  [BUGGY]  boolean  binOp  =  isNegative(x);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegative(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegative(x);	      boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	3	None	replace
471	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  ==  '+')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0  &&  prev  ==  '+')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0  &&  prev  ==  '+')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
472	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0,  &&  prev  ==  '-')  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  if  (x  <=  0,  &&  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <=    0    &&    prev    ==    '-')    {    if  (x  <=  0,  &&  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	38	None	add
473	[BUG]  [BUGGY]  if(prev  <  0  ||  x  >  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  <  0  ||  x  >  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  <  0  ||  x  >  '-')  {	  if    (x    <    0    ||    prev    ==    '-')    {    	non-compiled	[CE]  ';'  expected	21	None	replace
474	[BUG]  [BUGGY]  Double  prev  =  getLastChar();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  Double  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	Double  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	4	None	replace
475	[BUG]  [BUGGY]  long  prev  =  getLastChar();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  long  prev  =  getLastChar();  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	long  prev  =  getLastChar();	      char    prev    =    getLastChar();    	non-compiled	[CE]  ';'  expected	4	None	replace
476	[BUG]  [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
477	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	26	None	replace
478	[BUG]  [BUGGY]  if(x  <  0  ||  prev  >=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  prev  >=  '-')  {	  if    (prev    <    0    &&    prev    >=    '-')    {    	non-compiled	[CE]  ';'  expected	19	None	replace
479	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeOrDigits(prev);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeOrDigits(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeOrDigits(prev);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	10	None	replace
480	[BUG]  [BUGGY]  boolean  binOp  =  isNegativeOrEmpty(prev);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  boolean  binOp  =  isNegativeOrEmpty(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	boolean  binOp  =  isNegativeOrEmpty(prev);	      boolean    binOp    =    isNegativeZero(prev);    	non-compiled	[CE]  ';'  expected	10	None	replace
481	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
482	[BUG]  [BUGGY]  if(prev  ==  null)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  null)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  null)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(x    ==    prev)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	28	None	replace
483	[BUG]  [BUGGY]  if(x  <  0  ||  prev  ==  '.')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  prev  ==  '.')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  prev  ==  '.')  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }	      if(negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '-')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	27	None	replace
484	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
485	[BUG]  [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(!isNegativeZero(x))  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
486	[BUG]  [BUGGY]  if(x  <  0  ||  prev  ==  '.')  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  prev  ==  '.')  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  prev  ==  '.')  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
487	[BUG]  [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(x  <  0  ||  prev  ==  '-')  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }	      if(!negativeZero)    {    double    prev    =    getLastChar();    if(prev    ==    '.')    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	47	None	replace
488	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(x);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(x);	  	non-compiled	[CE]  ';'  expected	2	None	add
489	[BUG]  [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]      boolean  binOp  =  isNegativeZero(x);  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	        boolean    binOp    =    isNegativeZero(x);    boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(prev);	  	non-compiled	[CE]  ';'  expected	2	None	add
490	[BUG]  [BUGGY]  if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(isNegativeZero(x))  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
491	[BUG]  [BUGGY]  if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  >=  '-')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
492	[BUG]  [BUGGY]  if(prev  ==  '.')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if(prev  ==  '.')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  ==  '.')  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }	      if(!negativeZero)    {    for(int    x    =    0;    x    <    prev;    ++x)    {    add(   "   ");    }    	non-compiled	[CE]  ';'  expected	44	None	replace
493	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  Prev  >=  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  if  (prev  <  0  &&  Prev  >=  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    <    0    &&    prev    >=    '-')    {    if  (prev  <  0  &&  Prev  >=  '-')  {	  	non-compiled	[CE]  ';'  expected	18	None	add
494	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '-'))  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '-'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  '-'))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
495	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '+'))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '+'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  '+'))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
496	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  ':'))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  ':'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  ':'))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
497	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '.'))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '.'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  '.'))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
498	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  ')')  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  ')')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  ')')  {	  	non-compiled	[CE]  ';'  expected	34	None	add
499	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '%'))  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '%'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  '%'))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
500	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '/'))  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  '/'))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  '/'))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
501	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  ','))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (prev  ==  '-')  {  if  (!(prev  ==  '-'  ||  prev  ==  ','))  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (prev    ==    '-')    {    if  (!(prev  ==  '-'  ||  prev  ==  ','))  {	  	non-compiled	[CE]  ';'  expected	34	None	add
502	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (exp  <  0  ||  prev  ==  '-')  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  if  (exp  <  0  ||  prev  ==  '-')  {  [BUGGY]    add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if    (x    <    0    ||    prev    ==    '-')    {    if  (exp  <  0  ||  prev  ==  '-')  {	  	non-compiled	[CE]  ';'  expected	20	None	add
503	[BUG]  [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(x);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);    [BUGGY]  double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(x);  [BUGGY]    if  (x  <  0  &&  prev  ==  '-')  {  add(   "     ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x)&&  isNegativeZero(x);	      double    prev    =    getLastChar();    boolean    binOp    =    isNegativeZero(x);    	non-compiled	[CE]  ';'  expected	5	None	replace
