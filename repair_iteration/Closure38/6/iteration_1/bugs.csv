bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    double  prev  =  getLastChar();  [CE]  variable  prev  is  already  defined  in  method  addNumber(double)  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    double  prev  =  getLastChar();  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    double  prev  =  getLastChar();		non-compiled	[CE]  variable  prev  is  already  defined  in  method  addNumber(double)	12	None	add
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    boolean  binOp  =  isNegativeZero(x);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	    boolean  binOp  =  isNegativeZero(x);		compilable	  [FE]  ComparisonFailure  	12	1	add
3	[BUG]  [BUGGY]    boolean  binOp  =  isNegativeZero(x);  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    boolean  binOp  =  isNegativeZero(x);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    boolean  binOp  =  isNegativeZero(x);		compilable	  [FE]  ComparisonFailure  	12	1	add
4	[BUG]  [BUGGY]    char  prev  =  getLastChar();  [CE]  variable  prev  is  already  defined  in  method  addNumber(double)  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    char  prev  =  getLastChar();  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    char  prev  =  getLastChar();		non-compiled	[CE]  variable  prev  is  already  defined  in  method  addNumber(double)	12	None	add
5	[BUG]  [BUGGY]    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [CE]  variable  prev  is  already  defined  in  method  addNumber(double)  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(x);		non-compiled	[CE]  variable  prev  is  already  defined  in  method  addNumber(double)	12	None	add
6	[BUG]  [BUGGY]    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(prev);  [CE]  variable  prev  is  already  defined  in  method  addNumber(double)  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(prev);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    double  prev  =  getLastChar();  boolean  binOp  =  isNegativeZero(prev);		non-compiled	[CE]  variable  prev  is  already  defined  in  method  addNumber(double)	12	None	add
7	[BUG]  [BUGGY]    double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);  [CE]  variable  prev  is  already  defined  in  method  addNumber(double)  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(prev);		non-compiled	[CE]  variable  prev  is  already  defined  in  method  addNumber(double)	12	None	add
8	[BUG]  [BUGGY]    double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [CE]  variable  prev  is  already  defined  in  method  addNumber(double)  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    double  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);		non-compiled	[CE]  variable  prev  is  already  defined  in  method  addNumber(double)	12	None	add
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    boolean  binOp  =  isNegativeZero(prev);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	    boolean  binOp  =  isNegativeZero(prev);		compilable	  [FE]  ComparisonFailure  	12	1	add
10	[BUG]  [BUGGY]    boolean  binOp  =  isNegativeZero(prev);  [FE]  ComparisonFailure  [FE]                  ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    boolean  binOp  =  isNegativeZero(prev);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    boolean  binOp  =  isNegativeZero(prev);		compilable	  [FE]  ComparisonFailure  	12	1	add
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);		compilable	  [FE]  ComparisonFailure  	12	1	add
12	[BUG]  [BUGGY]    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [FE]  ComparisonFailure  [FE]                    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    boolean  binOp  =  isNegativeZero(x)||  isNegativeZero(prev);		compilable	  [FE]  ComparisonFailure  	12	1	add
13	[BUG]  [BUGGY]    int  x  =  getLastChar();  [CE]  variable  x  is  already  defined  in  method  addNumber(double)  [FE]                      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    int  x  =  getLastChar();  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    int  x  =  getLastChar();		non-compiled	[CE]  variable  x  is  already  defined  in  method  addNumber(double)	12	None	add
14	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
15	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
16	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >=  '-'  &&  prev  <=  '9')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	1	replace
17	[BUG]  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  >=  '-'  &&  prev  <=  '9')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-'  &&  prev  <=  '9')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	1	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <  0  &&  prev  >=  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
19	[BUG]  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <  0  &&  prev  >=  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <  0  &&  prev  >=  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  <  0  ||  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
21	[BUG]  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <  0  ||  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  <  0  ||  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <=  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
23	[BUG]  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <=  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <=  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
24	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  <  0  &&  x  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
25	[BUG]  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  <  0  &&  x  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  <  0  &&  x  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	2	replace
26	[BUG]  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
27	[BUG]  [BUGGY]    if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
28	[BUG]  [BUGGY]    if(negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
29	[BUG]  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  double  prev  =  getLastChar();  if(x  ==  prev)  {  add( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
30	[BUG]  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
31	[BUG]  [BUGGY]    if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '-')  {  add( ", ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
32	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  >=  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  >=  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	8	replace
33	[BUG]  [BUGGY]  if  (prev  >=  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  >=  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  >=  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	8	replace
34	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	5	replace
35	[BUG]  [BUGGY]  if  (prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	5	replace
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  >  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	5	replace
37	[BUG]  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  >  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  >  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	5	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  <=  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	5	replace
39	[BUG]  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <=  0  &&  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  <=  0  &&  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	5	replace
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if  (x  <=  0  ||  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	10	replace
41	[BUG]  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if  (x  <=  0  ||  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if  (x  <=  0  ||  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	10	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	if(prev  <  '0'  ||  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	8	replace
43	[BUG]  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]  if(prev  <  '0'  ||  prev  ==  '-')  {  [BUGGY]  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	if(prev  <  '0'  ||  prev  ==  '-')  {	if  (x  <  0  &&  prev  ==  '-')  {  	compilable	  [FE]  ComparisonFailure  	11	8	replace
44	[BUG]  [BUGGY]    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
45	[BUG]  [BUGGY]    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
46	[BUG]  [BUGGY]    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  for(int  x  =  0;  x  <  prev;  ++x)  {  add( ", ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
47	[BUG]  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure  [CONTEXT]  void  addNumber(double  x)  {    char  prev  =  getLastChar();  boolean  negativeZero  =  isNegativeZero(x);  [BUGGY]    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }  [BUGGY]  if  (x  <  0  &&  prev  ==  '-')  {  add( "   ");  }  if  ((long)  x  ==  x  &&  !negativeZero)  {  long  value  =  (long)  x;  long  mantissa  =  value;  int  exp  =  0;  if  (Math.abs(x)  >=  100)  {  while  (mantissa  /  10  *  Math.pow(10,  exp  +  1)  ==  value)  {  mantissa  /=  10;  [CLASS]  CodeConsumer  [METHOD]  addNumber  [RETURN_TYPE]  void  double  x  [VARIABLES]  char  prev  boolean  binOp  needSemiColon  negativeZero  sawFunction  shouldEndLine  statementContext  statementNeedsEnded  statementStarted  double  x  long  mantissa  value  int  exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	    if(!negativeZero)  {  double  prev  =  getLastChar();  if(prev  ==  '.')  {  add( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
