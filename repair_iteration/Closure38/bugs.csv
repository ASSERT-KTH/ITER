bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] add(String.valueOf(x)); [FE] ComparisonFailure [CONTEXT] mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { [BUGGY] add(String.valueOf(x)); [BUGGY] } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] mantissa /= 10; exp++; } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { [BUGGY] [BUGGY] add(String.valueOf(x)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.5	265	265	1	add	
3	[BUG] [BUGGY] append(op); [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { [BUGGY] append(op); [BUGGY] } [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	207	207	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { [BUGGY] [BUGGY] append(op); } [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	207	207	1	add	
5	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { append(op); [BUGGY] } [BUGGY]  [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	208	208	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void appendOp(String op, boolean binOp) { append(op); [BUGGY] [BUGGY] } [CLASS] CodeConsumer [METHOD] appendOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	208	208	1	add	
7	[BUG] [BUGGY] char prev = getLastChar(); [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   [BUGGY] char prev = getLastChar(); [BUGGY] boolean negativeZero = isNegativeZero(x); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	243	243	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   [BUGGY] [BUGGY] char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	243	243	1	add	
9	[BUG] [BUGGY] boolean negativeZero = isNegativeZero(x); [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); [BUGGY] boolean negativeZero = isNegativeZero(x); [BUGGY] if (x < 0 && prev == '-') { add(" "); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	244	244	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); [BUGGY] [BUGGY] boolean negativeZero = isNegativeZero(x); if (x < 0 && prev == '-') { add(" "); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	244	244	1	add	
11	[BUG] [BUGGY] if (x < 0 && prev == '-') { [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); [BUGGY] if (x < 0 && prev == '-') { [BUGGY] add(" "); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); [BUGGY] [BUGGY] if (x < 0 && prev == '-') { add(" "); } if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	245	245	1	add	
13	[BUG] [BUGGY] if ((long) x == x && !negativeZero) { [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); if (x < 0 && prev == '-') { add(" "); } [BUGGY] if ((long) x == x && !negativeZero) { [BUGGY] long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	249	249	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addNumber(double x) {   char prev = getLastChar(); boolean negativeZero = isNegativeZero(x); if (x < 0 && prev == '-') { add(" "); } [BUGGY] [BUGGY] if ((long) x == x && !negativeZero) { long value = (long) x; long mantissa = value; int exp = 0; if (Math.abs(x) >= 100) { while (mantissa / 10 * Math.pow(10, exp + 1) == value) { mantissa /= 10; exp++; } } if (exp > 2) { [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	249	249	1	add	
15	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	267	267	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } } if (exp > 2) { add(Long.toString(mantissa) + "E" + Integer.toString(exp)); } else { add(Long.toString(value)); } } else { add(String.valueOf(x)); } [CLASS] CodeConsumer [METHOD] addNumber [RETURN_TYPE] void  double x [VARIABLES] char prev boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted double x long mantissa value int exp  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	267	267	1	add	
17	[BUG] [BUGGY] return x == 0.0 && Math.copySign(1, x) == -1.0; [FE] ComparisonFailure [CONTEXT] static boolean isNegativeZero(double x) { [BUGGY] return x == 0.0 && Math.copySign(1, x) == -1.0; [BUGGY] } [CLASS] CodeConsumer [METHOD] isNegativeZero [RETURN_TYPE] boolean  double x [VARIABLES] double x boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	270	270	1	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static boolean isNegativeZero(double x) { [BUGGY] [BUGGY] return x == 0.0 && Math.copySign(1, x) == -1.0; } [CLASS] CodeConsumer [METHOD] isNegativeZero [RETURN_TYPE] boolean  double x [VARIABLES] double x boolean binOp needSemiColon negativeZero sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.19245008972987526	270	270	1	add	
20	[BUG] [BUGGY] maybeCutLine(); [FE] ComparisonFailure [CONTEXT] append(" "); }  appendOp(op, binOp);    if (binOp) { [BUGGY] maybeCutLine(); [BUGGY] } } [CLASS] CodeConsumer [METHOD] addOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] char first prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.15075567228888181	236	236	1	replace	
21	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] append(" "); }  appendOp(op, binOp);    if (binOp) { [BUGGY] [BUGGY] maybeCutLine(); } } [CLASS] CodeConsumer [METHOD] addOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] char first prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.15075567228888181	236	236	1	add	
22	[BUG] [BUGGY] maybeEndStatement(); [FE] ComparisonFailure [CONTEXT] void addOp(String op, boolean binOp) { [BUGGY] maybeEndStatement(); [BUGGY]  char first = op.charAt(0); char prev = getLastChar(); if ((first == '+' || first == '-') && prev == first) {   append(" "); } else if (Character.isLetter(first) && isWordChar(prev)) { [CLASS] CodeConsumer [METHOD] addOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] char first prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	211	211	1	replace	
23	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addOp(String op, boolean binOp) { [BUGGY] [BUGGY] maybeEndStatement(); char first = op.charAt(0); char prev = getLastChar(); if ((first == '+' || first == '-') && prev == first) {   append(" "); } else if (Character.isLetter(first) && isWordChar(prev)) { [CLASS] CodeConsumer [METHOD] addOp [RETURN_TYPE] void  String op boolean binOp [VARIABLES] char first prev boolean binOp needSemiColon sawFunction shouldEndLine statementContext statementNeedsEnded statementStarted String op  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	211	211	1	add	
24	[BUG] [BUGGY] char first = op.charAt(0); [FE] ComparisonFailure [CONTEXT] } void addOp(String op, boolean binOp) { maybeEndStatement(); [BUGGY] char first = op.charAt(0); [BUGGY] char prev = getLastChar(); if ((first == '+' || first == '-') && prev == first) {   [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	213	213	1	replace	
25	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } void addOp(String op, boolean binOp) { maybeEndStatement(); [BUGGY] [BUGGY] char first = op.charAt(0); char prev = getLastChar(); if ((first == '+' || first == '-') && prev == first) {   [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	213	213	1	add	
26	[BUG] [BUGGY] char prev = getLastChar(); [FE] ComparisonFailure [CONTEXT] void addOp(String op, boolean binOp) { maybeEndStatement(); char first = op.charAt(0); [BUGGY] char prev = getLastChar(); [BUGGY]  if ((first == '+' || first == '-') && prev == first) {   append(" "); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	214	214	1	replace	
27	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void addOp(String op, boolean binOp) { maybeEndStatement(); char first = op.charAt(0); [BUGGY] [BUGGY] char prev = getLastChar(); if ((first == '+' || first == '-') && prev == first) {   append(" "); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	214	214	1	add	
28	[BUG] [BUGGY] if ((first == '+' || first == '-') && prev == first) { [FE] ComparisonFailure [CONTEXT] maybeEndStatement(); char first = op.charAt(0); char prev = getLastChar(); [BUGGY] if ((first == '+' || first == '-') && prev == first) { [BUGGY]   append(" "); } else if (Character.isLetter(first) && isWordChar(prev)) { [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	216	216	1	replace	
29	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] maybeEndStatement(); char first = op.charAt(0); char prev = getLastChar(); [BUGGY] [BUGGY] if ((first == '+' || first == '-') && prev == first) {   append(" "); } else if (Character.isLetter(first) && isWordChar(prev)) { [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	216	216	1	add	
30	[BUG] [BUGGY] } else if (Character.isLetter(first) && isWordChar(prev)) { [FE] ComparisonFailure [CONTEXT] if ((first == '+' || first == '-') && prev == first) {   append(" "); [BUGGY] } else if (Character.isLetter(first) &&    isWordChar(prev)) { [BUGGY] isWordChar(prev)) {  append(" "); } else if (prev == '-' && first == '>') {  [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	220	221	1	replace	
31	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if ((first == '+' || first == '-') && prev == first) {   append(" "); [BUGGY] [BUGGY] } else if (Character.isLetter(first) &&    isWordChar(prev)) { isWordChar(prev)) {  append(" "); } else if (prev == '-' && first == '>') {  [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	220	221	1	add	
32	[BUG] [BUGGY] } else if (prev == '-' && first == '>') { [FE] ComparisonFailure [CONTEXT] append(" "); } else if (Character.isLetter(first) && isWordChar(prev)) {  append(" "); [BUGGY] } else if (prev == '-' && first == '>') { [BUGGY]  append(" "); }   [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	224	224	1	replace	
33	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] append(" "); } else if (Character.isLetter(first) && isWordChar(prev)) {  append(" "); [BUGGY] [BUGGY] } else if (prev == '-' && first == '>') {  append(" "); }   [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	224	224	1	add	
34	[BUG] [BUGGY] appendOp(op, binOp); [FE] ComparisonFailure [CONTEXT]  append(" "); }  [BUGGY] appendOp(op, binOp); [BUGGY]     if (binOp) { [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	230	230	1	replace	
35	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  append(" "); }  [BUGGY] [BUGGY] appendOp(op, binOp);    if (binOp) { [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	230	230	1	add	
36	[BUG] [BUGGY] if (binOp) { [FE] ComparisonFailure [CONTEXT] appendOp(op, binOp);    [BUGGY] if (binOp) { [BUGGY] maybeCutLine(); } } void addNumber(double x) { [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	235	235	1	replace	
37	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] appendOp(op, binOp);    [BUGGY] [BUGGY] if (binOp) { maybeCutLine(); } } void addNumber(double x) { [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	235	235	1	add	
38	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT]   if (binOp) { maybeCutLine(); } [BUGGY] } [BUGGY]  void addNumber(double x) {   char prev = getLastChar(); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	238	238	1	replace	
39	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]   if (binOp) { maybeCutLine(); } [BUGGY] [BUGGY] } void addNumber(double x) {   char prev = getLastChar(); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.14907119849998599	238	238	1	add	
40	[BUG] [BUGGY] add(identifier); [FE] ComparisonFailure [CONTEXT]   abstract char getLastChar(); void addIdentifier(String identifier) { [BUGGY] add(identifier); [BUGGY] }     [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13245323570650439	62	62	1	replace	
41	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]   abstract char getLastChar(); void addIdentifier(String identifier) { [BUGGY] [BUGGY] add(identifier); }     [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13245323570650439	62	62	1	add	
42	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT]  abstract char getLastChar(); void addIdentifier(String identifier) { add(identifier); [BUGGY] } [BUGGY]      [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13245323570650439	63	63	1	replace	
43	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  abstract char getLastChar(); void addIdentifier(String identifier) { add(identifier); [BUGGY] [BUGGY] }      [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13245323570650439	63	63	1	add	
44	[BUG] [BUGGY] endStatement(false); [FE] ComparisonFailure [CONTEXT]     void endStatement() { [BUGGY] endStatement(false); [BUGGY] } void endStatement(boolean needSemiColon) { if (needSemiColon) { append(";"); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13018891098082389	135	135	1	replace	
45	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]     void endStatement() { [BUGGY] [BUGGY] endStatement(false); } void endStatement(boolean needSemiColon) { if (needSemiColon) { append(";"); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13018891098082389	135	135	1	add	
46	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT]    void endStatement() { endStatement(false); [BUGGY] } [BUGGY]  void endStatement(boolean needSemiColon) { if (needSemiColon) { append(";"); maybeLineBreak(); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13018891098082389	136	136	1	replace	
47	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]    void endStatement() { endStatement(false); [BUGGY] [BUGGY] } void endStatement(boolean needSemiColon) { if (needSemiColon) { append(";"); maybeLineBreak(); [CLASS] 	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13018891098082389	136	136	1	add	
48	[BUG] [BUGGY] } else if (statementStarted) { [FE] ComparisonFailure [CONTEXT] void endStatement(boolean needSemiColon) { if (needSemiColon) { append(";"); maybeLineBreak(); statementNeedsEnded = false; [BUGGY] } else if (statementStarted) { [BUGGY] statementNeedsEnded = true; } } [CLASS] CodeConsumer [METHOD] endStatement [RETURN_TYPE] void  boolean needSemiColon [VARIABLES] boolean needSemiColon sawFunction shouldEndLine statementNeedsEnded statementStarted  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13018891098082389	143	143	1	replace	
49	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void endStatement(boolean needSemiColon) { if (needSemiColon) { append(";"); maybeLineBreak(); statementNeedsEnded = false; [BUGGY] [BUGGY] } else if (statementStarted) { statementNeedsEnded = true; } } [CLASS] CodeConsumer [METHOD] endStatement [RETURN_TYPE] void  boolean needSemiColon [VARIABLES] boolean needSemiColon sawFunction shouldEndLine statementNeedsEnded statementStarted  	projects/Closure38/src/com/google/javascript/jscomp/CodeConsumer.java	0.13018891098082389	143	143	1	add	
