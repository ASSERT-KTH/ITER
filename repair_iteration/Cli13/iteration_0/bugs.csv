bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] int argumentCount = 0; [FE] ComparisonFailure [CONTEXT] throws OptionException {  [BUGGY] int argumentCount = 0; [BUGGY]  while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	144	144	1	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] throws OptionException {  [BUGGY] [BUGGY] int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	144	144	1	add	
3	[BUG] [BUGGY] while (arguments.hasNext() && (argumentCount < maximum)) { [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; [BUGGY] while (arguments.hasNext() && (argumentCount < maximum)) { [BUGGY] final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	146	146	1	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; [BUGGY] [BUGGY] while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	146	146	1	add	
5	[BUG] [BUGGY] final String allValuesQuoted = (String) arguments.next(); [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { [BUGGY] final String allValuesQuoted = (String) arguments.next(); [BUGGY] final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	147	147	1	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { [BUGGY] [BUGGY] final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	147	147	1	add	
7	[BUG] [BUGGY] final String allValues = stripBoundaryQuotes(allValuesQuoted); [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); [BUGGY] final String allValues = stripBoundaryQuotes(allValuesQuoted); [BUGGY]   if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  else if (commandLine.looksLikeOption(allValuesQuoted)) { [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	148	148	1	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); [BUGGY] [BUGGY] final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  else if (commandLine.looksLikeOption(allValuesQuoted)) { [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	148	148	1	add	
9	[BUG] [BUGGY] if (allValuesQuoted.equals(consumeRemaining)) { [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  [BUGGY] if (allValuesQuoted.equals(consumeRemaining)) { [BUGGY] while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	151	151	1	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] throws OptionException {  int argumentCount = 0; while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted);  [BUGGY] [BUGGY] if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	151	151	1	add	
11	[BUG] [BUGGY] else if (commandLine.looksLikeOption(allValuesQuoted)) { [FE] ComparisonFailure [CONTEXT] final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  [BUGGY] else if (commandLine.looksLikeOption(allValuesQuoted)) { [BUGGY] arguments.previous(); break; }  else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	158	158	1	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final String allValues = stripBoundaryQuotes(allValuesQuoted);  if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } }  [BUGGY] [BUGGY] else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; }  else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	158	158	1	add	
13	[BUG] [BUGGY] else if (subsequentSplit) { [FE] ComparisonFailure [CONTEXT] commandLine.addValue(option, arguments.next()); } }  else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; }  [BUGGY] else if (subsequentSplit) { [BUGGY] final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	164	164	1	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] commandLine.addValue(option, arguments.next()); } }  else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; }  [BUGGY] [BUGGY] else if (subsequentSplit) { final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	164	164	1	add	
15	[BUG] [BUGGY] ++argumentCount; [FE] ComparisonFailure [CONTEXT] arguments.add(token); } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } }  else { [BUGGY] ++argumentCount; [BUGGY] commandLine.addValue(option, allValues); } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	185	185	1	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] arguments.add(token); } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } }  else { [BUGGY] [BUGGY] ++argumentCount; commandLine.addValue(option, allValues); } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	185	185	1	add	
17	[BUG] [BUGGY] commandLine.addValue(option, allValues); [FE] ComparisonFailure [CONTEXT] } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } }  else { ++argumentCount; [BUGGY] commandLine.addValue(option, allValues); [BUGGY] } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	186	186	1	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } }  else { ++argumentCount; [BUGGY] [BUGGY] commandLine.addValue(option, allValues); } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	186	186	1	add	
19	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } }  else { ++argumentCount; commandLine.addValue(option, allValues); } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	188	188	1	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (values.hasMoreTokens()) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } }  else { ++argumentCount; commandLine.addValue(option, allValues); } [CLASS] ArgumentImpl [METHOD] processValues [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator arguments Option option [VARIABLES] StringTokenizer values boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted consumeRemaining description name token ListIterator arguments int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	188	188	1	add	
22	[BUG] [BUGGY] return true; [FE] ComparisonFailure [CONTEXT] public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { [BUGGY] return true; [BUGGY] } [CLASS] ArgumentImpl [METHOD] canProcess [RETURN_TYPE] boolean  WriteableCommandLine commandLine String arg [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	193	193	1	replace	
23	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { [BUGGY] [BUGGY] return true; } [CLASS] ArgumentImpl [METHOD] canProcess [RETURN_TYPE] boolean  WriteableCommandLine commandLine String arg [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	193	193	1	add	
24	[BUG] [BUGGY] processValues(commandLine, args, this); [FE] ComparisonFailure [CONTEXT] public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { [BUGGY] processValues(commandLine, args, this); [BUGGY] } [CLASS] ArgumentImpl [METHOD] process [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator args [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token ListIterator args int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	203	203	1	replace	
25	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { [BUGGY] [BUGGY] processValues(commandLine, args, this); } [CLASS] ArgumentImpl [METHOD] process [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator args [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token ListIterator args int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	203	203	1	add	
26	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { processValues(commandLine, args, this); [BUGGY] } [BUGGY]  [CLASS] ArgumentImpl [METHOD] process [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator args [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token ListIterator args int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	204	204	1	replace	
27	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException { processValues(commandLine, args, this); [BUGGY] [BUGGY] } [CLASS] ArgumentImpl [METHOD] process [RETURN_TYPE] void  WriteableCommandLine commandLine ListIterator args [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token ListIterator args int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	204	204	1	add	
28	[BUG] [BUGGY] validate(commandLine, this); [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine) throws OptionException { [BUGGY] validate(commandLine, this); [BUGGY] } [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	232	232	1	replace	
29	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine) throws OptionException { [BUGGY] [BUGGY] validate(commandLine, this); } [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	232	232	1	add	
30	[BUG] [BUGGY] final List values = commandLine.getValues(option); [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { [BUGGY] final List values = commandLine.getValues(option); [BUGGY]  if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); }  [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	238	238	1	replace	
31	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { [BUGGY] [BUGGY] final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); }  [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	238	238	1	add	
32	[BUG] [BUGGY] if (values.size() < minimum) { [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); [BUGGY] if (values.size() < minimum) { [BUGGY] throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	240	240	1	replace	
33	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); [BUGGY] [BUGGY] if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	240	240	1	add	
34	[BUG] [BUGGY] if (values.size() > maximum) { [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } [BUGGY] if (values.size() > maximum) { [BUGGY] throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	244	244	1	replace	
35	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } [BUGGY] [BUGGY] if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	244	244	1	add	
36	[BUG] [BUGGY] throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,   (String) values.get(maximum)); [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { [BUGGY] throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,          (String) values.get(maximum)); [BUGGY] (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); } [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	245	246	1	replace	
37	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES); } if (values.size() > maximum) { [BUGGY] [BUGGY] throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,          (String) values.get(maximum)); (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, ive.getMessage()); } [CLASS] ArgumentImpl [METHOD] validate [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean subsequentSplit InvalidArgumentException ive char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	245	246	1	add	
38	[BUG] [BUGGY] final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); [FE] ComparisonFailure [CONTEXT] final Comparator comp) {  [BUGGY] final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); [BUGGY]   final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	263	263	1	replace	
39	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final Comparator comp) {  [BUGGY] [BUGGY] final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	263	263	1	add	
40	[BUG] [BUGGY] final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); [FE] ComparisonFailure [CONTEXT] final Comparator comp) {  final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  [BUGGY] final boolean numbered =   (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); [BUGGY] (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;   [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	266	267	1	replace	
41	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final Comparator comp) {  final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  [BUGGY] [BUGGY] final boolean numbered =   (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;   [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	266	267	1	add	
42	[BUG] [BUGGY] final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); [FE] ComparisonFailure [CONTEXT] final Comparator comp) {  final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); [BUGGY] final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); [BUGGY]   final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  while (i < max) {  if (i > 0) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	269	269	1	replace	
43	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final Comparator comp) {  final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); [BUGGY] [BUGGY] final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  while (i < max) {  if (i > 0) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	269	269	1	add	
44	[BUG] [BUGGY] final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; [FE] ComparisonFailure [CONTEXT]  final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  [BUGGY] final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; [BUGGY]  int i = 0;  while (i < max) {  if (i > 0) { buffer.append(' '); }  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	272	272	1	replace	
45	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  [BUGGY] [BUGGY] final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  while (i < max) {  if (i > 0) { buffer.append(' '); }  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	272	272	1	add	
46	[BUG] [BUGGY] int i = 0; [FE] ComparisonFailure [CONTEXT]  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; [BUGGY] int i = 0; [BUGGY]   while (i < max) {  if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	274	274	1	replace	
47	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; [BUGGY] [BUGGY] int i = 0;  while (i < max) {  if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	274	274	1	add	
48	[BUG] [BUGGY] while (i < max) { [FE] ComparisonFailure [CONTEXT] (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  [BUGGY] while (i < max) { [BUGGY]  if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); }  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	277	277	1	replace	
49	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED); final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  [BUGGY] [BUGGY] while (i < max) {  if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); }  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	277	277	1	add	
50	[BUG] [BUGGY] if (i > 0) { [FE] ComparisonFailure [CONTEXT] final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  while (i < max) {  [BUGGY] if (i > 0) { [BUGGY] buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	279	279	1	replace	
51	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);  final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0;  while (i < max) {  [BUGGY] [BUGGY] if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	279	279	1	add	
52	[BUG] [BUGGY] if ((i >= minimum) && (optional || (i > 0))) { [FE] ComparisonFailure [CONTEXT] int i = 0;  while (i < max) {  if (i > 0) { buffer.append(' '); }  [BUGGY] if ((i >= minimum) && (optional || (i > 0))) { [BUGGY] buffer.append('['); } if (bracketed) { buffer.append('<'); }  buffer.append(name); ++i; [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	284	284	1	replace	
53	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] int i = 0;  while (i < max) {  if (i > 0) { buffer.append(' '); }  [BUGGY] [BUGGY] if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); }  buffer.append(name); ++i; [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	284	284	1	add	
54	[BUG] [BUGGY] if (bracketed) { [FE] ComparisonFailure [CONTEXT]  if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } [BUGGY] if (bracketed) { [BUGGY] buffer.append('<'); }  buffer.append(name); ++i;  if (numbered) { buffer.append(i); [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	288	288	1	replace	
55	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if (i > 0) { buffer.append(' '); }  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } [BUGGY] [BUGGY] if (bracketed) { buffer.append('<'); }  buffer.append(name); ++i;  if (numbered) { buffer.append(i); [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	288	288	1	add	
56	[BUG] [BUGGY] buffer.append(name); [FE] ComparisonFailure [CONTEXT]  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); }  [BUGGY] buffer.append(name); [BUGGY] ++i;  if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	293	293	1	replace	
57	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); }  [BUGGY] [BUGGY] buffer.append(name); ++i;  if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	293	293	1	add	
58	[BUG] [BUGGY] ++i; [FE] ComparisonFailure [CONTEXT] if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); }  buffer.append(name); [BUGGY] ++i; [BUGGY]   if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	294	294	1	replace	
59	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); } if (bracketed) { buffer.append('<'); }  buffer.append(name); [BUGGY] [BUGGY] ++i;  if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	294	294	1	add	
60	[BUG] [BUGGY] if (numbered) { [FE] ComparisonFailure [CONTEXT] if (bracketed) { buffer.append('<'); }  buffer.append(name); ++i;  [BUGGY] if (numbered) { [BUGGY] buffer.append(i); } if (bracketed) { buffer.append('>'); } }  if (maximum == Integer.MAX_VALUE) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	297	297	1	replace	
61	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (bracketed) { buffer.append('<'); }  buffer.append(name); ++i;  [BUGGY] [BUGGY] if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } }  if (maximum == Integer.MAX_VALUE) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	297	297	1	add	
62	[BUG] [BUGGY] if (bracketed) { [FE] ComparisonFailure [CONTEXT]  buffer.append(name); ++i;  if (numbered) { buffer.append(i); } [BUGGY] if (bracketed) { [BUGGY] buffer.append('>'); } }  if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	301	301	1	replace	
63	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  buffer.append(name); ++i;  if (numbered) { buffer.append(i); } [BUGGY] [BUGGY] if (bracketed) { buffer.append('>'); } }  if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	301	301	1	add	
64	[BUG] [BUGGY] if (maximum == Integer.MAX_VALUE) { [FE] ComparisonFailure [CONTEXT] if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } }  [BUGGY] if (maximum == Integer.MAX_VALUE) { [BUGGY]  buffer.append(" ..."); }  while (i > 0) { --i;  if ((i >= minimum) && (optional || (i > 0))) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	307	307	1	replace	
65	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>'); } }  [BUGGY] [BUGGY] if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  while (i > 0) { --i;  if ((i >= minimum) && (optional || (i > 0))) { [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	307	307	1	add	
66	[BUG] [BUGGY] while (i > 0) { [FE] ComparisonFailure [CONTEXT] } }  if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  [BUGGY] while (i > 0) { [BUGGY] --i;  if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	313	313	1	replace	
67	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } }  if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  [BUGGY] [BUGGY] while (i > 0) { --i;  if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	313	313	1	add	
68	[BUG] [BUGGY] --i; [FE] ComparisonFailure [CONTEXT] }  if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  while (i > 0) { [BUGGY] --i; [BUGGY]   if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	314	314	1	replace	
69	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] }  if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  while (i > 0) { [BUGGY] [BUGGY] --i;  if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	314	314	1	add	
70	[BUG] [BUGGY] if ((i >= minimum) && (optional || (i > 0))) { [FE] ComparisonFailure [CONTEXT] if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  while (i > 0) { --i;  [BUGGY] if ((i >= minimum) && (optional || (i > 0))) { [BUGGY] buffer.append(']'); } } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	317	317	1	replace	
71	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (maximum == Integer.MAX_VALUE) {  buffer.append(" ..."); }  while (i > 0) { --i;  [BUGGY] [BUGGY] if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); } } } [CLASS] ArgumentImpl [METHOD] appendUsage [RETURN_TYPE] void  StringBuffer buffer Set helpSettings Comparator comp [VARIABLES] StringBuffer buffer boolean bracketed numbered optional subsequentSplit Set helpSettings char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator Comparator comp  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	317	317	1	add	
73	[BUG] [BUGGY] return maximum; [FE] ComparisonFailure [CONTEXT] public int getMaximum() { [BUGGY] return maximum; [BUGGY] } [CLASS] ArgumentImpl [METHOD] getMaximum [RETURN_TYPE] int  [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	336	336	1	replace	
74	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int getMaximum() { [BUGGY] [BUGGY] return maximum; } [CLASS] ArgumentImpl [METHOD] getMaximum [RETURN_TYPE] int  [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	336	336	1	add	
75	[BUG] [BUGGY] return minimum; [FE] ComparisonFailure [CONTEXT] public int getMinimum() { [BUGGY] return minimum; [BUGGY] } [CLASS] ArgumentImpl [METHOD] getMinimum [RETURN_TYPE] int  [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	340	340	1	replace	
76	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public int getMinimum() { [BUGGY] [BUGGY] return minimum; } [CLASS] ArgumentImpl [METHOD] getMinimum [RETURN_TYPE] int  [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	340	340	1	add	
77	[BUG] [BUGGY] if (!token.startsWith("\"") || !token.endsWith("\"")) { [FE] ComparisonFailure [CONTEXT] public String stripBoundaryQuotes(String token) { [BUGGY] if (!token.startsWith("\"") || !token.endsWith("\"")) { [BUGGY] return token; } token = token.substring(1, token.length() - 1); return token; } [CLASS] ArgumentImpl [METHOD] stripBoundaryQuotes [RETURN_TYPE] String  String token [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	353	353	1	replace	
78	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public String stripBoundaryQuotes(String token) { [BUGGY] [BUGGY] if (!token.startsWith("\"") || !token.endsWith("\"")) { return token; } token = token.substring(1, token.length() - 1); return token; } [CLASS] ArgumentImpl [METHOD] stripBoundaryQuotes [RETURN_TYPE] String  String token [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	353	353	1	add	
79	[BUG] [BUGGY] return token; [FE] ComparisonFailure [CONTEXT] public String stripBoundaryQuotes(String token) { if (!token.startsWith("\"") || !token.endsWith("\"")) { [BUGGY] return token; [BUGGY] } token = token.substring(1, token.length() - 1); return token; } [CLASS] ArgumentImpl [METHOD] stripBoundaryQuotes [RETURN_TYPE] String  String token [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	354	354	1	replace	
80	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public String stripBoundaryQuotes(String token) { if (!token.startsWith("\"") || !token.endsWith("\"")) { [BUGGY] [BUGGY] return token; } token = token.substring(1, token.length() - 1); return token; } [CLASS] ArgumentImpl [METHOD] stripBoundaryQuotes [RETURN_TYPE] String  String token [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	1.0	354	354	1	add	
81	[BUG] [BUGGY] options.add(option); [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { [BUGGY] options.add(option); [BUGGY] nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	64	64	1	replace	
82	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { [BUGGY] [BUGGY] options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	64	64	1	add	
83	[BUG] [BUGGY] nameToOption.put(option.getPreferredName(), option); [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { options.add(option); [BUGGY] nameToOption.put(option.getPreferredName(), option); [BUGGY]  for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	65	65	1	replace	
84	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { options.add(option); [BUGGY] [BUGGY] nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	65	65	1	add	
85	[BUG] [BUGGY] for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); [BUGGY] for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { [BUGGY] nameToOption.put(i.next(), option); } } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	67	67	1	replace	
86	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); [BUGGY] [BUGGY] for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	67	67	1	add	
87	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } [BUGGY] } [BUGGY]  [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	70	70	1	replace	
88	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } [BUGGY] [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] addOption [RETURN_TYPE] void  Option option [VARIABLES] Set prefixes boolean Iterator i List arguments normalised options Option option Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	70	70	1	add	
89	[BUG] [BUGGY] if (option instanceof Argument) { [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { [BUGGY] if (option instanceof Argument) { [BUGGY] addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); }  [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	74	74	1	replace	
90	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { [BUGGY] [BUGGY] if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); }  [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	74	74	1	add	
91	[BUG] [BUGGY] addOption(option); [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { [BUGGY] addOption(option); [BUGGY] } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	75	75	1	replace	
92	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { [BUGGY] [BUGGY] addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	75	75	1	add	
93	[BUG] [BUGGY] List valueList = (List) values.get(option); [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } [BUGGY] List valueList = (List) values.get(option); [BUGGY]  if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	78	78	1	replace	
94	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } [BUGGY] [BUGGY] List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	78	78	1	add	
95	[BUG] [BUGGY] if (valueList == null) { [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); [BUGGY] if (valueList == null) { [BUGGY] valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	80	80	1	replace	
96	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); [BUGGY] [BUGGY] if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	80	80	1	add	
97	[BUG] [BUGGY] valueList = new ArrayList(); [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { [BUGGY] valueList = new ArrayList(); [BUGGY] values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	81	81	1	replace	
98	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { [BUGGY] [BUGGY] valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	81	81	1	add	
99	[BUG] [BUGGY] values.put(option, valueList); [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); [BUGGY] values.put(option, valueList); [BUGGY] } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	82	82	1	replace	
100	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); [BUGGY] [BUGGY] values.put(option, valueList); } valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	82	82	1	add	
101	[BUG] [BUGGY] valueList.add(value); [FE] ComparisonFailure [CONTEXT] addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } [BUGGY] valueList.add(value); [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	85	85	1	replace	
102	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } [BUGGY] [BUGGY] valueList.add(value); } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	85	85	1	add	
103	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); [BUGGY] } [BUGGY]  [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	86	86	1	replace	
104	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); [BUGGY] [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] addValue [RETURN_TYPE] void  Option option Object value [VARIABLES] Set prefixes boolean List arguments normalised options valueList Option option Object value Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	86	86	1	add	
105	[BUG] [BUGGY] final boolean present = options.contains(option); [FE] ComparisonFailure [CONTEXT] public boolean hasOption(final Option option) { [BUGGY] final boolean present = options.contains(option); [BUGGY]  return present; } [CLASS] WriteableCommandLineImpl [METHOD] hasOption [RETURN_TYPE] boolean  Option option [VARIABLES] List arguments normalised options valueList Option option Set prefixes boolean present Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	100	100	1	replace	
106	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public boolean hasOption(final Option option) { [BUGGY] [BUGGY] final boolean present = options.contains(option); return present; } [CLASS] WriteableCommandLineImpl [METHOD] hasOption [RETURN_TYPE] boolean  Option option [VARIABLES] List arguments normalised options valueList Option option Set prefixes boolean present Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	100	100	1	add	
107	[BUG] [BUGGY] return present; [FE] ComparisonFailure [CONTEXT] public boolean hasOption(final Option option) { final boolean present = options.contains(option); [BUGGY] return present; [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] hasOption [RETURN_TYPE] boolean  Option option [VARIABLES] List arguments normalised options valueList Option option Set prefixes boolean present Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	102	102	1	replace	
108	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public boolean hasOption(final Option option) { final boolean present = options.contains(option); [BUGGY] [BUGGY] return present; } [CLASS] WriteableCommandLineImpl [METHOD] hasOption [RETURN_TYPE] boolean  Option option [VARIABLES] List arguments normalised options valueList Option option Set prefixes boolean present Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	102	102	1	add	
109	[BUG] [BUGGY] return (Option) nameToOption.get(trigger); [FE] ComparisonFailure [CONTEXT] public Option getOption(final String trigger) { [BUGGY] return (Option) nameToOption.get(trigger); [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] getOption [RETURN_TYPE] Option  String trigger [VARIABLES] List arguments normalised options valueList Set prefixes String trigger boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	106	106	1	replace	
110	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public Option getOption(final String trigger) { [BUGGY] [BUGGY] return (Option) nameToOption.get(trigger); } [CLASS] WriteableCommandLineImpl [METHOD] getOption [RETURN_TYPE] Option  String trigger [VARIABLES] List arguments normalised options valueList Set prefixes String trigger boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	106	106	1	add	
111	[BUG] [BUGGY] List valueList = (List) values.get(option); [FE] ComparisonFailure [CONTEXT] public List getValues(final Option option, final List defaultValues) {  [BUGGY] List valueList = (List) values.get(option); [BUGGY]   if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	112	112	1	replace	
112	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public List getValues(final Option option, final List defaultValues) {  [BUGGY] [BUGGY] List valueList = (List) values.get(option);  if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	112	112	1	add	
113	[BUG] [BUGGY] if ((valueList == null) || valueList.isEmpty()) { [FE] ComparisonFailure [CONTEXT] public List getValues(final Option option, final List defaultValues) {  List valueList = (List) values.get(option);  [BUGGY] if ((valueList == null) || valueList.isEmpty()) { [BUGGY] valueList = defaultValues; }  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  if (valueList == null) { [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	115	115	1	replace	
114	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public List getValues(final Option option, final List defaultValues) {  List valueList = (List) values.get(option);  [BUGGY] [BUGGY] if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  if (valueList == null) { [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	115	115	1	add	
115	[BUG] [BUGGY] if ((valueList == null) || valueList.isEmpty()) { [FE] ComparisonFailure [CONTEXT] final List defaultValues) {  List valueList = (List) values.get(option);  if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  [BUGGY] if ((valueList == null) || valueList.isEmpty()) { [BUGGY] valueList = (List) this.defaultValues.get(option); }  if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	120	120	1	replace	
116	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final List defaultValues) {  List valueList = (List) values.get(option);  if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  [BUGGY] [BUGGY] if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	120	120	1	add	
117	[BUG] [BUGGY] if (valueList == null) { [FE] ComparisonFailure [CONTEXT] if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  [BUGGY] if (valueList == null) { [BUGGY] valueList = Collections.EMPTY_LIST; } return valueList; } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	125	125	1	replace	
118	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; }  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  [BUGGY] [BUGGY] if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	125	125	1	add	
119	[BUG] [BUGGY] return valueList; [FE] ComparisonFailure [CONTEXT]  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  if (valueList == null) { valueList = Collections.EMPTY_LIST; } [BUGGY] return valueList; [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	129	129	1	replace	
120	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }  if (valueList == null) { valueList = Collections.EMPTY_LIST; } [BUGGY] [BUGGY] return valueList; } [CLASS] WriteableCommandLineImpl [METHOD] getValues [RETURN_TYPE] List  Option option List defaultValues [VARIABLES] List arguments defaultValues normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	129	129	1	add	
121	[BUG] [BUGGY] return false; [FE] ComparisonFailure [CONTEXT] public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } [BUGGY] return false; [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] looksLikeOption [RETURN_TYPE] boolean  String trigger [VARIABLES] Set prefixes boolean Iterator i List arguments defaultValues normalised options valueList String prefix trigger Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	177	177	1	replace	
122	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } [BUGGY] [BUGGY] return false; } [CLASS] WriteableCommandLineImpl [METHOD] looksLikeOption [RETURN_TYPE] boolean  String trigger [VARIABLES] Set prefixes boolean Iterator i List arguments defaultValues normalised options valueList String prefix trigger Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	1.0	177	177	1	add	
123	[BUG] [BUGGY] super(id, false); [FE] ComparisonFailure [CONTEXT] final int id) { [BUGGY] super(id, false); [BUGGY]  this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	107	107	1	replace	
124	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { [BUGGY] [BUGGY] super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	107	107	1	add	
125	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final String consumeRemaining; [CLASS] ArgumentImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	69	69	1	replace	
126	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final String consumeRemaining; [CLASS] ArgumentImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	69	69	1	add	
127	[BUG] [BUGGY] this.name = (name == null) ? "arg" : name; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); [BUGGY] this.name = (name == null) ? "arg" : name; [BUGGY] this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults;  [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	109	109	1	replace	
128	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); [BUGGY] [BUGGY] this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults;  [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	109	109	1	add	
129	[BUG] [BUGGY] this.description = description; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; [BUGGY] this.description = description; [BUGGY] this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	110	110	1	replace	
130	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; [BUGGY] [BUGGY] this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	110	110	1	add	
131	[BUG] [BUGGY] this.minimum = minimum; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; [BUGGY] this.minimum = minimum; [BUGGY] this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	111	111	1	replace	
132	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; [BUGGY] [BUGGY] this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	111	111	1	add	
133	[BUG] [BUGGY] this.maximum = maximum; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; [BUGGY] this.maximum = maximum; [BUGGY] this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	112	112	1	replace	
134	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; [BUGGY] [BUGGY] this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	112	112	1	add	
135	[BUG] [BUGGY] this.initialSeparator = initialSeparator; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; [BUGGY] this.initialSeparator = initialSeparator; [BUGGY] this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); }  [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	113	113	1	replace	
136	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; [BUGGY] [BUGGY] this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); }  [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	113	113	1	add	
137	[BUG] [BUGGY] this.subsequentSeparator = subsequentSeparator; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; [BUGGY] this.subsequentSeparator = subsequentSeparator; [BUGGY] this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	114	114	1	replace	
138	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; [BUGGY] [BUGGY] this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	114	114	1	add	
139	[BUG] [BUGGY] this.subsequentSplit = subsequentSeparator != NUL; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; [BUGGY] this.subsequentSplit = subsequentSeparator != NUL; [BUGGY] this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	115	115	1	replace	
140	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; [BUGGY] [BUGGY] this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	115	115	1	add	
141	[BUG] [BUGGY] this.validator = validator; [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; [BUGGY] this.validator = validator; [BUGGY] this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	116	116	1	replace	
142	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] final int id) { super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; [BUGGY] [BUGGY] this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	116	116	1	add	
143	[BUG] [BUGGY] this.consumeRemaining = consumeRemaining; [FE] ComparisonFailure [CONTEXT] super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; [BUGGY] this.consumeRemaining = consumeRemaining; [BUGGY] this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	117	117	1	replace	
144	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] super(id, false); this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; [BUGGY] [BUGGY] this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	117	117	1	add	
145	[BUG] [BUGGY] this.defaultValues = valueDefaults; [FE] ComparisonFailure [CONTEXT] this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; [BUGGY] this.defaultValues = valueDefaults; [BUGGY]  if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); }  [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	118	118	1	replace	
146	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] this.name = (name == null) ? "arg" : name; this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; [BUGGY] [BUGGY] this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); }  [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	118	118	1	add	
147	[BUG] [BUGGY] if (minimum > maximum) { [FE] ComparisonFailure [CONTEXT] this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; [BUGGY] if (minimum > maximum) { [BUGGY] throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } if (valueDefaults.size() > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS)); [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	120	120	1	replace	
148	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] this.description = description; this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; [BUGGY] [BUGGY] if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } if (valueDefaults.size() > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS)); [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	120	120	1	add	
149	[BUG] [BUGGY] if ((valueDefaults != null) && (valueDefaults.size() > 0)) { [FE] ComparisonFailure [CONTEXT] this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } [BUGGY] if ((valueDefaults != null) && (valueDefaults.size() > 0)) { [BUGGY] if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } if (valueDefaults.size() > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS)); } } } [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	124	124	1	replace	
150	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX)); } [BUGGY] [BUGGY] if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } if (valueDefaults.size() > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS)); } } } [CLASS] ArgumentImpl [METHOD] <init> [RETURN_TYPE] List,int)  String name String description final int minimum final int maximum final char initialSeparator final char subsequentSeparator Validator validator String consumeRemaining List valueDefaults final int id [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	124	124	1	add	
152	[BUG] [BUGGY] return name; [FE] ComparisonFailure [CONTEXT] public String getPreferredName() { [BUGGY] return name; [BUGGY] } [CLASS] ArgumentImpl [METHOD] getPreferredName [RETURN_TYPE] String  [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	136	136	1	replace	
153	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public String getPreferredName() { [BUGGY] [BUGGY] return name; } [CLASS] ArgumentImpl [METHOD] getPreferredName [RETURN_TYPE] String  [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING consumeRemaining description name int id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	136	136	1	add	
154	[BUG] [BUGGY] return Collections.EMPTY_SET; [FE] ComparisonFailure [CONTEXT] public Set getPrefixes() { [BUGGY] return Collections.EMPTY_SET; [BUGGY] } [CLASS] ArgumentImpl [METHOD] getPrefixes [RETURN_TYPE] Set  [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	197	197	1	replace	
155	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public Set getPrefixes() { [BUGGY] [BUGGY] return Collections.EMPTY_SET; } [CLASS] ArgumentImpl [METHOD] getPrefixes [RETURN_TYPE] Set  [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	197	197	1	add	
156	[BUG] [BUGGY] return Collections.EMPTY_SET; [FE] ComparisonFailure [CONTEXT] public Set getTriggers() { [BUGGY] return Collections.EMPTY_SET; [BUGGY] } [CLASS] ArgumentImpl [METHOD] getTriggers [RETURN_TYPE] Set  [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	215	215	1	replace	
157	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public Set getTriggers() { [BUGGY] [BUGGY] return Collections.EMPTY_SET; } [CLASS] ArgumentImpl [METHOD] getTriggers [RETURN_TYPE] Set  [VARIABLES] boolean subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount id maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	215	215	1	add	
158	[BUG] [BUGGY] return description; [FE] ComparisonFailure [CONTEXT] public String getDescription() { [BUGGY] return description; [BUGGY] } [CLASS] ArgumentImpl [METHOD] getDescription [RETURN_TYPE] String  [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	324	324	1	replace	
159	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public String getDescription() { [BUGGY] [BUGGY] return description; } [CLASS] ArgumentImpl [METHOD] getDescription [RETURN_TYPE] String  [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	324	324	1	add	
160	[BUG] [BUGGY] super.defaults(commandLine); [FE] ComparisonFailure [CONTEXT] public void defaults(final WriteableCommandLine commandLine) { [BUGGY] super.defaults(commandLine); [BUGGY] defaultValues(commandLine, this); } [CLASS] ArgumentImpl [METHOD] defaults [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	367	367	1	replace	
161	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void defaults(final WriteableCommandLine commandLine) { [BUGGY] [BUGGY] super.defaults(commandLine); defaultValues(commandLine, this); } [CLASS] ArgumentImpl [METHOD] defaults [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	367	367	1	add	
162	[BUG] [BUGGY] defaultValues(commandLine, this); [FE] ComparisonFailure [CONTEXT] public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); [BUGGY] defaultValues(commandLine, this); [BUGGY] } [CLASS] ArgumentImpl [METHOD] defaults [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	368	368	1	replace	
163	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); [BUGGY] [BUGGY] defaultValues(commandLine, this); } [CLASS] ArgumentImpl [METHOD] defaults [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	368	368	1	add	
164	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this); [BUGGY] } [BUGGY]  [CLASS] ArgumentImpl [METHOD] defaults [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	369	369	1	replace	
165	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this); [BUGGY] [BUGGY] } [CLASS] ArgumentImpl [METHOD] defaults [RETURN_TYPE] void  WriteableCommandLine commandLine [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	369	369	1	add	
166	[BUG] [BUGGY] commandLine.setDefaultValues(option, defaultValues); [FE] ComparisonFailure [CONTEXT] public void defaultValues(final WriteableCommandLine commandLine, final Option option) { [BUGGY] commandLine.setDefaultValues(option, defaultValues); [BUGGY] } [CLASS] ArgumentImpl [METHOD] defaultValues [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	373	373	1	replace	
167	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void defaultValues(final WriteableCommandLine commandLine, final Option option) { [BUGGY] [BUGGY] commandLine.setDefaultValues(option, defaultValues); } [CLASS] ArgumentImpl [METHOD] defaultValues [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	373	373	1	add	
168	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); [BUGGY] } [BUGGY]  [CLASS] ArgumentImpl [METHOD] defaultValues [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	374	374	1	replace	
169	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); [BUGGY] [BUGGY] } [CLASS] ArgumentImpl [METHOD] defaultValues [RETURN_TYPE] void  WriteableCommandLine commandLine Option option [VARIABLES] boolean bracketed numbered optional subsequentSplit char DEFAULT_INITIAL_SEPARATOR DEFAULT_SUBSEQUENT_SEPARATOR NUL initialSeparator subsequentSeparator WriteableCommandLine commandLine ResourceHelper resources List defaultValues valueDefaults values Option option String DEFAULT_CONSUME_REMAINING allValues allValuesQuoted arg consumeRemaining description name token int argumentCount depth i id max maximum minimum Validator validator  	projects/Cli13/src/java/org/apache/commons/cli2/option/ArgumentImpl.java	0.7071067811865475	374	374	1	add	
170	[BUG] [BUGGY] final List arguments) { [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, [BUGGY] final List arguments) { [BUGGY] this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	58	58	1	replace	
171	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, [BUGGY] [BUGGY] final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	58	58	1	add	
172	[BUG] [BUGGY] private final Properties properties = new Properties(); [FE] ComparisonFailure [CONTEXT] [BUGGY] private final Properties properties = new Properties(); [BUGGY]  [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	40	40	1	replace	
173	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] [BUGGY] [BUGGY] private final Properties properties = new Properties(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	40	40	1	add	
174	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Properties properties = new Properties(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	41	41	1	replace	
175	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Properties properties = new Properties(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	41	41	1	add	
176	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Properties properties = new Properties(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	42	42	1	replace	
177	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Properties properties = new Properties(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	42	42	1	add	
178	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final List options = new ArrayList(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	43	43	1	replace	
179	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final List options = new ArrayList(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	43	43	1	add	
180	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Map nameToOption = new HashMap(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	44	44	1	replace	
181	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Map nameToOption = new HashMap(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	44	44	1	add	
182	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Map values = new HashMap(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	45	45	1	replace	
183	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Map values = new HashMap(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	45	45	1	add	
184	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Map switches = new HashMap(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	46	46	1	replace	
185	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private final Map switches = new HashMap(); [CLASS] WriteableCommandLineImpl  [VARIABLES] 	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	46	46	1	add	
186	[BUG] [BUGGY] this.prefixes = rootOption.getPrefixes(); [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, final List arguments) { [BUGGY] this.prefixes = rootOption.getPrefixes(); [BUGGY] this.normalised = arguments; } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	59	59	1	replace	
187	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, final List arguments) { [BUGGY] [BUGGY] this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	59	59	1	add	
188	[BUG] [BUGGY] this.normalised = arguments; [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); [BUGGY] this.normalised = arguments; [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	60	60	1	replace	
189	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); [BUGGY] [BUGGY] this.normalised = arguments; } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	60	60	1	add	
190	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; [BUGGY] } [BUGGY]  [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	61	61	1	replace	
191	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; [BUGGY] [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] <init> [RETURN_TYPE] List)  Option rootOption List arguments [VARIABLES] List arguments normalised options Option rootOption Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	61	61	1	add	
192	[BUG] [BUGGY] for (final Iterator i = prefixes.iterator(); i.hasNext();) { [FE] ComparisonFailure [CONTEXT] public boolean looksLikeOption(final String trigger) { [BUGGY] for (final Iterator i = prefixes.iterator(); i.hasNext();) { [BUGGY] final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } [CLASS] WriteableCommandLineImpl [METHOD] looksLikeOption [RETURN_TYPE] boolean  String trigger [VARIABLES] Set prefixes boolean Iterator i List arguments defaultValues normalised options valueList String prefix trigger Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	169	169	1	replace	
193	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public boolean looksLikeOption(final String trigger) { [BUGGY] [BUGGY] for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } [CLASS] WriteableCommandLineImpl [METHOD] looksLikeOption [RETURN_TYPE] boolean  String trigger [VARIABLES] Set prefixes boolean Iterator i List arguments defaultValues normalised options valueList String prefix trigger Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	169	169	1	add	
194	[BUG] [BUGGY] if (defaults == null) { [FE] ComparisonFailure [CONTEXT] public void setDefaultValues(final Option option, final List defaults) { [BUGGY] if (defaults == null) { [BUGGY] defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } [CLASS] WriteableCommandLineImpl [METHOD] setDefaultValues [RETURN_TYPE] void  Option option List defaults [VARIABLES] List arguments defaultValues defaults normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	211	211	1	replace	
195	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void setDefaultValues(final Option option, final List defaults) { [BUGGY] [BUGGY] if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } [CLASS] WriteableCommandLineImpl [METHOD] setDefaultValues [RETURN_TYPE] void  Option option List defaults [VARIABLES] List arguments defaultValues defaults normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	211	211	1	add	
196	[BUG] [BUGGY] defaultValues.remove(option); [FE] ComparisonFailure [CONTEXT] public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { [BUGGY] defaultValues.remove(option); [BUGGY] } else { defaultValues.put(option, defaults); } } [CLASS] WriteableCommandLineImpl [METHOD] setDefaultValues [RETURN_TYPE] void  Option option List defaults [VARIABLES] List arguments defaultValues defaults normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	212	212	1	replace	
197	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { [BUGGY] [BUGGY] defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } [CLASS] WriteableCommandLineImpl [METHOD] setDefaultValues [RETURN_TYPE] void  Option option List defaults [VARIABLES] List arguments defaultValues defaults normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	212	212	1	add	
198	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } [BUGGY] } [BUGGY]  [CLASS] WriteableCommandLineImpl [METHOD] setDefaultValues [RETURN_TYPE] void  Option option List defaults [VARIABLES] List arguments defaultValues defaults normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	216	216	1	replace	
199	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } [BUGGY] [BUGGY] } [CLASS] WriteableCommandLineImpl [METHOD] setDefaultValues [RETURN_TYPE] void  Option option List defaults [VARIABLES] List arguments defaultValues defaults normalised options valueList Option option Set prefixes boolean Properties properties Map defaultSwitches defaultValues nameToOption switches values  	projects/Cli13/src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java	0.7071067811865475	216	216	1	add	
