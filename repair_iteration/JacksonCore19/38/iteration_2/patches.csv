bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
2	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  false;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  false;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  false;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
3	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  return  true;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  return  true;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  return  true;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
4	[BUG]  [BUGGY]  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(c    ==    'e'    ||    c    ==    'E')    {    outPtr    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    'e'    ||    c    ==    'E')    {    outPtr    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <  =  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  &&  c  <  =  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  &&  c  <  =  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '0'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '0'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <  =  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '0'  &&  c  <  =  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '0'  &&  c  <  =  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  '9')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  '9')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  '9')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  '9')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  <  =  '9'  ||  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  ||  c  <  =  '9'  ||  c  <  =  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  ||  c  <  =  '9'  ||  c  <  =  '9')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <  =  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  &&  c  <  =  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  &&  c  <  =  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'A'    &&    c    <    =    'Z')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <  =  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '0'  &&  c  <  =  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '0'  &&  c  <  =  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'A'    &&    c    <    =    'Z')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <  =  '9'  ||  c  >=  'A'  &&  c  <  =  'Z')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '0'  &&  c  <  =  '9'  ||  c  >=  'A'  &&  c  <  =  'Z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '0'  &&  c  <  =  '9'  ||  c  >=  'A'  &&  c  <  =  'Z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'A'    &&    c    <    =    'Z')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  String  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign.   ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  String  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign.   ");  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	String  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign.   ");	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
17	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
18	[BUG]  [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign "  +  intLen);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign "  +  intLen);  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign "  +  intLen);	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign   ",    intLen);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  ':')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  if(c!=  '-'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '-'  ||  c  ==  ':')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '-'  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  if(c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
22	[BUG]  [BUGGY]  if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
23	[BUG]  [BUGGY]  if(c  >=  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  'e'  ||  c  ==  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  'e'  ||  c  ==  'E')  {	  if(c!=    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
25	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
26	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
27	[BUG]  [BUGGY]  if(c!=  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
28	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  if(c!=  '0'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '0'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '0'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c    >=    '0'    &&    c    <    =    '9'    ||    c    >=    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
30	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '.'  ||  c  ==  ',')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
31	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
32	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  ',')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c!=  ',')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c!=  ',')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
33	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
34	[BUG]  [BUGGY]  if(c!=  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
35	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c!=  '.')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c!=  '.')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c!=  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
36	[BUG]  [BUGGY]  String  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign   ");  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  String  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign   ");  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	String  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign   ");	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign       ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '0'  ||  c  <  =  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '0'  ||  c  <  =  '9')  {	  if(c    >=    '0'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
38	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
40	[BUG]  [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
41	[BUG]  [BUGGY]  if(c  <  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  'e'  ||  c  ==  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  'e'  ||  c  ==  'E')  {	  if(c    <    'e'    ||    c    >    'E')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  if(c  <  'e'  ||  c  >=  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  'e'  ||  c  >=  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  'e'  ||  c  >=  'E')  {	  if(c    <    'e'    ||    c    >    'E')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >  'e')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    >=    'e')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  <  =  'e')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  <  =  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  <  =  'e')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    >=    'e')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'e')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    >=    'e')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '.'  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  <  =  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  <  =  '9')  {	  if(c    >=    '0'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
50	[BUG]  [BUGGY]  if(c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
52	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
53	[BUG]  [BUGGY]  if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
54	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  <  '9')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  <  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  <  '9')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  if(outPtr  ==  _inputEnd)  {  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(outPtr  ==  _inputEnd)  {  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(outPtr  ==  _inputEnd)  {  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
58	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '-')  {	  if(c    ==    '-'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  <  =  '9'  ||  c  >=  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  ||  c  <  =  '9'  ||  c  >=  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  ||  c  <  =  '9'  ||  c  >=  'e')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    >=    'e')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
61	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  '9')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  ||  c  ==  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  ||  c  ==  '9')  {	  if(c    >=    '0'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
63	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ',')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ',')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
64	[BUG]  [BUGGY]  if(c  <  'e'  ||  c  >  'E'  ||  c  <  'a'  ||  c  >  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  'e'  ||  c  >  'E'  ||  c  <  'a'  ||  c  >  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  'e'  ||  c  >  'E'  ||  c  <  'a'  ||  c  >  'z')  {	  if(c    <    'e'    ||    c    >    'E')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
65	[BUG]  [BUGGY]  if(c  <  'e'  ||  c  >  'E'  ||  c  <  'A'  ||  c  >  'Z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  'e'  ||  c  >  'E'  ||  c  <  'A'  ||  c  >  'Z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  'e'  ||  c  >  'E'  ||  c  <  'A'  ||  c  >  'Z')  {	  if(c    <    'e'    ||    c    >    'E')    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
67	[BUG]  [BUGGY]  if(c  <  'e'  ||  c  >  'E'  ||  c  >=  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  'e'  ||  c  >  'E'  ||  c  >=  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  'e'  ||  c  >  'E'  ||  c  >=  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  Char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign. ");  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  Char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign. ");  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	Char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign. ");	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign.   ");    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  >=  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  >=  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  ||  c  >  '9'  ||  c  >=  'e')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    >=    'e')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
70	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
71	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
72	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
73	[BUG]  [BUGGY]  if(c  ==  '+'  ||  c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '+'  ||  c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '+'  ||  c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
74	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'A'  &&  c  <  =  'Z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'A'    &&    c    <    =    'Z')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  ':')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  ':')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  'n'  ||  c  ==  't'  ||  c  ==  'r')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  if(c  ==  '+'  ||  c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '+'  ||  c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '+'  ||  c  ==  '-')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
79	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {  outPtr  =  _textBuffer.finishCurrentSegment();  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
80	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {  outPtr  =  _textBuffer.finishCurrentSegment();  return  true;  }	  if(c    ==    '-'    ||    c    ==    '+')    {    outPtr    =    _textBuffer.finishCurrentSegment();    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
81	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  ||  c  >  '9'  ||  c  <  =  '9')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  ||  c  >  '9'  ||  c  <  =  '9')  {	  if(c    <    '0'    ||    c    >    '9'    ||    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c    ==    '0'    &&    c    <    =    '9'    ||    c    ==    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c!=    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  if(c  >=  '0'  &&  c  <  =  '9'  ||  c  >  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  >=  '0'  &&  c  <  =  '9'  ||  c  >  'a'  &&  c  <  =  'z')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  >=  '0'  &&  c  <  =  '9'  ||  c  >  'a'  &&  c  <  =  'z')  {	  if(c    >=    '0'    &&    c    <    =    '9'    ||    c    >=    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
85	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int  outPtr  =  0;  if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");      [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1388	1388	1	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
