bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.'  ||  c  ==  ',')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
2	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  ',')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c!=  ',')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c!=  ',')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
3	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
4	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
5	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
6	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c!=  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c!=  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
7	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  JsonToken.END_ARRAY;	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
8	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
9	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
10	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
11	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
12	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  fractLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
17	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  JsonToken.END_OBJECT;	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
19	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NULL;	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
22	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    'e')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  if(c  <  =  INT_0  ||  c  >  INT_9)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  =  INT_0  ||  c  >  INT_9)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  =  INT_0  ||  c  >  INT_9)  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_10)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_10)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_10)  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
28	[BUG]  [BUGGY]  if(c  >  INT_9  ||  c  <  INT_0)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  >  INT_9  ||  c  <  INT_0)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  >  INT_9  ||  c  <  INT_0)  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(outPtr    >=    outBuf.length)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
30	[BUG]  [BUGGY]  OutputBuffer  outBuf[outPtr++]  =  c;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  OutputBuffer  outBuf[outPtr++]  =  c;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	OutputBuffer  outBuf[outPtr++]  =  c;	  if(outPtr    >=    outBuf.length)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
31	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  '.')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  '.')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  '.')  {  outBuf[outPtr++]  =  c;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    ==    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
32	[BUG]  [BUGGY]  if(c  <  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  outBuf.length)  {	  if(outPtr    <    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_STRING;	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
34	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
36	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
37	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  endPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  endPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  endPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
38	[BUG]  [BUGGY]  if(outPtr  >=  startPtr)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  startPtr)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  startPtr)  {	  if(outPtr    >=    outputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
39	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
43	[BUG]  [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.')  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(outPtr    >=    outBuf.length)    {    if(c!=    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
44	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
45	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentSegment()  -  startPtr;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentSegment()  -  startPtr;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.finishCurrentSegment()  -  startPtr;	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
49	[BUG]  [BUGGY]  char  outPtr  =  _textBuffer.finishCurrentSegment();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  char  outPtr  =  _textBuffer.finishCurrentSegment();  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	char  outPtr  =  _textBuffer.finishCurrentSegment();	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
50	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
51	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  c  =  _inputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  c  =  _inputBuffer[_inputPtr++];  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  c  =  _inputBuffer[_inputPtr++];  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
52	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
53	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
54	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '+')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  '.'  ||  c  >  '+')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  '.'  ||  c  >  '+')  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
55	[BUG]  [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf[outPtr++])  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
57	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
58	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
59	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    INT_0)    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
60	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    INT_0)    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
61	[BUG]  [BUGGY]  int  outPtr  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _inputBuffer[_inputPtr++]  &  0xff;	  int    outPtr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
62	[BUG]  [BUGGY]  char  outPtr  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  char  outPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	char  outPtr  =  _inputBuffer[_inputPtr++];	  int    outPtr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
63	[BUG]  [BUGGY]  int  outPtr  =  _outputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _outputBuffer[_inputPtr++];  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _outputBuffer[_inputPtr++];	  int    outPtr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
64	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
65	[BUG]  [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	String  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	Character  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  if(negate  ==  0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(negate  ==  0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(negate  ==  0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
68	[BUG]  [BUGGY]  if(negate!=  0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(negate!=  0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(negate!=  0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
69	[BUG]  [BUGGY]  if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
70	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
71	[BUG]  [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  c;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(outPtr    >=    outBuf[outPtr++])    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
72	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
73	[BUG]  [BUGGY]  if(c  ==  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  outBuf.length)  {	  if(outPtr    ==    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c!=    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
75	[BUG]  [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c!=    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
76	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT  ||  c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT  ||  c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  JsonToken.VALUE_NUMBER_INT  ||  c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf[outPtr++])  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    'e')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
79	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  _inputEnd)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  _inputEnd)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
80	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  &&(outPtr  +  fractLen)>  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  &&(outPtr  +  fractLen)>  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  &&(outPtr  +  fractLen)>  outBuf.length)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
81	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  _outputEnd)  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  _outputEnd)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  _outputEnd)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
82	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  c)  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  c)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  c)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
83	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c);  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c);	  outBuf[outPtr++]    =    c;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
84	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
86	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
87	[BUG]  [BUGGY]  if(outPtr  >=  inputEnd)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  inputEnd)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  inputEnd)  {	  if(outPtr    >=    outputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
88	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf[outPtr++])    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
89	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
90	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
91	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_STRING)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  JsonToken.VALUE_STRING)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  JsonToken.VALUE_STRING)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentSegment(startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentSegment(startPtr);  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.finishCurrentSegment(startPtr);	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
93	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentLength();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentLength();  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.finishCurrentLength();	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
94	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentOffset();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentOffset();  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.finishCurrentOffset();	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
95	[BUG]  [BUGGY]  if(outPtr  >=  outputEnd  ||(outPtr  +  fractLen)>  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outputEnd  ||(outPtr  +  fractLen)>  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outputEnd  ||(outPtr  +  fractLen)>  outBuf.length)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
96	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  outputEnd)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  outputEnd)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  ||(outPtr  +  fractLen)>  outputEnd)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
97	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
99	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
100	[BUG]  [BUGGY]  if(c  <  INT_0)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
101	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c!=    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
102	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
103	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
104	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c!=  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c!=  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c!=  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c!=    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
105	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
106	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
107	[BUG]  [BUGGY]  if(negate  ==  0)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(negate  ==  0)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(negate  ==  0)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
108	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
109	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '0'  ||  c  ==  '9')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '0'  ||  c  ==  '9')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '0'  ||  c  ==  '9')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
110	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '9')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  '.'  ||  c  >  '9')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  '.'  ||  c  >  '9')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  if(c!=  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
114	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  ','  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  ','  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
115	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
116	[BUG]  [BUGGY]  if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
117	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
118	[BUG]  [BUGGY]  if(c  <  INT_0)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  c;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    ==    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
119	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
120	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
121	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
122	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
123	[BUG]  [BUGGY]  if(c!=  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    INT_0)    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
124	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  '+')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
125	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
126	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
127	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '9')  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  '.'  ||  c  >  '9')  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  '.'  ||  c  >  '9')  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c    ==    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
128	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
129	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  intLen);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  intLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  intLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
130	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    'e')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  OutputStream  outBuf  =  _outputBuffer[outPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  OutputStream  outBuf  =  _outputBuffer[outPtr++];  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	OutputStream  outBuf  =  _outputBuffer[outPtr++];	  if(outPtr    >=    outBuf.length)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
132	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(outPtr    >=    outBuf.length)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
133	[BUG]  [BUGGY]  if(c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
134	[BUG]  [BUGGY]  if(c!=  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
135	[BUG]  [BUGGY]  if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
136	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
137	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    ==    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
138	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c!=    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
139	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '9')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  '.'  ||  c  >  '9')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  '.'  ||  c  >  '9')  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
140	[BUG]  [BUGGY]  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
141	[BUG]  [BUGGY]  if(c!=  INT_0)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  INT_0)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  INT_0)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
142	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(outPtr    >=    outBuf.length)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
143	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c);  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c);	  outBuf[outPtr++]    =    c;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
144	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
145	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
146	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
147	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
148	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.'    ||    c    ==    'e')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
149	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
150	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
151	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
152	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
153	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
154	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
155	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentSegment(_inputBuffer,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.finishCurrentSegment(_inputBuffer,  startPtr);  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.finishCurrentSegment(_inputBuffer,  startPtr);	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
156	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.startCurrentSegment();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.startCurrentSegment();  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.startCurrentSegment();	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
157	[BUG]  [BUGGY]  int  outPtr  =  _textBuffer.endCurrentSegment();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  int  outPtr  =  _textBuffer.endCurrentSegment();  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	int  outPtr  =  _textBuffer.endCurrentSegment();	  int    outPtr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
158	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
159	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
160	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
161	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
162	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(outPtr!=  '.')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(outPtr!=  '.')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length)  {  if(outPtr!=  '.')  {  outBuf[outPtr++]  =  c;  }	  if(outPtr    >=    outBuf.length)    {    if(c!=    '.')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
163	[BUG]  [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(outPtr    >=    outBuf[outPtr++])    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
164	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
165	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
166	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
167	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_STRING)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  JsonToken.VALUE_STRING)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  JsonToken.VALUE_STRING)  {  outBuf[outPtr++]  =  c;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
168	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.END_OBJECT)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.END_OBJECT;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
169	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {	  if(outPtr    ==    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
170	[BUG]  [BUGGY]  if(c!=  INT_0)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  INT_0)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  INT_0)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
171	[BUG]  [BUGGY]  Integer  outPtr  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  Integer  outPtr  =  _inputBuffer[_inputPtr++];  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	Integer  outPtr  =  _inputBuffer[_inputPtr++];	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
172	[BUG]  [BUGGY]  if(c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.')  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.')  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
173	[BUG]  [BUGGY]  if(c  >=  INT_0  ||  c  ==  INT_9)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  >=  INT_0  ||  c  ==  INT_9)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  >=  INT_0  ||  c  ==  INT_9)  {	  if(c    <    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
174	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
175	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  len)>  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  len)>  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  ||(outPtr  +  len)>  outBuf.length)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
176	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  length)>  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length  ||(outPtr  +  length)>  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(outPtr  >=  outBuf.length  ||(outPtr  +  length)>  outBuf.length)  {	  if(outPtr    >=    outBuf.length    ||(outPtr    +    fractLen)>    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
177	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    '+')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
178	[BUG]  [BUGGY]  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  INT_0  ||  c  ==  INT_9)  {  return  _handleInvalidNumberStart(c,  fractLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
179	[BUG]  [BUGGY]  if(c!=  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c!=  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  fractLen);  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c!=  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  fractLen);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    INT_0    ||    c    ==    INT_9)    {    return    _handleInvalidNumberStart(c,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
180	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
181	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
182	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
183	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
184	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outputBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outputBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }  [BUGGY]      outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1417	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outputBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
