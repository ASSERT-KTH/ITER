bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(inputPtr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(inputPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(inputPtr);	  int    fractLen    =    _parseFloat(ptr);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
2	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(ptr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(ptr);	  int    fractLen    =    _parseFloat(ptr);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
3	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg);	  int    fractLen    =    _parseFloat(ptr);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
4	[BUG]  [BUGGY]  if(inputLen  >  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseNumber2(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
5	[BUG]  [BUGGY]  if(inputLen  <  =  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseNumber2(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  '.')  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  '.')  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  '.')  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseNumber2(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
7	[BUG]  [BUGGY]  if(inputLen  >=  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >=  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >=  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseNumber2(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
8	[BUG]  [BUGGY]  final  int  fractLen  =  _parseInt(inputLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseInt(inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseInt(inputLen);	  final    int    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
9	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(ptr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(ptr);	  final    int    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
10	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(inputPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(inputPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(inputPtr);	  final    int    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
11	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(neg);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(neg);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(neg);	  final    int    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  if(inputLen  <  =  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(inputLen  ==  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  ==  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  ==  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  if(inputLen  >=  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >=  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >=  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  final  int  fractLen  =  _decodedData.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _decodedData.length  -  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _decodedData.length  -  1;	  final    int    fractLen    =    _decodedData.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
16	[BUG]  [BUGGY]  final  int  fractLen  =  _decodedData.length  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _decodedData.length  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _decodedData.length  +  1;	  final    int    fractLen    =    _decodedData.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
17	[BUG]  [BUGGY]  final  int  fractLen  =  _decodedData.length  -  2;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _decodedData.length  -  2;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _decodedData.length  -  2;	  final    int    fractLen    =    _decodedData.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
18	[BUG]  [BUGGY]  final  int  fractLen  =  _decodedData.length  -  4;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _decodedData.length  -  4;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _decodedData.length  -  4;	  final    int    fractLen    =    _decodedData.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
19	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr,  fractLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(neg,  startPtr,  fractLen);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
20	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr,  0);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr,  0);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(neg,  startPtr,  0);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
21	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(neg,  startPtr  +  1);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
22	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(inputLen,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(inputLen,  startPtr);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
23	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputBuffer.length  -  1;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  startPtr;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  startPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputBuffer.length  -  startPtr;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  2;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  2;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputBuffer.length  -  2;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputBuffer.length  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputBuffer.length  +  1;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(ptr,  inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(ptr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(ptr,  inputLen);	  int    fractLen    =    _parseFloat(inputLen,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
28	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(startPtr,  ptr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(startPtr,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(startPtr,  ptr);	  int    fractLen    =    _parseFloat(inputLen,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
29	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(inputLen,  ptr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(inputLen,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(inputLen,  ptr);	  int    fractLen    =    _parseFloat(inputLen,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
30	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ptr,  inputLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(ptr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(ptr,  inputLen);	  int    fractLen    =    _parseFloat(inputLen,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
31	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(neg,  startPtr,  ptr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(neg,  startPtr,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(neg,  startPtr,  ptr);	  float    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
32	[BUG]  [BUGGY]  double  fractLen  =  _parseFloat(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  double  fractLen  =  _parseFloat(neg,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	double  fractLen  =  _parseFloat(neg,  startPtr);	  float    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
33	[BUG]  [BUGGY]  long  fractLen  =  _parseFloat(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  long  fractLen  =  _parseFloat(neg,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	long  fractLen  =  _parseFloat(neg,  startPtr);	  float    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  int  fractLen  =  ptr  -  startPtr;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  ptr  -  startPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  ptr  -  startPtr;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
35	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd  -  startPtr  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputEnd  -  startPtr  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputEnd  -  startPtr  +  1;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
36	[BUG]  [BUGGY]  int  fractLen  =  neg  -  startPtr;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  neg  -  startPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  neg  -  startPtr;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ptr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(ptr);	  int    fractLen    =    _parseInt(inputLen);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  if(inputLen  >  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    ==    '.')    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
40	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  '.')  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  '.')  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  '.')  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
41	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  final  int  fractLen  =  _inputStart  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _inputStart  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _inputStart  +  1;	  final    int    fractLen    =    _inputStart;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
43	[BUG]  [BUGGY]  final  int  fractLen  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _inputBuffer.length;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _inputBuffer.length;	  final    int    fractLen    =    _inputStart;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
44	[BUG]  [BUGGY]  if(inputLen  >  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  if(inputLen  <  =  Integer.MIN_VALUE)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  Integer.MIN_VALUE)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  Integer.MIN_VALUE)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
46	[BUG]  [BUGGY]  if(inputLen  ==  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  ==  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  ==  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  if(inputLen  <  =  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  0)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(inputLen,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(inputLen,  startPtr);	  int    fractLen    =    _parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
49	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(startPtr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(startPtr,  inputLen);	  int    fractLen    =    _parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
51	[BUG]  [BUGGY]  final  int  fractLen  =  _inputEnd  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _inputEnd  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _inputEnd  +  1;	  final    int    fractLen    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr  +  1,  ptr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr  +  1,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr  +  1,  ptr);	  int    fractLen    =    _parseFloat(neg,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(neg,  startPtr  +  1);	  int    fractLen    =    _parseFloat(neg,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
54	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(neg,  startPtr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(neg,  startPtr  +  1);	  int    fractLen    =    _parseFloat(neg,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
55	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr,  neg);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr,  neg);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr,  ptr,  neg);	  int    fractLen    =    _parseFloat(neg,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr,  ptr  +  1);	  int    fractLen    =    _parseFloat(neg,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  ptr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(neg,  startPtr,  ptr);	  int    fractLen    =    _parseFloat(neg,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr);	  final    int    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  final  int  fractLen  =  _parseInt(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseInt(neg,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseInt(neg,  startPtr);	  final    int    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(neg,  startPtr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(neg,  startPtr  +  1);	  final    int    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(inputLen,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(inputLen,  startPtr);	  final    int    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd  -  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputEnd  -  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputEnd  -  1;	  int    fractLen    =    _inputEnd    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(inputLen  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(inputLen  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(inputLen  +  1);	  int    fractLen    =    _parseFloat(inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
64	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(inputPtr  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(inputPtr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(inputPtr  +  1);	  int    fractLen    =    _parseFloat(inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(inputLen  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(inputLen  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(inputLen  +  1);	  int    fractLen    =    _parseFloat(inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
66	[BUG]  [BUGGY]  final  int  fractLen  =  _inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _inputPtr  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _inputPtr  +  1;	  final    int    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
67	[BUG]  [BUGGY]  float  fractLen  =  _parseInt(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseInt(neg,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseInt(neg,  startPtr);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  char  fractLen  =  _parseInt(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  char  fractLen  =  _parseInt(neg,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	char  fractLen  =  _parseInt(neg,  startPtr);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr,  fractLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  ptr  =  _parseInt(neg,  startPtr,  fractLen);	  int    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
70	[BUG]  [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  ptr  =  _parseInt(neg,  startPtr  +  1);	  int    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
71	[BUG]  [BUGGY]  int  ptr  =  _parseInt(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  ptr  =  _parseInt(inputLen,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  ptr  =  _parseInt(inputLen,  startPtr);	  int    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
72	[BUG]  [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr,  0);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr,  0);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  ptr  =  _parseInt(neg,  startPtr,  0);	  int    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
73	[BUG]  [BUGGY]  fractLen  =  0;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  fractLen  =  0;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	fractLen  =  0;	  double    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  final  double  fractLen  =  0;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  double  fractLen  =  0;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  double  fractLen  =  0;	  double    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
75	[BUG]  [BUGGY]  int  fractLen  =  _inputStart  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputStart  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputStart  +  1;	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  double  fractLen  =  _parseFloat(inputLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  double  fractLen  =  _parseFloat(inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	double  fractLen  =  _parseFloat(inputLen);	  float    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
77	[BUG]  [BUGGY]  long  fractLen  =  _parseFloat(inputLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  long  fractLen  =  _parseFloat(inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	long  fractLen  =  _parseFloat(inputLen);	  float    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
78	[BUG]  [BUGGY]  final  int  fractLen  =  _symbols.length  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _symbols.length  -  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _symbols.length  -  1;	  final    int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  final  int  fractLen  =  _symbols.length  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _symbols.length  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _symbols.length  +  1;	  final    int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
80	[BUG]  [BUGGY]  final  int  fractLen  =  _symbols.length  -  2;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _symbols.length  -  2;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _symbols.length  -  2;	  final    int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  double  fractLen  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  double  fractLen  =  _inputPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	double  fractLen  =  _inputPtr;	  float    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
82	[BUG]  [BUGGY]  float  fractLen  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _inputEnd;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _inputEnd;	  float    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
83	[BUG]  [BUGGY]  long  fractLen  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  long  fractLen  =  _inputPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	long  fractLen  =  _inputPtr;	  float    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
84	[BUG]  [BUGGY]  Integer  fractLen  =  0;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  fractLen  =  0;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  fractLen  =  0;	  long    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  final  int  fractLen  =  _inputEnd  -  startPtr;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _inputEnd  -  startPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _inputEnd  -  startPtr;	  final    int    fractLen    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
86	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr  +  1,  inputLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr  +  1,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr  +  1,  inputLen);	  int    fractLen    =    _parseFloat(neg,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr  -  _inputEnd;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputPtr  -  _inputEnd;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputPtr  -  _inputEnd;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
88	[BUG]  [BUGGY]  int  fractLen  =  inputLen  -  startPtr;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  inputLen  -  startPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  inputLen  -  startPtr;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
89	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(inputPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(inputPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(inputPtr);	  int    fractLen    =    _parseFloat(inputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
90	[BUG]  [BUGGY]  if(inputLen  >  startPtr)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  startPtr)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  startPtr)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    ==    '.')    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  if(inputLen  >  startPtr)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  startPtr)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  startPtr)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    ==    '.')    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  if(inputLen  >=  0)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >=  0)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >=  0)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    ==    '.')    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
93	[BUG]  [BUGGY]  final  int  fractLen  =  _decodedData.length  -  startPtr;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _decodedData.length  -  startPtr;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _decodedData.length  -  startPtr;	  final    int    fractLen    =    _decodedData.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
94	[BUG]  [BUGGY]  final  int  fractLen  =  _decodedData.length  -  inputLen;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _decodedData.length  -  inputLen;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _decodedData.length  -  inputLen;	  final    int    fractLen    =    _decodedData.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
95	[BUG]  [BUGGY]  if(inputLen  >  0)  {  if(ch  ==  '.')  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  0)  {  if(ch  ==  '.')  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  0)  {  if(ch  ==  '.')  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
96	[BUG]  [BUGGY]  int  fractLen  =  inputLen  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  inputLen  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  inputLen  +  1;	  int    fractLen    =    _inputEnd    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
97	[BUG]  [BUGGY]  if(inputLen  >  startPtr)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  startPtr)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  startPtr)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  if(inputLen  >=  0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >=  0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >=  0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
99	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(inputLen,  ptr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(inputLen,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(inputLen,  ptr);	  int    fractLen    =    _parseInt(inputLen);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
100	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(inputLen,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(inputLen,  startPtr);	  int    fractLen    =    _parseInt(inputLen);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
101	[BUG]  [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  ptr  =  _parseInt(neg,  startPtr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  ptr  =  _parseInt(neg,  startPtr,  inputLen);	  int    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
102	[BUG]  [BUGGY]  char  ptr  =  _parseInt(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  char  ptr  =  _parseInt(neg,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	char  ptr  =  _parseInt(neg,  startPtr);	  int    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
103	[BUG]  [BUGGY]  final  int  fractLen  =  inputLen;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  inputLen;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  inputLen;	  final    int    fractLen    =    _inputStart;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
104	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(inputLen  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(inputLen  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(inputLen  +  1);	  final    int    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(inputLen,  ptr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(inputLen,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(inputLen,  ptr);	  final    int    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  float  fractLen  =  _inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _inputPtr  +  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _inputPtr  +  1;	  float    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
107	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr  +  1];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputBuffer[_inputPtr  +  1];	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
108	[BUG]  [BUGGY]  long  fractLen  =  0L;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  long  fractLen  =  0L;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	long  fractLen  =  0L;	  long    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(neg,  startPtr,  inputLen);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
110	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr  +  inputLen);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr  +  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(neg,  startPtr  +  inputLen);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
111	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr  -  startPtr);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  Integer  ptr  =  _parseInt(neg,  startPtr  -  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	Integer  ptr  =  _parseInt(neg,  startPtr  -  startPtr);	  Integer    ptr    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
112	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(inputPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(inputPtr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(inputPtr,  inputLen);	  int    fractLen    =    _parseFloat(inputLen,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
113	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr,  inputLen);	  int    fractLen    =    _parseFloat(neg,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
114	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseInt(neg,  startPtr,  inputLen);	  int    fractLen    =    _parseFloat(neg,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
115	[BUG]  [BUGGY]  if(inputLen  >  startPtr)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  startPtr)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  startPtr)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseNumber2(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
116	[BUG]  [BUGGY]  if(inputLen  >=  0)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >=  0)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >=  0)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
117	[BUG]  [BUGGY]  if(inputLen  >  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
118	[BUG]  [BUGGY]  if(inputLen  <  =  0)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  0)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  0)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
119	[BUG]  [BUGGY]  if(inputLen  ==  0)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  ==  0)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  ==  0)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
120	[BUG]  [BUGGY]  final  int  fractLen  =(_symbols!=  null)?  0  :  _symbols.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =(_symbols!=  null)?  0  :  _symbols.length;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =(_symbols!=  null)?  0  :  _symbols.length;	  final    int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
121	[BUG]  [BUGGY]  double  fractLen  =  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  double  fractLen  =  1;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	double  fractLen  =  1;	  double    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
122	[BUG]  [BUGGY]  if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
125	[BUG]  [BUGGY]  if(neg  >  INT_0)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg  >  INT_0)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg  >  INT_0)  {  if(ch  ==  '.')  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
126	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  inputLen;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  inputLen;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputBuffer.length  -  inputLen;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
127	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr  +  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _inputPtr  +  2;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _inputPtr  +  2;	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
128	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(ptr  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(ptr  +  1);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(ptr  +  1);	  int    fractLen    =    _parseFloat(inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
129	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr,  inputLen);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr,  ptr,  inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr,  ptr,  inputLen);	  int    fractLen    =    _parseFloat(neg,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  final  int  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);	  final    int    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
131	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(ptr,  startPtr);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(ptr,  startPtr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(ptr,  startPtr);	  int    fractLen    =    _parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
132	[BUG]  [BUGGY]  final  int  fractLen  =(_symbols!=  null)?  _symbols.length  :  _symbols.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  final  int  fractLen  =(_symbols!=  null)?  _symbols.length  :  _symbols.length;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	final  int  fractLen  =(_symbols!=  null)?  _symbols.length  :  _symbols.length;	  final    int    fractLen    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
133	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(inputLen,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(inputLen,  fractLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(inputLen,  fractLen);	  float    fractLen    =    _parseFloat(inputLen);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
134	[BUG]  [BUGGY]  double  fractLen  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  double  fractLen  =  _inputEnd;  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	double  fractLen  =  _inputEnd;	  double    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
135	[BUG]  [BUGGY]  float  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);	  float    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
136	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr  +  1);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr  +  1);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr  +  1);  }	  if(ptr    >=    inputLen)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
137	[BUG]  [BUGGY]  float  fractLen  =  _parseInt(inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  float  fractLen  =  _parseInt(inputLen);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	float  fractLen  =  _parseInt(inputLen);	  int    fractLen    =    _parseInt(inputLen);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
138	[BUG]  [BUGGY]  if(inputLen  <  inputLen)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  inputLen)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  inputLen)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
139	[BUG]  [BUGGY]  if(inputLen  >=  inputLen)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  >=  inputLen)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  >=  inputLen)  {  if(ptr  >=  startPtr)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    startPtr)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
140	[BUG]  [BUGGY]  if(neg)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
141	[BUG]  [BUGGY]  if(neg  >  INT_0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg  >  INT_0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg  >  INT_0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
142	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
143	[BUG]  [BUGGY]  if(neg  ||  ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(neg  ||  ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(neg  ||  ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(inputPtr,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseFloat(inputPtr,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
144	[BUG]  [BUGGY]  if(inputLen  <  =  INT_9)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  INT_9)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  INT_9)  {  if(ptr  >=  inputLen)  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
145	[BUG]  [BUGGY]  if(inputLen  ==  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  ==  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  ==  0)  {  if(ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    ==    '.')    {    if(ptr    >=    inputLen)    {    return    _parseNumber2(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
146	[BUG]  [BUGGY]  if(inputLen  <  =  0)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  if(inputLen  <  =  0)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	if(inputLen  <  =  0)  {  if(ch  ==  '.')  {  return  _parseFloat(neg,  startPtr);  }	  if(ptr    >=    inputLen)    {    if(ch    ==    '.')    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
147	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(inputPtr,  ptr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;      [BUGGY]  int  fractLen  =  _parseFloat(inputPtr,  ptr);  [BUGGY]        if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1259	1259	1	replace	int  fractLen  =  _parseFloat(inputPtr,  ptr);	  int    fractLen    =    _parseFloat(inputLen,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
