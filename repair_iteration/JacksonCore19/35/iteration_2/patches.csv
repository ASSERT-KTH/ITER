bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  outBuf[outPtr++]  =  '-';  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  outBuf[outPtr++]  =  '-';  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	outBuf[outPtr++]  =  '-';  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  _inputBuffer[outPtr++]  =  '-';  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _inputBuffer[outPtr++]  =  '-';  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_inputBuffer[outPtr++]  =  '-';  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  outBuf[outPtr++]  =  '-';  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  outBuf[outPtr++]  =  '-';  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	outBuf[outPtr++]  =  '-';	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  _outputBuffer[outPtr++]  =  '-';  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _outputBuffer[outPtr++]  =  '-';  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_outputBuffer[outPtr++]  =  '-';	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _inputPtr  =  _inputBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_inputPtr  =  _inputBuffer.finishCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  _inputPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _inputPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_inputPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  if(outPtr  >=  startPtr)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  startPtr)  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  startPtr)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  ':')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  ':')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c!=  ':')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c!=  ':')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c!=  ':')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  '-')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '-'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
16	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd  ||!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
17	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr  &&!loadMore())  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  startPtr  &&!loadMore())  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  startPtr  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  if(outPtr  ==  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  ==  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  ==  outBuf.length)  {	  if(outPtr    >=    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(outPtr  <  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  <  outBuf.length)  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  <  outBuf.length)  {	  if(outPtr    >=    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <  =  '+')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '0'  &&  c  <  =  '+')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  &&  c  <  =  '+')  {	  if(c    ==    '0'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
25	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '0'  &&  c  ==  '+')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  &&  c  ==  '+')  {	  if(c    ==    '0'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
26	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  ||  c  ==  '+'  ||  c  ==  '-')  {	  if(c    ==    '0'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  if(outPtr  <  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  <  _inputEnd)  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  <  _inputEnd)  {	  if(_inputPtr    <    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
28	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_inputPtr    >=    _inputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
29	[BUG]  [BUGGY]  if(_inputPtr  ==  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  ==  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  ==  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_inputPtr    >=    _inputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
30	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_inputPtr    >=    _inputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
31	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
32	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
33	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '+')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr  +  1))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr  +  1))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr  +  1))  {	  if(_inputPtr    >=    _inputEnd    &&!Character.isDigit(_inputBuffer,    startPtr))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
36	[BUG]  [BUGGY]  if(outPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr))  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr))  {	  if(_inputPtr    >=    _inputEnd    &&!Character.isDigit(_inputBuffer,    startPtr))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
37	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr  &&!Character.isDigit(_inputBuffer,  _inputPtr))  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  startPtr  &&!Character.isDigit(_inputBuffer,  _inputPtr))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  startPtr  &&!Character.isDigit(_inputBuffer,  _inputPtr))  {	  if(_inputPtr    >=    _inputEnd    &&!Character.isDigit(_inputBuffer,    startPtr))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
38	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _inputPtr  =  _inputBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_inputPtr  =  _inputBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
40	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer.getCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _inputPtr  =  _inputBuffer.getCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_inputPtr  =  _inputBuffer.getCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign. ");  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign. ");  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign. ");	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign       ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  char[]  outBuf  =  _textBuffer.getCurrentSegment();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char[]  outBuf  =  _textBuffer.getCurrentSegment();  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char[]  outBuf  =  _textBuffer.getCurrentSegment();	  char[]    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  char[]  outBuf  =  _textBuffer.endSegment();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char[]  outBuf  =  _textBuffer.endSegment();  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char[]  outBuf  =  _textBuffer.endSegment();	  char[]    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  char[]  outBuf  =  _textBuffer.endPtr();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char[]  outBuf  =  _textBuffer.endPtr();  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char[]  outBuf  =  _textBuffer.endPtr();	  char[]    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'A')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'A')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'A')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'A')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c!=  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'A')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  }  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  inputEnd)  {  outBuf[outPtr++]  =  '-';  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  inputEnd)  {  outBuf[outPtr++]  =  '-';  }  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  inputEnd)  {  outBuf[outPtr++]  =  '-';  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	_textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
52	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr  &&!Character.isDigit(_inputBuffer,  _inputEnd))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  startPtr  &&!Character.isDigit(_inputBuffer,  _inputEnd))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  startPtr  &&!Character.isDigit(_inputBuffer,  _inputEnd))  {	  if(_inputPtr    >=    _inputEnd    &&!Character.isDigit(_inputBuffer,    startPtr))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
53	[BUG]  [BUGGY]  if(outPtr  >=  outputEnd)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  outputEnd)  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  outputEnd)  {	  if(outPtr    >=    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
55	[BUG]  [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign ",  intLen);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign ",  intLen);  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign ",  intLen);	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign       ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
56	[BUG]  [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign ",  startPtr);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign ",  startPtr);  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign ",  startPtr);	  char    c    =(_inputPtr    <    _inputEnd)?    _inputBuffer[_inputPtr++]    :    getNextChar(   "No    digit    following    minus    sign       ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment(outPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment(outPtr);  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment(outPtr);	  char[]    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment()  +  1;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment()  +  1;  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment()  +  1;	  char[]    outBuf    =    _textBuffer.emptyAndGetCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  if(_inputPtr  >=  endPtr)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  endPtr)  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  endPtr)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ',')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ',')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  outBuf.length)  {  if(_inputPtr  >=  inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '+')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '+')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
64	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '-'  ||  c  =='<  ')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  =='<  ')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
65	[BUG]  [BUGGY]  if(outPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(outPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_inputPtr    >=    _inputEnd    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
66	[BUG]  [BUGGY]  if(c  ==  '0'  &&  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '0'  &&  c  <  =  '9')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  &&  c  <  =  '9')  {	  if(c    ==    '0'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ':')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
69	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A'  ||  c  ==  'E')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  OutputBuffer  outBuf[outPtr++]  =  '-';  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  OutputBuffer  outBuf[outPtr++]  =  '-';  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	OutputBuffer  outBuf[outPtr++]  =  '-';	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ':')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    '+'    ||    c    ==    ':')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
74	[BUG]  [BUGGY]  if(_inputPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(_inputPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    '-';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [BUGGY]      outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(     "No  digit  following  minus  sign     ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'A')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
