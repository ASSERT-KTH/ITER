bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  <  _inputEnd)  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  <  _inputEnd)  {	  if(_inputPtr    ==    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign   ");  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign   ");  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	char  c  =(_inputPtr  <  _inputEnd)?  _inputBuffer[_inputPtr++]  :  getNextChar( "No  digit  following  minus  sign   ");	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
4	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  }  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(outPtr  >=  outBuf.length)  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(outPtr  >=  outBuf.length)  {	  if(_inputPtr    >=    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  if(_inputPtr  ==  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  ==  outBuf.length)  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  ==  outBuf.length)  {	  if(_inputPtr    >=    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  startPtr)  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  startPtr)  {	  if(outPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  '+')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  '0'  ||  c  ==  '+')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '0'  ||  c  ==  '+')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  '-')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'A')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ':')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '-'  ||  c  ==  '+'  ||  c  ==  ':')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  }  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(_inputPtr  <  outBuf.length)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  <  outBuf.length)  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  <  outBuf.length)  {	  if(_inputPtr    >=    outBuf.length)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  '-';  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr))  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  _inputEnd  &&!Character.isDigit(_inputBuffer,  startPtr))  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(_inputPtr  >=  inputEnd)  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(_inputPtr  >=  inputEnd)  {	  if(outPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  _inputPtr  =  neg  ?  (startPtr+1)  :  startPtr;  char[]  outBuf  =  _textBuffer.emptyAndGetCurrentSegment();  int  outPtr  =  0;      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  [BUGGY]    outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }  boolean  eof  =  false;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1381	1381	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {	  if(c    ==    '-'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
