bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer.length  -  1;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  startPtr;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  startPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer.length  -  startPtr;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer[_inputPtr++];	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  char  fractLen  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =  _inputBuffer.length;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =  _inputBuffer.length;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  String  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  String  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	String  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  char    fractLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
6	[BUG]  [BUGGY]  Character  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Character  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Character  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  char    fractLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
7	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  break  fract_loop;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  break  fract_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  break  fract_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
8	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  int_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  int_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
9	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  break  fract_loop;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  break  fract_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  break  fract_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd  -  startPtr  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputEnd  -  startPtr  +  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputEnd  -  startPtr  +  1;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
11	[BUG]  [BUGGY]  char  fractLen  =  _inputEnd  -  startPtr;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =  _inputEnd  -  startPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =  _inputEnd  -  startPtr;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr  -  startPtr  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputPtr  -  startPtr  +  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputPtr  -  startPtr  +  1;	  int    fractLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr  -  _inputEnd;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputPtr  -  _inputEnd;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputPtr  -  _inputEnd;	  int    fractLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr++]  -  startPtr;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr++]  -  startPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer[_inputPtr++]  -  startPtr;	  int    fractLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  char  fractLen  =(_inputPtr  <  len)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =(_inputPtr  <  len)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =(_inputPtr  <  len)?  0  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    <    len)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  int  fractLen  =(_inputPtr  >=  len)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =(_inputPtr  >=  len)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =(_inputPtr  >=  len)?  0  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    <    len)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  char  fractLen  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =  _inputBuffer[_inputPtr++];	  char    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  String  fractLen  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  String  fractLen  =  _inputPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	String  fractLen  =  _inputPtr;	  char    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  char  fractLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    <    _inputEnd)?    1    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  int  fractLen  =(_inputPtr  >=  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =(_inputPtr  >=  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =(_inputPtr  >=  _inputEnd)?  1  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    <    _inputEnd)?    1    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  -  _inputPtr;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer.length  -  _inputPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer.length  -  _inputPtr;	  int    fractLen    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
22	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr++]  -  _inputEnd;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr++]  -  _inputEnd;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer[_inputPtr++]  -  _inputEnd;	  int    fractLen    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
23	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
26	[BUG]  [BUGGY]  fractLen  =  0;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  fractLen  =  0;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	fractLen  =  0;	  String    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
27	[BUG]  [BUGGY]  fractLen  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  fractLen  =  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	fractLen  =  _inputBuffer[_inputPtr++];	  String    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
28	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  c  =  _inputBuffer[outPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	c  =  _inputBuffer[outPtr++];	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
32	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
33	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
34	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
35	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(ch  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
36	[BUG]  [BUGGY]  if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
37	[BUG]  [BUGGY]  Char  fractLen  =  Character.toLowerCase(c);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Char  fractLen  =  Character.toLowerCase(c);  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Char  fractLen  =  Character.toLowerCase(c);	  Char    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  Char  fractLen  =  Character.toLowerCase(_inputPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Char  fractLen  =  Character.toLowerCase(_inputPtr);  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Char  fractLen  =  Character.toLowerCase(_inputPtr);	  Char    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  char  fractLen  =  _inputEnd  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =  _inputEnd  +  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =  _inputEnd  +  1;	  char    fractLen    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  String  fractLen  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  String  fractLen  =  _inputEnd;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	String  fractLen  =  _inputEnd;	  char    fractLen    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
41	[BUG]  [BUGGY]  String  fractLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  String  fractLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	String  fractLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[_inputPtr++];	  char    fractLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  Character  fractLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Character  fractLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Character  fractLen  =(_inputPtr  <  inputLen)?  0  :  _inputBuffer[_inputPtr++];	  char    fractLen    =(_inputPtr    <    inputLen)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer.length  +  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer.length  +  1;	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr  +  1];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBuffer[_inputPtr  +  1];	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  int  fractLen  =  _inputBufferPtr  +  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputBufferPtr  +  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputBufferPtr  +  1;	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	String  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Character  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
48	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  char  fractLen  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =(_inputPtr  >=  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    >=    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  int  fractLen  =(_inputPtr  >>  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =(_inputPtr  >>  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =(_inputPtr  >>  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    >=    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  c  =  outBuf[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  c  =  outBuf[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	c  =  outBuf[_inputPtr++];	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  c  =  _inputBuffer[0];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  c  =  _inputBuffer[0];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	c  =  _inputBuffer[0];	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
58	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd  -  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputEnd  -  _inputBuffer.length;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputEnd  -  _inputBuffer.length;	  int    fractLen    =    _inputEnd    -    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
59	[BUG]  [BUGGY]  int  fractLen  =(_inputPtr  >  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =(_inputPtr  >  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =(_inputPtr  >  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    >=    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  int  fractLen  =(_inputPtr  +  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =(_inputPtr  +  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =(_inputPtr  +  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    >=    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  fract_loop;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  fract_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  fract_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
62	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  fract_loop;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  fract_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  break  fract_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  Char  fractLen  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Char  fractLen  =  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Char  fractLen  =  _inputBuffer[_inputPtr++];	  Char    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  Char  fractLen  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Char  fractLen  =  _inputPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Char  fractLen  =  _inputPtr;	  Char    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
67	[BUG]  [BUGGY]  neg  =  _handleInvalidNumberStart(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  neg  =  _handleInvalidNumberStart(neg,  startPtr);  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	neg  =  _handleInvalidNumberStart(neg,  startPtr);	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
68	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr  +  2;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputPtr  +  2;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputPtr  +  2;	  int    fractLen    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
69	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr  *  startPtr;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputPtr  *  startPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputPtr  *  startPtr;	  int    fractLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
70	[BUG]  [BUGGY]  char  fractLen  =  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  char  fractLen  =  _inputBuffer[_inputPtr];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	char  fractLen  =  _inputBuffer[_inputPtr];	  char    fractLen    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputEnd  -  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputEnd  -  1;	  int    fractLen    =    _inputEnd    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  int  fractLen  =  _inputEnd  -  _inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputEnd  -  _inputPtr  +  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputEnd  -  _inputPtr  +  1;	  int    fractLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
73	[BUG]  [BUGGY]  int  c  =  _inputBuffer[outPtr++];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  c  =  _inputBuffer[outPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  c  =  _inputBuffer[outPtr++];	  int    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
76	[BUG]  [BUGGY]  negate  =  _handleInvalidNumberStart(negate,  startPtr);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  negate  =  _handleInvalidNumberStart(negate,  startPtr);  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	negate  =  _handleInvalidNumberStart(negate,  startPtr);	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
77	[BUG]  [BUGGY]  fractLen  =  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  fractLen  =  1;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	fractLen  =  1;	  String    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
78	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.'  ||  c  ==  '+')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.'  ||  c  ==  '+')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.'  ||  c  ==  '+')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
79	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
80	[BUG]  [BUGGY]  int  fractLen  =  _inputPtr.length;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =  _inputPtr.length;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =  _inputPtr.length;	  int    fractLen    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  break  fract_loop;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  break  fract_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  break  fract_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
82	[BUG]  [BUGGY]  if(offset  ==  len)  {  if(!loadMore())  {  break  fract_loop;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(offset  ==  len)  {  if(!loadMore())  {  break  fract_loop;  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(offset  ==  len)  {  if(!loadMore())  {  break  fract_loop;  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    break    fract_loop;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
83	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
85	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(ch,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
86	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
87	[BUG]  [BUGGY]  fractLen  =  _inputPtr;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  fractLen  =  _inputPtr;  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	fractLen  =  _inputPtr;	  String    fractLen    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
88	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
89	[BUG]  [BUGGY]  Char  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  Char  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	Char  fractLen  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  char    fractLen    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  int  fractLen  =(_inputPtr  <  inputLen)?  1  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }      [BUGGY]  int  fractLen  =(_inputPtr  <  inputLen)?  1  :  _inputBuffer[_inputPtr++];  [BUGGY]        if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1415	1415	1	replace	int  fractLen  =(_inputPtr  <  inputLen)?  1  :  _inputBuffer[_inputPtr++];	  int    fractLen    =(_inputPtr    <    _inputEnd)?    1    :    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
