bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  '.';  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  '.';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  '.';	  c    =    _inputBuffer[_inputPtr++]    +    '.';    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  c  =  _textBuffer[_inputPtr++]  +  '.';  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer[_inputPtr++]  +  '.';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer[_inputPtr++]  +  '.';	  c    =    _inputBuffer[_inputPtr++]    +    '.';    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  c  =  _textBuffer.length[outPtr++];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.length[outPtr++];  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.length[outPtr++];	  c    =    _textBuffer[outPtr++];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  &  0xff;	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  CHAR_NULL;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  CHAR_NULL;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  &  CHAR_NULL;	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
6	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0x7f;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0x7f;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  &  0x7f;	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
7	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  +  CHAR_NUMBER;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  +  CHAR_NUMBER;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  +  CHAR_NUMBER;	  c    =    _inputBuffer[_inputPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
8	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd,  fractLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd,  fractLen);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd,  fractLen);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    _inputEnd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr++,  _inputEnd);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr++,  _inputEnd);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  outPtr++,  _inputEnd);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    _inputEnd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	_textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
13	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
14	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outBuf[outPtr++]);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outBuf[outPtr++]);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outBuf[outPtr++]);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
16	[BUG]  [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
17	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c!=  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr  +  1);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  outPtr  +  1);	  c    =    Character.toLowerCase(_inputBuffer,    outPtr++);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  CSV  c  =  _textBuffer.finishCurrentSegment();  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  CSV  c  =  _textBuffer.finishCurrentSegment();  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	CSV  c  =  _textBuffer.finishCurrentSegment();	  c    =    _textBuffer.finishCurrentSegment()    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  1;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  1;	  outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
21	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(negate)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
24	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen  +  1);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen  +  1);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen,  neg);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen,  neg);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen,  neg);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr++,  fractLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr++,  fractLen);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  outPtr++,  fractLen);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
28	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumber  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumber  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumber	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
29	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
30	[BUG]  [BUGGY]  if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
31	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
32	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr  +  1);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.finishCurrentSegment(outPtr  +  1);	  c    =    _textBuffer.finishCurrentSegment(outPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment(startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.finishCurrentSegment(startPtr);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.finishCurrentSegment(startPtr);	  c    =    _textBuffer.finishCurrentSegment(outPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr,  outPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr,  outPtr);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.finishCurrentSegment(outPtr,  outPtr);	  c    =    _textBuffer.finishCurrentSegment(outPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  endPtr++,  _inputEnd);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  endPtr++,  _inputEnd);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  endPtr++,  _inputEnd);	  c    =    Character.toLowerCase(_inputBuffer,    endPtr++);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  off,  fractLen++);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  off,  fractLen++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  off,  fractLen++);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
37	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr,  startPtr++);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr,  startPtr++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  outPtr,  startPtr++);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
38	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  off);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  off);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr,  off);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
39	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  fractLen++);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  fractLen++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr,  fractLen++);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  char_char;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  char_char;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  char_char;	  c    =    _inputBuffer[outPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
41	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  char_bits;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  char_bits;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  char_bits;	  c    =    _inputBuffer[outPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
42	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  if(outPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(outPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(outPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  <  '.'  ||  c  >  '9')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  <  '.'  ||  c  >  '9')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  <  '.'  ||  c  >  '9')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
45	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
46	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c!=  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c!=  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
47	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  fractLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  fractLen);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  fractLen);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  neg);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  neg);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  neg);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  /  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  /  2;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  /  2;	  c    =    _inputBuffer[_inputPtr++]    +    2;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
50	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  2;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  2;	  c    =    _inputBuffer[outPtr++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  4;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  4;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  4;	  c    =    _inputBuffer[outPtr++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  5;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  5;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  5;	  c    =    _inputBuffer[outPtr++]    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  if(_textBuffer!=  null)  {  outBuf  =  _textBuffer.finishCurrentSegment();  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_textBuffer!=  null)  {  outBuf  =  _textBuffer.finishCurrentSegment();  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_textBuffer!=  null)  {  outBuf  =  _textBuffer.finishCurrentSegment();  }	  outBuf    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
54	[BUG]  [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment(outPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment(outPtr);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	outBuf  =  _textBuffer.finishCurrentSegment(outPtr);	  outBuf    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
55	[BUG]  [BUGGY]  c  =  CHAR_NULL  +  _inputBuffer[_inputPtr++]  +  '.';  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  CHAR_NULL  +  _inputBuffer[_inputPtr++]  +  '.';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  CHAR_NULL  +  _inputBuffer[_inputPtr++]  +  '.';	  c    =    _inputBuffer[_inputPtr++]    +    '.';    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
56	[BUG]  [BUGGY]  if(_textBuffer!=  null)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_textBuffer!=  null)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_textBuffer!=  null)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  OutputStream  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  OutputStream  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	OutputStream  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
59	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
60	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outBuf,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outBuf,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  outBuf,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
61	[BUG]  [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment()  +  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment()  +  1;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	outBuf  =  _textBuffer.finishCurrentSegment()  +  1;	  outBuf    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
62	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  +  char_buffer;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  +  char_buffer;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  +  char_buffer;	  c    =    _inputBuffer[_inputPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
63	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  &  0;	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
64	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  &  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  &  1;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  &  1;	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
65	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  endPtr  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  endPtr  +  1);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  endPtr  +  1);	  c    =    Character.toLowerCase(_inputBuffer,    endPtr++);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
66	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr,  startPtr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr,  startPtr);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.finishCurrentSegment(outPtr,  startPtr);	  c    =    _textBuffer.finishCurrentSegment(outPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
67	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
68	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
69	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  startPtr)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  outPtr);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  outPtr);	  c    =    Character.toLowerCase(_inputBuffer,    outPtr++);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
71	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  eof;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  eof;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  eof;	  c    =    _inputBuffer[outPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  char_buffer;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  char_buffer;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  char_buffer;	  c    =    _inputBuffer[outPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  >=  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  >=  '.'  ||  c  ==  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
74	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  *  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  *  2;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  *  2;	  c    =    _inputBuffer[_inputPtr++]    +    2;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
75	[BUG]  [BUGGY]  c  =  _textBuffer[outPtr++]  =  CHAR_NULL;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer[outPtr++]  =  CHAR_NULL;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer[outPtr++]  =  CHAR_NULL;	  c    =    _textBuffer[outPtr++];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
77	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  _inputEnd);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  _inputEnd);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr  +  1,  _inputEnd);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  c  =  Character.toUpperCase(_inputBuffer,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toUpperCase(_inputBuffer,  startPtr  +  1);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toUpperCase(_inputBuffer,  startPtr  +  1);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  _inputEnd++);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  _inputEnd++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr,  _inputEnd++);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
80	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  _inputEnd);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  _inputEnd);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr,  _inputEnd);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
81	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  outPtr++);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr,  outPtr++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr,  outPtr++);	  c    =    Character.toLowerCase(_inputBuffer,    off,    startPtr++);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
82	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd,  _bufferRecyclable);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd,  _bufferRecyclable);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd,  _bufferRecyclable);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    _inputEnd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputStart);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputStart);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputStart);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    _inputEnd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd  +  1);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd  +  1);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  _inputEnd  +  1);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    _inputEnd);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
85	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
86	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
87	[BUG]  [BUGGY]  c  =  Character.toUpperCase(_inputBuffer,  outPtr++);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toUpperCase(_inputBuffer,  outPtr++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toUpperCase(_inputBuffer,  outPtr++);	  c    =    Character.toLowerCase(_inputBuffer,    outPtr++);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_textBuffer,  outPtr++);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_textBuffer,  outPtr++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_textBuffer,  outPtr++);	  c    =    Character.toLowerCase(_inputBuffer,    outPtr++);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen,  _inputEnd);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen,  _inputEnd);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  Character.toLowerCase(_inputBuffer,  startPtr++,  fractLen,  _inputEnd);	  c    =    Character.toLowerCase(_inputBuffer,    startPtr++,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
90	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  +  ',';  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  +  ',';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  +  ',';	  c    =    _inputBuffer[_inputPtr++]    +    '.';    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
91	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.'  ||  c  ==  'a'  &&  c  <  =  'z')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
93	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
95	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(c    ==    '.')    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
97	[BUG]  [BUGGY]  if(c  <  =  '.'  ||  c  >  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  <  =  '.'  ||  c  >  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  <  =  '.'  ||  c  >  '9')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(c    <    '.'    ||    c    >    '9')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
98	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  '.';  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  '.';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  &  '.';	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
99	[BUG]  [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0xFF;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[_inputPtr++]  &  0xFF;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[_inputPtr++]  &  0xFF;	  c    =    _inputBuffer[_inputPtr++]    &    1;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
100	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
101	[BUG]  [BUGGY]  if(eof)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(eof)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(eof)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
102	[BUG]  [BUGGY]  c  =  _textBuffer.endPtr++;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.endPtr++;  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.endPtr++;	  c    =    _textBuffer[outPtr++];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  c  =  _inputBuffer.length[_inputPtr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer.length[_inputPtr++];  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer.length[_inputPtr++];	  c    =    _textBuffer.length[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
104	[BUG]  [BUGGY]  c  =  _textBuffer.endPtr(_inputPtr++);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.endPtr(_inputPtr++);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.endPtr(_inputPtr++);	  c    =    _textBuffer.length[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
105	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  ',';  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  ',';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  ',';	  c    =    _inputBuffer[outPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
106	[BUG]  [BUGGY]  c  =  _inputBuffer[outPtr++]  +  'n';  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _inputBuffer[outPtr++]  +  'n';  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _inputBuffer[outPtr++]  +  'n';	  c    =    _inputBuffer[outPtr++]    +    CHAR_NULL;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
107	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr  +  1,  outPtr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.finishCurrentSegment(outPtr  +  1,  outPtr);  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.finishCurrentSegment(outPtr  +  1,  outPtr);	  c    =    _textBuffer.finishCurrentSegment(outPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  c  =  _textBuffer.getCurrentSegment();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  c  =  _textBuffer.getCurrentSegment();  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	c  =  _textBuffer.getCurrentSegment();	  c    =    _textBuffer.endCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
109	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStar  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStar  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStar	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
110	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStart	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
111	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStar  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStar  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _handleInvalidNumberStar	  if(_inputPtr    >=    _inputEnd)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
113	[BUG]  [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }      [BUGGY]  if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }  [BUGGY]      }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1408	1408	1	replace	if(c!=  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  _inputBuffer,  outPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(c,    _inputBuffer,    outPtr);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
