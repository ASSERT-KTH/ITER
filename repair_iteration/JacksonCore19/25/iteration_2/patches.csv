bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer);	  outBuf[outPtr++]    =    Character.toLowerCase(_inputBuffer,    c);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
2	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  fractLen);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  fractLen);	  outBuf[outPtr++]    =    Character.toLowerCase(_inputBuffer,    c);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
3	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  c,  fractLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  c,  fractLen);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  c,  fractLen);	  outBuf[outPtr++]    =    Character.toLowerCase(_inputBuffer,    c);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
4	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  _inputBuffer);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  _inputBuffer);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  _inputBuffer);	  outBuf[outPtr++]    =    Character.toLowerCase(_inputBuffer,    c);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
5	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  len  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  len  +  1);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  len  +  1);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  if(negated)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(negated)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(negated)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  endPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  endPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  endPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  outBuf[outputPtr++]  =  ','  +  fractLen;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outputPtr++]  =  ','  +  fractLen;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outputPtr++]  =  ','  +  fractLen;	  outBuf[outputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
10	[BUG]  [BUGGY]  outBuf[_inputPtr++]  =  '0';  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[_inputPtr++]  =  '0';  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[_inputPtr++]  =  '0';	  outBuf[_inputPtr++]    =    'n';    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  fractLen  +  1);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  fractLen  +  1);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  fractLen,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  fractLen,  fractLen);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  fractLen,  fractLen);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(negate  ==  0)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(negate  ==  0)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(negate  ==  0)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  startPtr)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  startPtr)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  startPtr)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	Character  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	String  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  null);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  null);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(c,  null);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    null);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
19	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  neg);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  neg);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  neg);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    null);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
20	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }	  outBuf[_inputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(_inputBuffer[_inputPtr++]);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(_inputBuffer[_inputPtr++]);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(_inputBuffer[_inputPtr++]);  }	  outBuf[_inputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  outBuf[_inputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  '.';  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  '.';  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  '.';  }	  outBuf[_inputPtr++]    =    '.';    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  outBuf[_inputPtr++]    =    '.';    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  outBuf[outPtr++]  =  '0'  +  c;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  '0'  +  c;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  '0'  +  c;	  outBuf[outPtr++]    =    '0';    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
26	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
27	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
29	[BUG]  [BUGGY]  outBuf[outPtr++]  =  ','  +  fract_len;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  ','  +  fract_len;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  ','  +  fract_len;	  outBuf[outPtr++]    =    ','    +    fractLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  outBuf[_inputPtr++]  =  ','  +  fractLen;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[_inputPtr++]  =  ','  +  fractLen;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[_inputPtr++]  =  ','  +  fractLen;	  outBuf[outPtr++]    =    ','    +    fractLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
32	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
33	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  intLen);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  intLen);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
34	[BUG]  [BUGGY]  outBuf[_inputPtr++]  =  ','  +  c;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[_inputPtr++]  =  ','  +  c;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[_inputPtr++]  =  ','  +  c;	  outBuf[outPtr++]    =    ','    +    c;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  outBuf[outPtr++]  =  ','  +  c.charAt(c);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  ','  +  c.charAt(c);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  ','  +  c.charAt(c);	  outBuf[outPtr++]    =    ','    +    c;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  startPtr  +  1);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  startPtr  +  1);	  outBuf[outPtr++]    =    Character.toUpperCase(c,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  fractLen  +  1);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  fractLen  +  1);	  outBuf[outPtr++]    =    Character.toUpperCase(c,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  fractLen,  len);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  fractLen,  len);	  outBuf[outPtr++]    =    Character.toUpperCase(c,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
40	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
41	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
45	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  endPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  endPtr);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  endPtr);	  outBuf[outPtr++]    =    Character.toUpperCase(c,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++],  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++],  fractLen);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++],  fractLen);	  outBuf[outPtr++]    =    Character.toUpperCase(_inputBuffer[_inputPtr++]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
47	[BUG]  [BUGGY]  outBuf[_inputPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++]);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[_inputPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++]);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[_inputPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++]);	  outBuf[outPtr++]    =    Character.toUpperCase(_inputBuffer[_inputPtr++]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
48	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(startPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    null);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
51	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    null);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
52	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
53	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  startPtr  +  1);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  startPtr  +  1);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
54	[BUG]  [BUGGY]  int  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  int  c  =  _inputBuffer[_inputPtr++];  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	int  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  c  =  _inputBuffer[_inputPtr++];  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++]  &  0xfff);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++]  &  0xfff);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++]  &  0xfff);	  outBuf[outPtr++]    =    Character.toUpperCase(_inputBuffer[_inputPtr++]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
58	[BUG]  [BUGGY]  outBuf[outputPtr++]  =  '0';  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outputPtr++]  =  '0';  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outputPtr++]  =  '0';	  outBuf[outPtr++]    =    '0';    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
59	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
60	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr  +  1);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
61	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  intLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  intLen);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  intLen);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  outBuf[outputPtr++]  =  ':';  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outputPtr++]  =  ':';  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outputPtr++]  =  ':';	  outBuf[outputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  outBuf[outPtr++]  =  ','  +  c  +  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  ','  +  c  +  1;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  ','  +  c  +  1;	  outBuf[outPtr++]    =    ','    +    c;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
65	[BUG]  [BUGGY]  outBuf[outPtr++]  =  ','  +  intLen;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  ','  +  intLen;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  ','  +  intLen;	  outBuf[outPtr++]    =    ','    +    c;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  intLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  intLen);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  intLen);	  outBuf[outPtr++]    =    Character.toUpperCase(c,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  _inputPtr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  _inputPtr);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  _inputPtr);	  outBuf[outPtr++]    =    Character.toLowerCase(_inputBuffer,    c);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
68	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  c,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  c,  startPtr);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toLowerCase(_inputBuffer,  c,  startPtr);	  outBuf[outPtr++]    =    Character.toLowerCase(_inputBuffer,    c);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
69	[BUG]  [BUGGY]  outBuf[outPtr++]  =  ','  +  fractLen  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  ','  +  fractLen  +  1;  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  ','  +  fractLen  +  1;	  outBuf[outPtr++]    =    ','    +    fractLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
70	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
71	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
74	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(neg  >  startPtr)  {  if(_inputPtr  >=  _inputEnd)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  startPtr)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(startPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
79	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr,  fractLen);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
82	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
83	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(negated)  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  outBuf[_inputPtr++]    =    '.';    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  outBuf[_inputPtr++]    =    '.';    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(negatedData,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(negatedData,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  '.';  }  else  {  return  _handleInvalidNumberStart(negatedData,  startPtr);  }	  outBuf[_inputPtr++]    =    '.';    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++],  c);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++],  c);  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outBuf[outPtr++]  =  Character.toUpperCase(_inputBuffer[_inputPtr++],  c);	  outBuf[outPtr++]    =    Character.toUpperCase(_inputBuffer[_inputPtr++]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
89	[BUG]  [BUGGY]  if(c  ==  '.')  {  c  =  _inputBuffer[_inputPtr++];  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  c  =  _inputBuffer[_inputPtr++];  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  c  =  _inputBuffer[_inputPtr++];  }	  c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  outputBuffer[outputPtr++]  =  '.';  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  outputBuffer[outputPtr++]  =  '.';  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	outputBuffer[outputPtr++]  =  '.';	  outBuf[outputPtr++]    =    '.';    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
91	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
92	[BUG]  [BUGGY]  if(negated)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(negated)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(negated)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(_inputBuffer,  _inputPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(_inputBuffer,    _inputPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
93	[BUG]  [BUGGY]  Char  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  Char  c  =  _inputBuffer[_inputPtr++];  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	Char  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
94	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
95	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  else  {  return  _handleInvalidNumberStart(neg,  startPtr);  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ';';  }	  outBuf[_inputPtr++]    =    ';';    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  outBuf[_inputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
99	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(ch,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(ch,  startPtr);  }	  outBuf[_inputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
100	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(negate);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(negate);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  outBuf[_inputPtr++]  =  ',';  }  else  {  return  _handleInvalidNumberStart(negate);  }	  outBuf[_inputPtr++]    =    ',';    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  INT_0)  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
102	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
103	[BUG]  [BUGGY]  if(negate  >  0)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(negate  >  0)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(negate  >  0)  {  if(c  ==  '.')  {  return  _handleInvalidNumberStart(negate,  startPtr);  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    return    _handleInvalidNumberStart(negate,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    null);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
105	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      c  =  _inputBuffer[_inputPtr++];  }  if  (intLen  ==  0)  {  return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction      [BUGGY]  if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }  [BUGGY]        fract_loop:  while  (true)  {  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  eof  =  true;  break  fract_loop;  }  c  =  _inputBuffer[_inputPtr++];  if  (c  <  INT_0  ||  c  >  INT_9)  {  break  fract_loop;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1418	1418	1	replace	if(c  ==  '.')  {  if(!loadMore())  {  return  _handleInvalidNumberStart(c,  null);  }	  if(_inputPtr    >=    _inputEnd)    {    if(!loadMore())    {    return    _handleInvalidNumberStart(c,    null);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
