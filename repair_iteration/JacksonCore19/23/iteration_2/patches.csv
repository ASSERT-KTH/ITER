bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(inputLen,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(inputLen,  startPtr);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(neg,  startPtr,  fractLen);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  ptr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr,  ptr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(neg,  startPtr,  ptr);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  Float)?(float)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  Float)?(float)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  Float)?(float)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  float)?(float)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  float)?(float)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  float)?(float)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  byte)?(byte)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  byte)?(byte)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  byte)?(byte)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ch,  startPtr,  fractLen);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr  +  1);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ch,  startPtr  +  1);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr,  ptr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr,  ptr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ch,  startPtr,  ptr);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  fractLen  =(int)Math.floor(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =(int)Math.floor(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =(int)Math.floor(_inputBuffer,  startPtr,  fractLen);	  int    fractLen    =(int)Math.floor(_inputBuffer,    _inputPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  float  fractLen  =(float)Math.floor(_inputBuffer,  _inputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  float  fractLen  =(float)Math.floor(_inputBuffer,  _inputPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	float  fractLen  =(float)Math.floor(_inputBuffer,  _inputPtr,  fractLen);	  int    fractLen    =(int)Math.floor(_inputBuffer,    _inputPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  char  fractLen  =(char)Math.floor(_inputBuffer,  _inputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  char  fractLen  =(char)Math.floor(_inputBuffer,  _inputPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	char  fractLen  =(char)Math.floor(_inputBuffer,  _inputPtr,  fractLen);	  int    fractLen    =(int)Math.floor(_inputBuffer,    _inputPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  Integer  fractLen  =  _parseFloat(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseFloat(inputLen,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseFloat(inputLen,  startPtr);	  Integer    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  Integer  fractLen  =  _parseInt(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseInt(inputLen,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseInt(inputLen,  startPtr);	  Integer    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
15	[BUG]  [BUGGY]  Integer  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseFloat(neg,  startPtr,  fractLen);	  Integer    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  ch  =  _parseFloat(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =  _parseFloat(neg,  startPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =  _parseFloat(neg,  startPtr,  fractLen);	  ch    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  ch  =  _parseFloat(inputLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =  _parseFloat(inputLen,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =  _parseFloat(inputLen,  startPtr);	  ch    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  ch  =  _parseFloat(ptr,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =  _parseFloat(ptr,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =  _parseFloat(ptr,  startPtr);	  ch    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  ch  =  _parseFloat(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =  _parseFloat(neg,  startPtr  +  1);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =  _parseFloat(neg,  startPtr  +  1);	  ch    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  char)?((  char)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  char)?((  char)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  char)?((  char)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  Float)?((  Float)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  Float)?((  Float)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  Float)?((  Float)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  JsonToken)?((  JsonToken)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  JsonToken)?((  JsonToken)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  JsonToken)?((  JsonToken)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  String)?((  String)_inputBuffer[ptr++]):  null;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  String)?((  String)_inputBuffer[ptr++]):  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  String)?((  String)_inputBuffer[ptr++]):  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
24	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ch  ==  '.')  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ch  ==  '.')  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    i++)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    i++)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  start  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  start  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  start	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    i++)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  ch  =(_char)_inputBuffer[0];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_char)_inputBuffer[0];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_char)_inputBuffer[0];	  ch    =(_char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  ch  =(_char)_inputBuffer[startPtr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_char)_inputBuffer[startPtr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_char)_inputBuffer[startPtr++];	  ch    =(_char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  Integer  fractLen  =  _parseInt(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseInt(neg,  startPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseInt(neg,  startPtr,  fractLen);	  Integer    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  Integer  fractLen  =  _parseInt(ch,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseInt(ch,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseInt(ch,  startPtr);	  Integer    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  ch  =(char)_inputBuffer[1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(char)_inputBuffer[1];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(char)_inputBuffer[1];	  ch    =(char)_inputBuffer[startPtr++];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  ch  =(char)_inputBuffer[0],  fractLen;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(char)_inputBuffer[0],  fractLen;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(char)_inputBuffer[0],  fractLen;	  ch    =(char)_inputBuffer[0];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    ++i)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ch  ==  '.')  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ch  ==  '.')  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    ++i)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    ++i)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  float)?(float)_inputBuffer[ptr++]  :(float)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  float)?(float)_inputBuffer[ptr++]  :(float)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  float)?(float)_inputBuffer[ptr++]  :(float)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  Float)?(float)_inputBuffer[ptr++]  :(float)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  Float)?(float)_inputBuffer[ptr++]  :(float)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  Float)?(float)_inputBuffer[ptr++]  :(float)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  byte)?(byte)_inputBuffer[ptr++]  :(byte)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  byte)?(byte)_inputBuffer[ptr++]  :(byte)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  byte)?(byte)_inputBuffer[ptr++]  :(byte)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
39	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    i++)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    i++)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  Integer  fractLen  =  _parseInt(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseInt(neg,  startPtr  +  1);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseInt(neg,  startPtr  +  1);	  Integer    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  Integer  fractLen  =  _parseInt(ptr,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseInt(ptr,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseInt(ptr,  startPtr);	  Integer    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ch,  inputLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ch,  inputLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ch,  inputLen);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ch,  outputPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ch,  outputPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ch,  outputPtr);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
45	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  null)?((  String)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  null)?((  String)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  ==  null)?((  String)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]!=  null)?((  String)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]!=  null)?((  String)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]!=  null)?((  String)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  Integer  fractLen  =  _parseFloat(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseFloat(neg,  startPtr  +  1);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseFloat(neg,  startPtr  +  1);	  Integer    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  Integer  fractLen  =  _parseFloat(ptr,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  Integer  fractLen  =  _parseFloat(ptr,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	Integer  fractLen  =  _parseFloat(ptr,  startPtr);	  Integer    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    ++i)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(neg,  startPtr  +  1);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(neg,  startPtr  +  1);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ptr,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ptr,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ptr,  startPtr);	  int    fractLen    =    _parseInt(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  ch  =(byte)_inputBuffer[0];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(byte)_inputBuffer[0];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(byte)_inputBuffer[0];	  ch    =(char)_inputBuffer[0];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]!=  ')'?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]!=  ')'?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]!=  ')'?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
54	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  ')'?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  ')'?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  ==  ')'?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]!=  null)?(char)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]!=  null)?(char)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]!=  null)?(char)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
56	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  ')'?(char)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  ')'?(char)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  ==  ')'?(char)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]!=  char)?(char)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]!=  char)?(char)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]!=  char)?(char)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  '.')?(char)_inputBuffer[ptr++]  :  null;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  '.')?(char)_inputBuffer[ptr++]  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  ==  '.')?(char)_inputBuffer[ptr++]  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  ch  =(_int)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_int)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_int)_inputBuffer[ptr++];	  ch    =(_char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr,  neg);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseInt(ch,  startPtr,  neg);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseInt(ch,  startPtr,  neg);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  char  fractLen  =  _parseInt(ch,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  char  fractLen  =  _parseInt(ch,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	char  fractLen  =  _parseInt(ch,  startPtr);	  int    fractLen    =    _parseInt(ch,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =  _parseFloat(neg,  startPtr);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =  _parseFloat(neg,  startPtr);	  Integer    fractLen    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  String)?((  String)_inputBuffer[ptr++]).toString()  :  null;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  instanceof  String)?((  String)_inputBuffer[ptr++]).toString()  :  null;  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  instanceof  String)?((  String)_inputBuffer[ptr++]).toString()  :  null;	  ch    =(_inputBuffer[ptr++]    instanceof    String)?((    String)_inputBuffer[ptr++]    :    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
64	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  '.')?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]  ==  '.')?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]  ==  '.')?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]!=  '.')?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]!=  '.')?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]!=  '.')?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
66	[BUG]  [BUGGY]  ch  =(_inputBuffer[ptr++]!=  char)?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =(_inputBuffer[ptr++]!=  char)?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =(_inputBuffer[ptr++]!=  char)?(char)_inputBuffer[ptr++]  :(char)_inputBuffer[ptr++];	  ch    =(_inputBuffer[ptr++]    instanceof    char)?(char)_inputBuffer[ptr++]    :(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  ch  =  _parseFloat(neg,  startPtr  +  1,  fractLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  ch  =  _parseFloat(neg,  startPtr  +  1,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	ch  =  _parseFloat(neg,  startPtr  +  1,  fractLen);	  ch    =    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
68	[BUG]  [BUGGY]  int  fractLen  =(int)Math.floor(neg,  _inputBuffer,  _inputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  int  fractLen  =(int)Math.floor(neg,  _inputBuffer,  _inputPtr,  fractLen);  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	int  fractLen  =(int)Math.floor(neg,  _inputBuffer,  _inputPtr,  fractLen);	  int    fractLen    =(int)Math.floor(_inputBuffer,    _inputPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  inputLen;  i++)  {  return  _parseFloat(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    i++)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  return  _parseNumber2(neg,  startPtr);  }      [BUGGY]  if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }  [BUGGY]      if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1268	1268	1	replace	if(ch  ==  '.')  {  for(int  i  =  startPtr;  i  <  inputLen;  ++i)  {  return  _parseNumber2(neg,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    for(int    i    =    startPtr;    i    <    inputLen;    ++i)    {    return    _parseFloat(neg,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
