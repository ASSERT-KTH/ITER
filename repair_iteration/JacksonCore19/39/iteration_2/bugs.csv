bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  eof  =  c  ==  '0'  &&  c  <  =  '9';  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  c  ==  '0'  &&  c  <  =  '9';  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  c  ==  '0'  &&  c  <  =  '9';	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  boolean  eof  =  c  ==  '-';  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  c  ==  '-';  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  c  ==  '-';	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  boolean  eof  =  c  ==  '-'  ||  c  ==  '+';  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  c  ==  '-'  ||  c  ==  '+';  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  c  ==  '-'  ||  c  ==  '+';	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  Boolean  eof  =  false;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  Boolean  eof  =  false;  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	Boolean  eof  =  false;	  boolean    eof    =    true;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)||  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);	  boolean    eof    =    isEnabled(Feature.AUTO_CLOSE_SOURCE)&&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS,  c);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS,  c);  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS,  c);	  boolean    eof    =    isEnabled(Feature.AUTO_CLOSE_SOURCE)&&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  c  ==  '-');  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  c  ==  '-');  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  isEnabled(Feature.AUTO_CLOSE_SOURCE)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  c  ==  '-');	  boolean    eof    =    isEnabled(Feature.AUTO_CLOSE_SOURCE)&&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(c  ==  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(c  ==  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(c  ==  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '-'  ||  c  ==  '+')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  boolean  eof  =  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&  isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS  ||  isEnabled(Feature.QUOTE_NON_NUMERIC_	  boolean    eof    =    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS)&&    isEnabled(Feature.QUOTE_NON_NUMERIC_NUMBERS);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(c  ==  '-')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  boolean  eof  =  _tokenIncomplete;  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  _tokenIncomplete;  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  _tokenIncomplete;	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  boolean  eof  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  _inputBuffer[_inputPtr++];  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  _inputBuffer[_inputPtr++];	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  boolean  eof  =  neg;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  neg;  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  neg;	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {  outPtr  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  boolean  eof  =  c  ==  'e'  ||  c  ==  'E');  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  c  ==  'e'  ||  c  ==  'E');  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  c  ==  'e'  ||  c  ==  'E');	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  boolean  eof  =  c  ==  'e'  ||  c  ==  'E';  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    if  (neg)  {  outBuf[outPtr++]  =  '-';  }  int  intLen  =  0;  char  c  =  (_inputPtr  <  _inputEnd)  ?  _inputBuffer[_inputPtr++]  :  getNextChar(   "No  digit  following  minus  sign   ");  if  (c  ==  '0')  {  c  =  _verifyNoLeadingZeroes();  }    [BUGGY]  boolean  eof  =  c  ==  'e'  ||  c  ==  'E';  [BUGGY]      int_loop:  while  (c  >=  '0'  &&  c  <=  '9')  {  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  c;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1391	1391	1	replace	boolean  eof  =  c  ==  'e'  ||  c  ==  'E';	  boolean    eof    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
