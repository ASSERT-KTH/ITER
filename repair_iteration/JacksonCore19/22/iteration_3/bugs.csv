bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr]  &  0xff;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr]  &  0xff;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr]  &  0xff;	  Integer    ptr    =    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr]  &  0xFF;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr]  &  0xFF;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr]  &  0xFF;	  Integer    ptr    =    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
3	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr-1];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr-1];  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr-1];	  Integer    ptr    =    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
4	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentSegment(inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentSegment(inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _textBuffer.finishCurrentSegment(inputLen);	  Integer    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentLength();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentLength();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _textBuffer.finishCurrentLength();	  Integer    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
6	[BUG]  [BUGGY]  if  ((  startPtr  +  fractLen)>  inputLen)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  ((  startPtr  +  fractLen)>  inputLen)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  ((  startPtr  +  fractLen)>  inputLen)  {	  if    ((    startPtr    +    fractLen)    >=    inputLen)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
7	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  startPtr,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(neg,  startPtr,  fractLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(startPtr,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(startPtr,  fractLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(fractLen,  inputLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(fractLen,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(fractLen,  inputLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(inputLen,  fractLen,  neg);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(inputLen,  fractLen,  neg);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(inputLen,  fractLen,  neg);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  '.'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  '.'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
12	[BUG]  [BUGGY]  if(ch!=  '.'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch!=  '.'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch!=  '.'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  INT_0  ||  ch  ==  INT_9)  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
14	[BUG]  [BUGGY]  if(ptr  >=  startPtr  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  startPtr  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  startPtr  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    startPtr    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(false,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(false,  startPtr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(false,  startPtr);	  ((    JsonToken)ch)._parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(fractLen,  startPtr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(fractLen,  startPtr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(fractLen,  startPtr);	  ((    JsonToken)ch)._parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  char  ptr  =  _textBuffer.finishCurrentSegment();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  char  ptr  =  _textBuffer.finishCurrentSegment();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	char  ptr  =  _textBuffer.finishCurrentSegment();	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
18	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.finishCurrentSegment(inputLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.finishCurrentSegment(inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.finishCurrentSegment(inputLen);	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
19	[BUG]  [BUGGY]  if  (ptr  >>  startPtr)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (ptr  >>  startPtr)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (ptr  >>  startPtr)  {	  if    (startPtr    >=    ptr)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  if  (startPtr  >=  inputLen)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (startPtr  >=  inputLen)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (startPtr  >=  inputLen)  {	  if    (startPtr    >=    ptr)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  ==  0)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  ==  0)  {	  if(ptr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    fractLen    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
22	[BUG]  [BUGGY]  if(inputLen  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  >  0)  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(inputLen  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  >  0)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(inputLen  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  >  0)  {	  if(ptr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    fractLen    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  <  =  0)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  <  =  0)  {	  if(ptr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    fractLen    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  fractLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  fractLen);	  Integer    ptr    =    _inputBuffer[ptr++].parseInt(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
25	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  startPtr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  startPtr);	  Integer    ptr    =    _inputBuffer[ptr++].parseInt(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
26	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseFloat(ch);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseFloat(ch);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++].parseFloat(ch);	  Integer    ptr    =    _inputBuffer[ptr++].parseInt(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
27	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  intLen);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  intLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  intLen);	  Integer    ptr    =    _inputBuffer[ptr++].parseInt(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
28	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen,  ptr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen,  ptr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(inputLen,  fractLen,  ptr);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(ch,  inputLen,  fractLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(ch,  inputLen,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(ch,  inputLen,  fractLen);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen,  0);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen,  0);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(inputLen,  fractLen,  0);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(ptr,  inputLen);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(ptr,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(ptr,  inputLen);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  if(inputLen  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(inputLen  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(inputLen  ==  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inputLen    >=    0    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  if(ptr  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inputLen    >=    0    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  '.'  ||  ch  ==  '@')  {	  if(inputLen    >=    0    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(inputLen  >=  fractLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(inputLen  >=  fractLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(inputLen  >=  fractLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    inputLen    -    fractLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  if(inputLen  >=  ptr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(inputLen  >=  ptr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(inputLen  >=  ptr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    inputLen    -    fractLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  if(ptr  >=  inputLen  -  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  inputLen  -  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  inputLen  -  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    inputLen    -    fractLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  String  neg  =(String)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  String  neg  =(String)_inputBuffer[ptr++];  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	String  neg  =(String)_inputBuffer[ptr++];	  char    neg    =(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
39	[BUG]  [BUGGY]  Character  neg  =(Character)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Character  neg  =(Character)_inputBuffer[ptr++];  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Character  neg  =(Character)_inputBuffer[ptr++];	  char    neg    =(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
40	[BUG]  [BUGGY]  Character  neg  =(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Character  neg  =(char)_inputBuffer[ptr++];  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Character  neg  =(char)_inputBuffer[ptr++];	  char    neg    =(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  if  (ptr  >=  fractLen)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (ptr  >=  fractLen)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (ptr  >=  fractLen)  {	  if    (startPtr    >=    fractLen)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if  (inputLen  >=  startPtr)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (inputLen  >=  startPtr)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (inputLen  >=  startPtr)  {	  if    (startPtr    >=    fractLen)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  String  neg  =(String)_inputPtr;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  String  neg  =(String)_inputPtr;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	String  neg  =(String)_inputPtr;	  char    neg    =(char)_inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
44	[BUG]  [BUGGY]  Character  neg  =(Character)_inputPtr;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Character  neg  =(Character)_inputPtr;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Character  neg  =(Character)_inputPtr;	  char    neg    =(char)_inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
45	[BUG]  [BUGGY]  Char  neg  =(char)_inputPtr;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Char  neg  =(char)_inputPtr;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Char  neg  =(char)_inputPtr;	  char    neg    =(char)_inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
46	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
47	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xFF;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xFF;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0xFF;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
48	[BUG]  [BUGGY]  if(ch!=  '.'  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch!=  '.'  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch!=  '.'  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    >=    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
49	[BUG]  [BUGGY]  if  (ptr  ==  inputLen)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (ptr  ==  inputLen)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (ptr  ==  inputLen)  {	  if    (ptr    <    inputLen)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  if(inputLen  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(inputLen  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(inputLen  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(startPtr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  if  (ch  >=  '.')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (ch  >=  '.')  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (ch  >=  '.')  {	  if    (startPtr    >=    ptr)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0x7f;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0x7f;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0x7f;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  startPtr  +  1);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(neg,  startPtr  +  1);	  ((    JsonToken)ch)._parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  startPtr  -  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  startPtr  -  startPtr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(neg,  startPtr  -  startPtr);	  ((    JsonToken)ch)._parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentStart();  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentStart();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _textBuffer.finishCurrentStart();	  Integer    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
56	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.finishCurrentPtr();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.finishCurrentPtr();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.finishCurrentPtr();	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
57	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.finishCurrentLength();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.finishCurrentLength();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.finishCurrentLength();	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
58	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.finishCurrentSegment(startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.finishCurrentSegment(startPtr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.finishCurrentSegment(startPtr);	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
59	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(startPtr,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(startPtr,  inputLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  if((  startPtr  +  fractLen)>  inputEnd)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if((  startPtr  +  fractLen)>  inputEnd)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if((  startPtr  +  fractLen)>  inputEnd)  {	  if    ((    startPtr    +    fractLen)>    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
61	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr  +  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr  +  1];  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr  +  1];	  Integer    ptr    =    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
62	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  inputLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++].parseInt(ch,  inputLen);	  Integer    ptr    =    _inputBuffer[ptr++].parseInt(ch);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
63	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(inputLen    >=    0    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  if(ptr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||!ch.equals(Integer.MIN_VALUE))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||!ch.equals(Integer.MIN_VALUE))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||!ch.equals(Integer.MIN_VALUE))  {	  if(ptr    >=    startPtr    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
65	[BUG]  [BUGGY]  if(ptr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '.')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '.')  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  startPtr  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '.')  {	  if(ptr    >=    startPtr    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
66	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen  +  1);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(inputLen,  fractLen  +  1);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(ch,  inputLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(ch,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(ch,  inputLen);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  if  (startPtr  <  inputLen)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (startPtr  <  inputLen)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (startPtr  <  inputLen)  {	  if    (ptr    <    inputLen)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  if(ch  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(startPtr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(false,  inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(false,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(false,  inputLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(startPtr,  inputLen,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(startPtr,  inputLen,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(startPtr,  inputLen,  fractLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  >  1)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  >  1)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  >  1)  {	  if(ptr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    fractLen    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
73	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  ':'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  ':'  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
74	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  if((  startPtr  +  fractLen)>  inputLen.length)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if((  startPtr  +  fractLen)>  inputLen.length)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if((  startPtr  +  fractLen)>  inputLen.length)  {	  if    ((    startPtr    +    fractLen)    >=    inputLen)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
76	[BUG]  [BUGGY]  if(inputLen  >=  ptr  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(inputLen  >=  ptr  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(inputLen  >=  ptr  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    inputLen    -    fractLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
77	[BUG]  [BUGGY]  if(startPtr  >=  inputLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(startPtr  >=  inputLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(startPtr  >=  inputLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    inputLen    -    fractLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
78	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(ptr,  inputLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(ptr,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(ptr,  inputLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  Char  neg  =(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Char  neg  =(char)_inputBuffer[ptr++];  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Char  neg  =(char)_inputBuffer[ptr++];	  char    neg    =(char)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(inputLen,  fractLen,  intLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(inputLen,  fractLen,  intLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(inputLen,  fractLen,  intLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(_inputBuffer,  startPtr,  fractLen);	  ((    JsonToken)ch)._parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
82	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    >=    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
83	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.getCurrentPtr();  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.getCurrentPtr();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.getCurrentPtr();	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.endCurrentSegment();  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.endCurrentSegment();  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.endCurrentSegment();	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
85	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.finishCurrentSegment(ch);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  ptr  =  _textBuffer.finishCurrentSegment(ch);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  ptr  =  _textBuffer.finishCurrentSegment(ch);	  int    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
86	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(ch,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _parseInt(ch,  startPtr);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _parseInt(ch,  startPtr);	  Integer    ptr    =    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  if  (ptr  <  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (ptr  <  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (ptr  <  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (ptr    <    inputLen)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  if  (ptr  <  inputLen  &&(_inputBuffer[ptr++]  ==  '.'  ||  _inputputEnd  >  '9')&&(ch  <  =  'A'  ||  ch  >  'Z'  ||  ch  >  'Z')&&(ch  <  =  'Z'  ||  ch  >  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  (ptr  <  inputLen  &&(_inputBuffer[ptr++]  ==  '.'  ||  _inputputEnd  >  '9')&&(ch  <  =  'A'  ||  ch  >  'Z'  ||  ch  >  'Z')&&(ch  <  =  'Z'  ||  ch  >  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  (ptr  <  inputLen  &&(_inputBuffer[ptr++]  ==  '.'  ||  _inputputEnd  >  '9')&&(ch  <  =  'A'  ||  ch  >  'Z'  ||  ch  >  'Z')&&(ch  <  =  'Z'  ||  ch  >	  if    (ptr    <    inputLen)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
89	[BUG]  [BUGGY]  if(ch  >=  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  >=  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  >=  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    startPtr    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
90	[BUG]  [BUGGY]  if(ch  ==  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  if(ch!=  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch!=  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch!=  INT_0  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ch    ==    '.'    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
92	[BUG]  [BUGGY]  if  ((  _inputPtr  +  fractLen)>  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if  ((  _inputPtr  +  fractLen)>  _inputEnd)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if  ((  _inputPtr  +  fractLen)>  _inputEnd)  {	  if    ((    startPtr    +    fractLen)>    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
93	[BUG]  [BUGGY]  Integer  ptr  =  _parseInt(ch,  inputLen);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _parseInt(ch,  inputLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _parseInt(ch,  inputLen);	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].intValue;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].intValue;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _inputBuffer[ptr++].intValue;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
95	[BUG]  [BUGGY]  if(ch  >=  '.'  &&  startPtr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  >=  '.'  &&  startPtr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  >=  '.'  &&  startPtr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(startPtr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
96	[BUG]  [BUGGY]  Integer  neg  =(Integer)_inputPtr;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  neg  =(Integer)_inputPtr;  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  neg  =(Integer)_inputPtr;	  char    neg    =(char)_inputPtr;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
97	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentSegment(ch);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentSegment(ch);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _textBuffer.finishCurrentSegment(ch);	  Integer    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
98	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentSegment(neg);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  Integer  ptr  =  _textBuffer.finishCurrentSegment(neg);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	Integer  ptr  =  _textBuffer.finishCurrentSegment(neg);	  Integer    ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
99	[BUG]  [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen,  _inputEnd);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  int  startPtr  =  _parseInt(inputLen,  fractLen,  _inputEnd);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	int  startPtr  =  _parseInt(inputLen,  fractLen,  _inputEnd);	  int    startPtr    =    _parseInt(inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if(ch  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  ==  '.')  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  ==  '.')  {	  if(inputLen    >=    0    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
101	[BUG]  [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  ==  1)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  ==  1)  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ptr  >=  inputLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  fractLen  ==  1)  {	  if(ptr    >=    inputLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES)||    fractLen    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
102	[BUG]  [BUGGY]  if(ch  >=  '.'  &&  ptr  >=  inputLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  if(ch  >=  '.'  &&  ptr  >=  inputLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	if(ch  >=  '.'  &&  ptr  >=  inputLen  -  fractLen  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(ptr    >=    inputLen    -    fractLen    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  fractLen);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {      [BUGGY]  ((  JsonToken)ch)._parseFloat(neg,  fractLen);  [BUGGY]      return  _parseNumber2(neg,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.4472135954999579	1265	1265	1	replace	((  JsonToken)ch)._parseFloat(neg,  fractLen);	  ((    JsonToken)ch)._parseFloat(neg,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
