bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
2	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
3	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch!=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }	  if(ch    >=    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  return  _parseNumber2(true,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parseNumber2(true,  startPtr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parseNumber2(true,  startPtr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  return  _parsePosNumber2(true,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parsePosNumber2(true,  startPtr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parsePosNumber2(true,  startPtr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
7	[BUG]  [BUGGY]  return  _parseNumber2(false,  ptr);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parseNumber2(false,  ptr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parseNumber2(false,  ptr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  return  _parseNumber(ch,  startPtr);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parseNumber(ch,  startPtr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parseNumber(ch,  startPtr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  in  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  in  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  in	  if(ch    ==    INT_0)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false	  if(ch    ==    INT_0)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  ||(ch  <  INT_0  &&  ch  >  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  <  INT_0  &&  ch  >  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  <  INT_0  &&  ch  >  INT_9))  {  ++intLen;  }	  if(ch    <    INT_0)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  ==  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ch    ==    INT_0    ||    ch    >=    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >=  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >=  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >=  INT_9)  {  ++intLen;  }	  if(ch    ==    INT_0    ||    ch    >=    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    true,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
18	[BUG]  [BUGGY]  _inputPtr  =  ptr;  return  _parseNumber2(false,  startPtr);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _inputPtr  =  ptr;  return  _parseNumber2(false,  startPtr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_inputPtr  =  ptr;  return  _parseNumber2(false,  startPtr);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseNumber2(false,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
19	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseNumber2(false,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseNumber2(false,  startPtr);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseNumber2(false,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseNumber2(false,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
20	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseNumber2(false,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
21	[BUG]  [BUGGY]  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
22	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
23	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
24	[BUG]  [BUGGY]  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_parseInt(ch,  startPtr,  ptr,  false,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
25	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
26	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  p  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  p  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  p	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  ||(ch  ==  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  ==  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  ==  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  ||(ch  >=  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  >=  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  >=  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }	  ||(ch    ==    INT_0    &&    ch    <    =    INT_9))    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  ||(ch  ==  INT_0  &&  ch  <  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  ==  INT_0  &&  ch  <  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  ==  INT_0  &&  ch  <  INT_9))  {  ++intLen;  }	  ||(ch    ==    INT_0    &&    ch    <    =    INT_9))    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  ||(ch  ==  INT_0  &&  ch  >=  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  ==  INT_0  &&  ch  >=  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  ==  INT_0  &&  ch  >=  INT_9))  {  ++intLen;  }	  ||(ch    ==    INT_0    &&    ch    <    =    INT_9))    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_parseFloat(ch,  startPtr,  ptr,  true,  intLen);	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  false,  intLen  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  false,  intLen  +  1);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_parseFloat(ch,  startPtr,  ptr,  false,  intLen  +  1);	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
35	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
36	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  int  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  int  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  int	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
40	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ptr  >=  inputLen)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    >=    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
44	[BUG]  [BUGGY]  if(ch  >=  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  >=  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  >=  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++inputLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++inputLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++inputLen;  }	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++inputLen;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
46	[BUG]  [BUGGY]  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++inputLen;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++inputLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++inputLen;  }	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++inputLen;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >=  INT_9)  {  ++inputLen;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  ==  INT_0  ||  ch  >=  INT_9)  {  ++inputLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  ==  INT_0  ||  ch  >=  INT_9)  {  ++inputLen;  }	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++inputLen;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  ++inputLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  ++inputLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  ++inputLen;  }	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++inputLen;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
49	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ch    ==    INT_0)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
50	[BUG]  [BUGGY]  if(ch  <  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0)  {  if(ptr  >=  inputLen)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  ||(ch  <  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  <  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  <  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }	  ||(ch    ==    INT_0    &&    ch    <    =    INT_9))    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  ||(ch  <  INT_0  &&  ch  <  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  <  INT_0  &&  ch  <  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  <  INT_0  &&  ch  <  INT_9))  {  ++intLen;  }	  ||(ch    ==    INT_0    &&    ch    <    =    INT_9))    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  return  _parseNumber(true,  startPtr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parseNumber(true,  startPtr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parseNumber(true,  startPtr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
54	[BUG]  [BUGGY]  return  _parsePosNumber(true,  startPtr);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parsePosNumber(true,  startPtr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parsePosNumber(true,  startPtr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
55	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    true,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
56	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(_inputPtr  >=  startPtr)  {  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    true,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
57	[BUG]  [BUGGY]  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseNumber2(true,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseNumber2(true,  startPtr);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  _inputPtr  =  startPtr;  return  _parseNumber2(true,  startPtr);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseNumber2(false,    startPtr);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
59	[BUG]  [BUGGY]  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_parseInt(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr,  false,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
61	[BUG]  [BUGGY]  if(ch  >=  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  >=  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  >=  INT_0  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ch    >=    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  INT_0)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  ==  INT_0)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  ==  INT_0)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(_inputPtr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(_inputPtr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  true,  intLen);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  true,  intLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_inputPtr  =  ptr;  return  _parseInt(ch,  startPtr,  ptr,  true,  intLen);	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _inputPtr    =    ptr;    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
66	[BUG]  [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  false,  inputLen);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  _parseFloat(ch,  startPtr,  ptr,  false,  inputLen);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	_parseFloat(ch,  startPtr,  ptr,  false,  inputLen);	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
67	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  in  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  in  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  else  {  return  _parseInt(ch,  startPtr,  ptr,  false,  in	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }	  if(ch    >=    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  ++intLen;  }  else  {  return  _parseFloat(ch,  startPtr,  ptr,  true,  intLen);  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_1  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_1  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_1  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ptr    >=    inputLen)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
72	[BUG]  [BUGGY]  ||(ch  <  =  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  ||(ch  <  =  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	||(ch  <  =  INT_0  &&  ch  <  =  INT_9))  {  ++intLen;  }	  ||(ch    ==    INT_0    &&    ch    <    =    INT_9))    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  return  _parseNumber(false,  ptr);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  return  _parseNumber(false,  ptr);  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	return  _parseNumber(false,  ptr);	  return    _parseNumber2(false,    startPtr);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  return  _parseInt(ch,  startPtr,  ptr	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
75	[BUG]  [BUGGY]  if(ch  <  INT_Len  ||  ch  >  INT_9)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_Len  ||  ch  >  INT_9)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_Len  ||  ch  >  INT_9)  {  ++intLen;  }	  if(ch    <    =    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
76	[BUG]  [BUGGY]  if(ptr  <  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  <  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  <  inputLen)  {  if(ch  <  INT_0  ||  ch  >  INT_9)  {  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
78	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ch  ==  INT_0)  {  return  _parseNumber2(false,  startPtr);  }	  if(ch    ==    INT_0)    {    return    _parseNumber2(false,    startPtr);    }    else    {    return    _parseInt(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_9)  {  ++inputLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_9)  {  ++inputLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ch!=  INT_0  ||  ch  ==  INT_9)  {  ++inputLen;  }	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    ++inputLen;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
80	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  else  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  else  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  else  {  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }	  _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  ++intLen;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      int_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  _inputPtr  =  startPtr;  return  _parseNumber2(false,  startPtr);  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  ++intLen;  }  [BUGGY]      }  if  (ch  ==  INT_PERIOD  ||  ch  ==  INT_e  ||  ch  ==  INT_E)  {  _inputPtr  =  ptr;  return  _parseFloat(ch,  startPtr,  ptr,  false,  intLen);  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  if  (_parsingContext.inRoot())  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parsePosNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  features  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.31622776601683794	1237	1237	1	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0)  {  ++intLen;  }	  if(ch    ==    INT_0)    {    if(ch    <    INT_0    ||    ch    >    INT_9)    {    ++intLen;    }    else    {    return    _parseFloat(ch,    startPtr,    ptr,    false,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
