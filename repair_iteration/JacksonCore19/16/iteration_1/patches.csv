bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  ch  =(int)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  ch  =(int)_inputBuffer[ptr++];  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	ch  =(int)_inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( "Input  line  not  followed  by  a  float ");  }  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( "Input  line  not  followed  by  a  float ");  }  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( "Input  line  not  followed  by  a  float ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( "Input  line  not  followed  by  a  digit ");  }  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( "Input  line  not  followed  by  a  digit ");  }  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	if(ptr  >=  inputLen)  {  throw  new  IllegalArgumentException( "Input  line  not  followed  by  a  digit ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  return  _parseFloat(ch,  inputLen);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ch,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ch,  inputLen);	  return    _parseNumber(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
6	[BUG]  [BUGGY]  return  _parseFloat(ch,  intLen);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ch,  intLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ch,  intLen);	  return    _parseNumber(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
7	[BUG]  [BUGGY]  ch  =  _parseFloat(ch,  startPtr);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  ch  =  _parseFloat(ch,  startPtr);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	ch  =  _parseFloat(ch,  startPtr);	  return    _parseNumber(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
8	[BUG]  [BUGGY]  return  _parseFloat(ch,  fractLen);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ch,  fractLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ch,  fractLen);	  return    _parseFloat(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  return  _parseFloat(ch,  startPtr,  fractLen);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ch,  startPtr,  fractLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ch,  startPtr,  fractLen);	  return    _parseFloat(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  return  _parseFloat(ch,  startPtr  +  1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ch,  startPtr  +  1);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ch,  startPtr  +  1);	  return    _parseFloat(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  return  _parseFloat(ptr,  inputLen);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ptr,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ptr,  inputLen);	  return    _parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
12	[BUG]  [BUGGY]  return  _parseFloat(startPtr,  inputLen);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(startPtr,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(startPtr,  inputLen);	  return    _parseFloat(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
13	[BUG]  [BUGGY]  return  _parseFloat(inputLen,  fractLen,  ptr);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(inputLen,  fractLen,  ptr);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(inputLen,  fractLen,  ptr);	  return    _parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
14	[BUG]  [BUGGY]  return  _parseFloat(inputLen,  fractLen,  0);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(inputLen,  fractLen,  0);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(inputLen,  fractLen,  0);	  return    _parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseFloat(inputLen,  fractLen);  }  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  if(ptr  >=  inputLen)  {  return  _parseFloat(inputLen,  fractLen);  }  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	if(ptr  >=  inputLen)  {  return  _parseFloat(inputLen,  fractLen);  }	  return    _parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  return  _parseFloat(ptr,  startPtr);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ptr,  startPtr);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ptr,  startPtr);	  return    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  return  _parseInt(inputLen,  startPtr);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseInt(inputLen,  startPtr);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseInt(inputLen,  startPtr);	  return    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  return  _parseNumber(inputLen,  fractLen);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseNumber(inputLen,  fractLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseNumber(inputLen,  fractLen);	  return    _parseNumber(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  return  _parseNumber(ch,  inputLen);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseNumber(ch,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseNumber(ch,  inputLen);	  return    _parseNumber(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  return  _parseNumber(startPtr,  inputLen);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseNumber(startPtr,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseNumber(startPtr,  inputLen);	  return    _parseNumber(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
21	[BUG]  [BUGGY]  return  _parseNumber2(inputLen,  fractLen);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseNumber2(inputLen,  fractLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseNumber2(inputLen,  fractLen);	  return    _parseNumber2(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  return  _parseNumber2(startPtr,  inputLen);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseNumber2(startPtr,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseNumber2(startPtr,  inputLen);	  return    _parseNumber2(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  return  parseFloat(ch,  inputLen);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  parseFloat(ch,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  parseFloat(ch,  inputLen);	  return    _parseNumber(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  return  parseNumber(ch,  inputLen);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  parseNumber(ch,  inputLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  parseNumber(ch,  inputLen);	  return    _parseNumber(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  reportUnexpectedNumberChar(ch,  '.');  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  reportUnexpectedNumberChar(ch,  '.');  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	reportUnexpectedNumberChar(ch,  '.');	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  ((  Float)ch).floatValue();  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  ((  Float)ch).floatValue();  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	((  Float)ch).floatValue();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  _reportUnexpectedNumberChar(ch,  '.');  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  _reportUnexpectedNumberChar(ch,  '.');  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	_reportUnexpectedNumberChar(ch,  '.');	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  _reportUnexpectedNumberChar(ch,  'n');  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  _reportUnexpectedNumberChar(ch,  'n');  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	_reportUnexpectedNumberChar(ch,  'n');	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  return  _parseFloat(inputLen,  fractLen  +  1);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(inputLen,  fractLen  +  1);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(inputLen,  fractLen  +  1);	  return    _parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
30	[BUG]  [BUGGY]  return  _parseFloat(ch,  outputPtr);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(ch,  outputPtr);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(ch,  outputPtr);	  return    _parseFloat(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  return  parseFloat(inputLen,  startPtr);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  parseFloat(inputLen,  startPtr);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  parseFloat(inputLen,  startPtr);	  return    _parseFloat(neg,    startPtr);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
32	[BUG]  [BUGGY]  reportUnexpectedNumberChar(ch, "Decimal  point  not  followed  by  a  digit ");  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  reportUnexpectedNumberChar(ch, "Decimal  point  not  followed  by  a  digit ");  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	reportUnexpectedNumberChar(ch, "Decimal  point  not  followed  by  a  digit ");	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  _reportUnexpectedNumberChar(ch, "Decimal  point  not  followed  by  a  digit ");  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  _reportUnexpectedNumberChar(ch, "Decimal  point  not  followed  by  a  digit ");  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	_reportUnexpectedNumberChar(ch, "Decimal  point  not  followed  by  a  digit ");	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  return  _parseFloat(inputLen,  fractLen,  _inputBuffer.length);  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseFloat(inputLen,  fractLen,  _inputBuffer.length);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseFloat(inputLen,  fractLen,  _inputBuffer.length);	  return    _parseFloat(inputLen,    fractLen);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  return  parseFloat(ch,  fractLen);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  parseFloat(ch,  fractLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  parseFloat(ch,  fractLen);	  return    _parseFloat(ch,    startPtr);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
36	[BUG]  [BUGGY]  return  _parseInt(inputLen,  fractLen);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  final  int  inputLen  =  _inputEnd;  int  fractLen  =  0;  if  (ch  ==  '.')  {  //  yes,  fraction  fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {    [BUGGY]  return  _parseInt(inputLen,  fractLen);  [BUGGY]    }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseFloat  [RETURN_TYPE]  JsonToken  int  ch  int  startPtr  int  ptr  boolean  neg  int  intLen  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  inObject  neg  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5773502691896258	1266	1266	1	replace	return  _parseInt(inputLen,  fractLen);	  return    _parseNumber2(inputLen,    startPtr);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
