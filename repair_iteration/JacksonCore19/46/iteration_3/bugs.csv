bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  outBuf[outPtr++]  =  ',';  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  ',';  outPtr  =  0;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  ',';  outPtr  =  0;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    ',';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
2	[BUG]  [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    ',';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
3	[BUG]  [BUGGY]  if(negate  >  0)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negate  >  0)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negate  >  0)  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  if(neg  >  0  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(neg  >  0  ||  c  ==  '.')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0  ||  c  ==  '.')  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  if(c  <  =  '0'  ||  c  >  '9')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  =  '0'  ||  c  >  '9')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  =  '0'  ||  c  >  '9')  {	  if(c    >=    '.')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
6	[BUG]  [BUGGY]  if(negated  ||  startPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negated  ||  startPtr  >=  _inputEnd)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negated  ||  startPtr  >=  _inputEnd)  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(negated  ||(startPtr  >=  _inputEnd  &&!loadMore()))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negated  ||(startPtr  >=  _inputEnd  &&!loadMore()))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negated  ||(startPtr  >=  _inputEnd  &&!loadMore()))  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  if(negated  ||(startPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negated  ||(startPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negated  ||(startPtr  >=  _inputEnd  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  if(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
12	[BUG]  [BUGGY]  if(c!=  '.'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  &&  c  <  =  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c!=    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
13	[BUG]  [BUGGY]  if(c  >=  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
14	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
16	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
17	[BUG]  [BUGGY]  outBuf[outPtr++]  =  c;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  c;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  c;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
19	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  [CE]  illegal  start  of  type  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
20	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
21	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '-')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
22	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
23	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c    ==    '.'    ||    c    ==    'A'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
24	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c    ==    '.'    ||    c    ==    'A'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
25	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c    ==    '.'    ||    c    ==    'A'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
26	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
30	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  JsonToken.VALUE_NUMBER_INT  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
31	[BUG]  [BUGGY]  if(c!=  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    ','    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
32	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    ','    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
33	[BUG]  [BUGGY]  if(c  >=  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    ','    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
34	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  ',')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  ',')  {	  if(c!=    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'a'    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
39	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  'a'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'a'    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c!=  'e')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c!=  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c!=  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'a'    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
41	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
42	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
43	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
44	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(neg!=    0    ||(c    ==    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z'))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(neg!=    0    ||(c    ==    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z'))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
46	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'Z'  ||  c!=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'Z'  ||  c!=  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'Z'  ||  c!=  'a'  &&  c  <  =  'z')  {	  if(neg!=    0    ||(c    ==    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z'))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
47	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '@')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  '@')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  '@')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  '@')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c!=  '@')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c!=  '@')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  '@')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  '@')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
50	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
53	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
54	[BUG]  [BUGGY]  if(c!=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
55	[BUG]  [BUGGY]  if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
56	[BUG]  [BUGGY]  if(!eof)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(!eof)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(!eof)  {  outBuf[outPtr++]  =  c;  }	  if(negate)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
57	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
58	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
59	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  't'  ||  c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
60	[BUG]  [BUGGY]  if(c  ==  '.'  &&  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  &&  c  <  =  '9')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  &&  c  <  =  '9')  {	  if(c!=    '.'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
61	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  <  =  '9')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  <  =  '9')  {	  if(c!=    '.'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
62	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  <  =  '9')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  <  =  '9')  {	  if(c!=    '.'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
63	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
64	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
65	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  ','  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c!=  ','  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c!=  ','  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
66	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.END_ARRAY;	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
67	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
68	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
69	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c!=  'r')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c!=  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c!=  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c!=    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
73	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c!=  'E')  {	  if(c!=    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
74	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
75	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c!=  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c!=  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
76	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  '-')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c!=  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c!=  '-')  {	  if(c    ==    '.'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '-'  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
80	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
81	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
82	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '+')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '+')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
83	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
84	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr  &&!loadMore())  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(_inputPtr  >=  startPtr  &&!loadMore())  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  startPtr  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
85	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  ||!loadMore())  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  _inputEnd  ||!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
86	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(startPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(startPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd    &&!loadMore())    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
87	[BUG]  [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  String  c  =  _inputBuffer[_inputPtr++];  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	String  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  Char  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  Char  c  =  _inputBuffer[_inputPtr++];  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	Char  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
89	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  outPtr  =  0;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.END_ARRAY;  outPtr  =  0;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
90	[BUG]  [BUGGY]  if(c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
91	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
92	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
93	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c!=  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
94	[BUG]  [BUGGY]  if(c  >=  startPtr)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  startPtr)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  startPtr)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
95	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
96	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
97	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c!=  'r'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
98	[BUG]  [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '['  ||  c  ==  ']')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '['  ||  c  ==  ']')  {	  if(c    ==    '.'    ||    c!=    ',')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
99	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
100	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >>  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >>  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  if(_inputPtr  >>  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
101	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
103	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
104	[BUG]  [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  JsonToken.VALUE_NUMBER_INT)  {  if(outPtr  >=  outBuf[outPtr++])  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  outBuf[outPtr++]  =  c;  eof  =  true;  break  int_loop;  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  c;  eof  =  true;  break  int_loop;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  c;  eof  =  true;  break  int_loop;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
107	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
108	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
109	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
110	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '9')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '9')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '9')  {	  if(c!=    '.'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
111	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  '9')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  '9')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  '9')  {	  if(c!=    '.'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
112	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(c!=    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
113	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '-'  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
114	[BUG]  [BUGGY]  OutputStream  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  OutputStream  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	OutputStream  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
115	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
116	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
117	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'a'    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
118	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '.'  ||  c  >  ','  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'a'    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
119	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
120	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
121	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
122	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
123	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
124	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
126	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
127	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
128	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
129	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_ARRAY;  eof  =  true;  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_ARRAY;  eof  =  true;  break  int_loop;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_ARRAY;  eof  =  true;  break  int_loop;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
130	[BUG]  [BUGGY]  if(c  ==  VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
131	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c    ==    '.'    ||    c    ==    'A'    ||    c    ==    'a'    ||    c    ==    'a'    ||    c    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
132	[BUG]  [BUGGY]  if(negate)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negate)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negate)  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  if(c  <  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  _inputEnd)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  _inputEnd)  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
134	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
135	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
136	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n')  {	  if(c    ==    '.'    ||    c!=    ',')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
137	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(_inputPtr  >=  inputEnd)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  inputEnd)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
138	[BUG]  [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.')  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.')  {  outBuf[outPtr++]  =  c;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
139	[BUG]  [BUGGY]  OutputStream  outBuf[outPtr++]  =  c;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  OutputStream  outBuf[outPtr++]  =  c;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	OutputStream  outBuf[outPtr++]  =  c;	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  if(!negate)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(!negate)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(!negate)  {  outBuf[outPtr++]  =  c;  }	  if(negate)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
141	[BUG]  [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  Character  c  =  _inputBuffer[_inputPtr++];  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	Character  c  =  _inputBuffer[_inputPtr++];	  char    c    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
142	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    '9'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
143	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
144	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
145	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '.'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '.'  ||  c  >  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    >=    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
146	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
147	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    ','    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
148	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    ','    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
149	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '0'  ||  c  >  'r'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '0'  ||  c  >  'r'  ||  c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '0'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
150	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
151	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    ',';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
152	[BUG]  [BUGGY]  if(neg  >  0  ||(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(neg  >  0  ||(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0  ||(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
153	[BUG]  [BUGGY]  if(neg  >  0  ||(c  ==  '.'  &&  c  <  =  'a'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(neg  >  0  ||(c  ==  '.'  &&  c  <  =  'a'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0  ||(c  ==  '.'  &&  c  <  =  'a'  ||  c  >=  'a'  &&  c  <  =  'z'))  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
154	[BUG]  [BUGGY]  if(neg  >  0  ||(c!=  '.'  &&  c  <  =  'a'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(neg  >  0  ||(c!=  '.'  &&  c  <  =  'a'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0  ||(c!=  '.'  &&  c  <  =  'a'  ||  c  >=  'a'  &&  c  <  =  'z'))  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
155	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  ||  c  ==  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'Z'  ||  c  ==  'a'  &&  c  <  =  'z')  {	  if(neg!=    0    ||(c    ==    '.'    &&    c    <    =    'Z'    ||    c    >=    'a'    &&    c    <    =    'z'))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
156	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  '-')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
157	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  '+')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '@'  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
158	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ',')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    ',';    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
159	[BUG]  [BUGGY]  if(c  >=  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  _inputEnd)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  _inputEnd)  {	  if(_inputPtr    >=    startPtr)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
160	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c!=    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
161	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    't'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
162	[BUG]  [BUGGY]  if(negated)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negated)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negated)  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
163	[BUG]  [BUGGY]  if(negated  ||(c  ==  '.'  &&  c  <  =  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(negated  ||(c  ==  '.'  &&  c  <  =  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negated  ||(c  ==  '.'  &&  c  <  =  'A'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {	  if(startPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
164	[BUG]  [BUGGY]  if(c!=  '.'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c!=  '.'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  &&  c  <  =  '9'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.'    &&    c    <    =    '9')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
165	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NULL)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
166	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER;  eof  =  true;  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER;  eof  =  true;  break  int_loop;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER;  eof  =  true;  break  int_loop;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NULL;    eof    =    true;    break    int_loop;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
167	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'e')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
168	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	  if(c    ==    '.')    {    if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
169	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.END_ARRAY)  {  outBuf[outPtr++]  =  JsonToken.END_OBJECT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.END_ARRAY;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
170	[BUG]  [BUGGY]  if(eof)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(eof)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(eof)  {  outBuf[outPtr++]  =  c;  }	  if(negate)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
171	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '.'  ||  c  >  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
172	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '.'  ||  c  >  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
173	[BUG]  [BUGGY]  if(c  <  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
174	[BUG]  [BUGGY]  OutputBuffer  outBuf[outPtr++]  =  c;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  OutputBuffer  outBuf[outPtr++]  =  c;  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	OutputBuffer  outBuf[outPtr++]  =  c;	  if(_inputPtr    >=    _inputEnd)    {    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
175	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
176	[BUG]  [BUGGY]  if(eof  >  0)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(eof  >  0)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(eof  >  0)  {	  if(neg    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
177	[BUG]  [BUGGY]  if(c  >  0)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >  0)  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >  0)  {	  if(neg    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
178	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
179	[BUG]  [BUGGY]  if(neg  >  0  &&(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't'))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(neg  >  0  &&(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't'))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0  &&(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't'))  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
180	[BUG]  [BUGGY]  if(neg  >  0  &&(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'))  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(neg  >  0  &&(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0  &&(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'))  {	  if(neg    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
181	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
182	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
183	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_INT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
184	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '.')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
185	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
186	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E'    ||    c    ==    'E'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
187	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  JsonToken.VALUE_NUMBER_FLOAT)  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
188	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
189	[BUG]  [BUGGY]  if(c  <  =  '.')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  =  '.')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  =  '.')  {	  if(c    >=    '.')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
190	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
191	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
192	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
193	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  <  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  <  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    >=    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
194	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  c;  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  c;  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  }  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  c;  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  }	  if(c    ==    '.')    {    outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_INT;    outBuf[outPtr++]    =    c;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
195	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&(c  ==  '.'  ||  c  ==  ','))  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&(c  ==  '.'  ||  c  ==  ','))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  _inputEnd  &&(c  ==  '.'  ||  c  ==  ','))  {	  if(c!=    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
196	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&(c!=  '.'  ||  c  ==  ','))  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(_inputPtr  >=  _inputEnd  &&(c!=  '.'  ||  c  ==  ','))  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  _inputEnd  &&(c!=  '.'  ||  c  ==  ','))  {	  if(c!=    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
197	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
198	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'N'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'N'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'N'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
199	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }        [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]      return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
