bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c!=  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(_inputPtr  >=  startPtr)  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  startPtr)  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(startPtr  >=  _inputEnd)  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(startPtr  >=  _inputEnd)  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '+')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  '-')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '-')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c!=  '.'  ||  c  ==  ',')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  ',')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c!=  ',')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c!=  ',')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c!=  ',')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
14	[BUG]  [BUGGY]  if(neg  >=  0)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(neg  >=  0)  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >=  0)  {	  if(neg!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '@')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  '@')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  '@')  {	  if(neg    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  char  c  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  char  c  =  _inputBuffer[_inputPtr++];  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	char  c  =  _inputBuffer[_inputPtr++];	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(negate)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(negate)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(negate)  {  outBuf[outPtr++]  =  c;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  eof  =  true;  break  int_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outBuf[outPtr++]  =  c;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '0'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  if(neg  >  0)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(neg  >  0)  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg  >  0)  {	  if(neg    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  ','  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a'  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  if(c  >=  '.')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  >=  '.')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  >=  '.')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'A'  ||  c  ==  'a'  ||  c  ==  'a'  ||  c  ==  'a')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  outPtr  =  0;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  c;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(_inputPtr  >=  _inputEnd  &&!loadMore())  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(_inputPtr  >=  _inputEnd  &&!loadMore())  {	  if(_inputPtr    >=    _inputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
37	[BUG]  [BUGGY]  if(neg!=  0  ||(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(neg!=  0  ||(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(neg!=  0  ||(c  ==  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z'))  {	  if(neg!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {	  if(c    ==    '.')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '0'  ||  c  ==  '9'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
41	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {	  if(c    ==    '.'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  if(c!=  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c!=  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  &&  c  <  =  'Z'  ||  c  >=  'a'  &&  c  <  =  'z')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  if(c!=  '.'  &&  c  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c!=  '.'  &&  c  <  =  '9')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  &&  c  <  =  '9')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c!=    '.')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  outBuf[outPtr++]  =  ',';  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.')  {  if(_inputPtr  >=  _inputEnd)  {  outBuf[outPtr++]  =  JsonToken.END_ARRAY;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
47	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'e')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
48	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    outBuf[outPtr++]  =  c;  if  (_inputPtr  >=  _inputEnd  &&  !loadMore())  {  c  =  CHAR_NULL;  eof  =  true;  break  int_loop;  }  c  =  _inputBuffer[_inputPtr++];  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  [BUGGY]    return  _handleInvalidNumberStart(c,  neg);  }  int  fractLen  =  0;  if  (c  ==  '.')  {  //  yes,  fraction  outBuf[outPtr++]  =  c;  fract_loop:  while  (true)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber2  [RETURN_TYPE]  JsonToken  boolean  neg  int  startPtr  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  char  c  Reader  _reader  r  int[]  _icLatin1  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameStartCol  _nameStartRow  bits  bufSize  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameStartOffset  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore19/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.35355339059327373	1411	1411	1	replace	if(c  ==  '.'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {	  if(neg    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
