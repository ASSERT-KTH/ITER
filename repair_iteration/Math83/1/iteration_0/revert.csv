projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegerbasicRow=getBasicRow(getNumObjectiveFunctions()+i);
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegerbaseRow=getBasicRow(getNumObjectiveFunctions()+i);
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349if(basicRows.contains(basicRow)){for(inti=0;i<baseRows.size();++i){basicRows.add(basicRow);}
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegerbasicRow=getBasicRow(getNumObjectiveFunctions(),i);
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegerbasicRow=getBasicRow(getNumObjectiveFunctions()-i);
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=0;
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()));
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=(basicRow==null?0:basicRows[i].doubleValue());
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegermostNegative=basicRows.get(basicRow);
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegerbasicRow=getBasicRow(basicRow,getRhsOffset());
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegermostNegative=basicRows.get(basicRow).intValue();
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegermostNegative=coefficients[i]>0;
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349intbaseRow=getBasicRow(basicRow,i);
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=0+(basicRow==null?0:getEntry(basicRow,getRhsOffset()));
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=0+(basicRow==null?0:getEntry(basicRow,getRhsOffset())).doubleValue();
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=0+(basicRow!=null?0:getEntry(basicRow,getRhsOffset()));
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(basicRow==null?0:getEntry(basicRow,getRhsOffset()));
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:getEntry(basicRow,getRhsOffset())
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(basicRow==null?0:getEntry(basicRow,getRhsOffset())
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349if(basicRows.contains(basicRow)){for(inti=0;i<getRhsOffset();i++){basicRows.add(basicRow);}
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349if(basicRows.contains(basicRow)){basicRows=newHashSet<Integer>();for(inti=0;i<baseRows.size();i++){basicRows.add(basicRow);}
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349IntegermostNegative=basicRows.iterator().next();
projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java349if(basicRows.contains(basicRow)){basicRows=Sets.newHashSet();}else{basicRows.add(basicRow);}
