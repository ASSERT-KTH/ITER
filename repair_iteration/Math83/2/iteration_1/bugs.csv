bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  this;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  this;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  this;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  return  row;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  row;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  row;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  return  i;  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  i;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  i;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  return  this.baseRow;  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  this.baseRow;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  this.baseRow;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	  	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  1.0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
7	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  0.0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
8	[BUG]  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  2.0,  epsilon);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =(int)MathUtils.equals(getEntry(i,  col),  2.0,  epsilon);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =(int)MathUtils.equals(getEntry(i,  col),  2.0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
9	[BUG]  [BUGGY]    row  =  i;  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  i;  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  i;		non-compiled	[CE]  <identifier>  expected	4	None	add
10	[BUG]  [BUGGY]    ((  LinearObjectiveFunction)f).setBasicRow(row);  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    ((  LinearObjectiveFunction)f).setBasicRow(row);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    ((  LinearObjectiveFunction)f).setBasicRow(row);		non-compiled	[CE]  <identifier>  expected	4	None	add
11	[BUG]  [BUGGY]    row  =  Math.floor(getBasicRow(i),  col);  [CE]  illegal  start  of  type  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  Math.floor(getBasicRow(i),  col);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  Math.floor(getBasicRow(i),  col);		non-compiled	[CE]  illegal  start  of  type	4	None	add
12	[BUG]  [BUGGY]    ((  LinearObjectiveFunction)f).getBasicRow(row);  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    ((  LinearObjectiveFunction)f).getBasicRow(row);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    ((  LinearObjectiveFunction)f).getBasicRow(row);		non-compiled	[CE]  <identifier>  expected	4	None	add
13	[BUG]  [BUGGY]    row  =  Math.floor(getBasicRow(i),  epsilon);  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  Math.floor(getBasicRow(i),  epsilon);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  Math.floor(getBasicRow(i),  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
14	[BUG]  [BUGGY]  return  this.base;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  this.base;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  this.base;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
15	[BUG]  [BUGGY]    row  =  getNumObjectiveFunctions();  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  getNumObjectiveFunctions();  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  getNumObjectiveFunctions();		non-compiled	[CE]  <identifier>  expected	4	None	add
16	[BUG]  [BUGGY]    int  height  =  getHeight();  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    int  height  =  getHeight();  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    int  height  =  getHeight();		non-compiled	[CE]  <identifier>  expected	4	None	add
17	[BUG]  [BUGGY]    row  =  getNumObjectiveFunctions().intValue();  [CE]  <identifier>  expected  [FE]        AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  getNumObjectiveFunctions().intValue();  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  getNumObjectiveFunctions().intValue();		non-compiled	[CE]  <identifier>  expected	4	None	add
18	[BUG]  [BUGGY]    row  =  Math.floor(getBasicRow(i),  0.0,  epsilon);  [CE]  <identifier>  expected  [FE]          AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  Math.floor(getBasicRow(i),  0.0,  epsilon);  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  Math.floor(getBasicRow(i),  0.0,  epsilon);		non-compiled	[CE]  <identifier>  expected	4	None	add
19	[BUG]  [BUGGY]    row  =  Math.floor(getBasicRow(i,  col));  [CE]  <identifier>  expected  [FE]            AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]    row  =  Math.floor(getBasicRow(i,  col));  [BUGGY]  return  null;  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	    row  =  Math.floor(getBasicRow(i,  col));		non-compiled	[CE]  <identifier>  expected	4	None	add
20	[BUG]  [BUGGY]  return  row  <  0?  null  :  row;  [CE]  <identifier>  expected  [FE]    AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  row  <  0?  null  :  row;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  row  <  0?  null  :  row;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  return  row  <  0?  0  :  row;  [CE]  <identifier>  expected  [FE]      AssertionError  [CONTEXT]  private  Integer  getBasicRow(final  int  col,  boolean  ignoreObjectiveRows)  {  Integer  row  =  null;  int  start  =  getNumObjectiveFunctions();  for  (int  i  =  start;  i  <  getHeight();  i++)  {  if  (MathUtils.equals(getEntry(i,  col),  1.0,  epsilon)  &&  (row  ==  null))  {  row  =  i;  }  else  if  (!MathUtils.equals(getEntry(i,  col),  0.0,  epsilon))  {  [BUGGY]  return  row  <  0?  0  :  row;  [BUGGY]  }  }  return  row;  }  [CLASS]  SimplexTableau  [METHOD]  getBasicRow  [RETURN_TYPE]  Integer  final  int  col  boolean  ignoreObjectiveRows  [VARIABLES]  Integer  row  boolean  ignoreObjectiveRows  maximize  restrictToNonNegative  RealMatrix  tableau  double  coefficient  epsilon  sum  LinearObjectiveFunction  f  Collection  constraints  long  serialVersionUID  int  artificialVar  col  count  height  i  numArtificialVariables  numDecisionVariables  numSlackVariables  row  slackVar  start  width  zIndex  	projects/Math83/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	0.31622776601683794	297	297	1	replace	return  row  <  0?  0  :  row;	return  null;  	non-compiled	[CE]  <identifier>  expected	3	None	replace
