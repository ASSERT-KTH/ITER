bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);	      DateTimeFieldType    lastUnitField    =    loopType.getLastDurationType().getField(iChronology);    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  loopType.getRangeDurationType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopType  =  loopType.getRangeDurationType();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopType  =  loopType.getRangeDurationType();	      DateTimeFieldType    loopType    =    loopType.getDurationType();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)types[i  -  1].getDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)types[i  -  1].getDurationType();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopType  =(DateTimeFieldType)types[i  -  1].getDurationType();	      DateTimeFieldType    loopType    =(DateTimeFieldType)iTypes[i    -    1].getDurationType();    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  iChronology  =  loopType.withUTC();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  iChronology  =  loopType.withUTC();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	iChronology  =  loopType.withUTC();	      iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(i);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(i);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  loopUnitField  =  loopType.getDurationType().getField(i);	  DurationField    loopUnitField    =    loopType.getDurationType().getField(chronology);    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  lastUnitField  =  loopType.getLastDurationType();	      DateTimeFieldType    lastUnitField    =    loopType.getLastDurationType();    	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  lastUnitField  =  loopType.getRangeDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  lastUnitField  =  loopType.getRangeDurationType().getField(iChronology);  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	lastUnitField  =  loopType.getRangeDurationType().getField(iChronology);	      lastUnitField    =    loopType.getDurationType().getField(iChronology);    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)loopType.getDurationType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)loopType.getDurationType();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopType  =(DateTimeFieldType)loopType.getDurationType();	      DateTimeFieldType    loopType    =(DateTimeFieldType)loopType.clone();    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(loopType);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  iChronology  =  DateTimeUtils.getChronology(loopType);  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	iChronology  =  DateTimeUtils.getChronology(loopType);	      iChronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(cycle);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  iChronology  =  DateTimeUtils.getChronology(cycle);  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	iChronology  =  DateTimeUtils.getChronology(cycle);	      iChronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(iPartial,  values);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(iPartial,  values);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  loopUnitField  =  loopType.getDurationType().getField(iPartial,  values);	  DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology,    values);    	non-compiled	[CE]  	1	None	replace
12	[BUG]  [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology,  values[i]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology,  values[i]);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology,  values[i]);	  DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology,    values);    	non-compiled	[CE]  	1	None	replace
13	[BUG]  [BUGGY]  DateTimeFieldType  loopUnitField  =(DateTimeFieldType)loopType.clone();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopUnitField  =(DateTimeFieldType)loopType.clone();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopUnitField  =(DateTimeFieldType)loopType.clone();	      	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  lastUnitField  =  loopType.getLastUnit();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  lastUnitField  =  loopType.getLastUnit();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	lastUnitField  =  loopType.getLastUnit();	      	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology,  values);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology,  values);  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	iChronology  =  DateTimeUtils.getChronology(chronology,  values);	      iChronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology,  iValues);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology,  iValues);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology,  iValues);	  DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology,    values);    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  DateTimeFieldType  lastUnitField  =  loopType.getlastDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  lastUnitField  =  loopType.getlastDurationType();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  lastUnitField  =  loopType.getlastDurationType();	      DateTimeFieldType    lastUnitField    =    loopType.getLastDurationType();    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getUnitType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getUnitType();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopUnitField  =  loopType.getUnitType();	      	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getDurationType();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopUnitField  =  loopType.getDurationType();	      	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)loopTypes[i  -  1].getDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)loopTypes[i  -  1].getDurationType();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DateTimeFieldType  loopType  =(DateTimeFieldType)loopTypes[i  -  1].getDurationType();	      DateTimeFieldType    loopType    =(DateTimeFieldType)iTypes[i    -    1].getDurationType();    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(chronology,  values);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  DurationField  loopUnitField  =  loopType.getDurationType().getField(chronology,  values);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	DurationField  loopUnitField  =  loopType.getDurationType().getField(chronology,  values);	  DurationField    loopUnitField    =    loopType.getDurationType().getField(iChronology,    values);    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]    DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	iChronology  =  DateTimeUtils.getChronology(chronology).withUTC();	      iChronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  lastUnitField  =  loopType.getLastChronology();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  lastUnitField  =  loopType.getLastChronology();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	lastUnitField  =  loopType.getLastChronology();	      	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  int[]  loopUnitField  =  loopType.getUnitFields();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];    [BUGGY]  int[]  loopUnitField  =  loopType.getUnitFields();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	215	215	1	replace	int[]  loopUnitField  =  loopType.getUnitFields();	      	non-compiled	[CE]  	2	None	replace
