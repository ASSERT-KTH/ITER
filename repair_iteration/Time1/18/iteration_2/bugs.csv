bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  iValues.length;  i++)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  for(int  i  =  0;  i  <  iValues.length;  i++)  {  [BUGGY]    if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	for(int  i  =  0;  i  <  iValues.length;  i++)  {	  for(int    i    =    0;    i    <    values.length;    i++)    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf(types);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  iTypes.indexOf(types);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf(types);	      int    index    =    iTypes.indexOf(values);    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf(types[0]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  iTypes.indexOf(types[0]);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf(types[0]);	      int    index    =    iTypes.indexOf(values);    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(types);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int[]  types  =  iTypes.toArray(types);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(types);	      int[]    types    =    iTypes.toArray(values);    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(types);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(types);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray(types);	      DateTimeFieldType[]    types    =    iTypes.toArray(values);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  int  index  =  values[0].compareTo(iTypes);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  values[0].compareTo(iTypes);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  values[0].compareTo(iTypes);	      int    index    =    iTypes[0].compareTo(values);    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  int  index  =  iTypes[0].compareTo(types);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  iTypes[0].compareTo(types);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes[0].compareTo(types);	      int    index    =    iTypes[0].compareTo(values);    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  int[]  types  =  iTypes.get(types);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int[]  types  =  iTypes.get(types);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.get(types);	      int[]    types    =    iTypes.get(compare);    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iTypes.get(values);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int[]  types  =  iTypes.get(values);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.get(values);	      int[]    types    =    iTypes.get(compare);    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.length]);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.length]);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(new  int[types.length]);	      int[]    types    =    iTypes.toArray();    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  int  index  =  values[0].compareTo(iValues[1]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  values[0].compareTo(iValues[1]);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  values[0].compareTo(iValues[1]);	      int    index    =    iTypes[0].compareTo(values[1]);    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('[',  values.length);	      int    index    =    iTypes.indexOf('[');    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length));  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('[',  values.length));	      int    index    =    iTypes.indexOf('[');    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  int  index  =  types.indexOf(values);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  types.indexOf(values);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf(values);	      int    index    =    iTypes.indexOf(values);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  int  index  =  types.indexOf('[');  [CE]  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  types.indexOf('[');  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf('[');	      int    index    =    iTypes.indexOf('[');    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  int  index  =  getIndex(compare);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  getIndex(compare);  [BUGGY]    if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  getIndex(compare);	      	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  int  index  =  types[0].compareTo(values);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  types[0].compareTo(values);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types[0].compareTo(values);	      int    index    =    iTypes[0].compareTo(values);    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  int  index  =  types[0].compareTo(values[1]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  types[0].compareTo(values[1]);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types[0].compareTo(values[1]);	      int    index    =    iTypes[0].compareTo(values[1]);    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.size()  ]);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(new  int[types.size()  ]);	      int[]    types    =    iTypes.toArray();    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('.');  [CE]  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  iTypes.indexOf('.');  [BUGGY]    for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('.');	      int    index    =    iTypes.indexOf(values);    	non-compiled	[CE]  	6	None	replace
21	[BUG]  [BUGGY]  int  index  =  indexOf(values[index]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }    [BUGGY]  int  index  =  indexOf(values[index]);  [BUGGY]    if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  indexOf(values[index]);	      	non-compiled	[CE]  	2	None	replace
