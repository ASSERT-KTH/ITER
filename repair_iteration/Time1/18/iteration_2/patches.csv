bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  index  =  types[0].compareTo(iValues);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types[0].compareTo(iValues);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types[0].compareTo(iValues);	  int    index    =    types[0].compareTo(values);    	non-compiled	[CE]  	17	None	replace
2	[BUG]  [BUGGY]  int  index  =  values[0].compareTo(types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  values[0].compareTo(types);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  values[0].compareTo(types);	  int    index    =    types[0].compareTo(values);    	non-compiled	[CE]  	17	None	replace
3	[BUG]  [BUGGY]  int  index  =  types.indexOf(iTypes);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types.indexOf(iTypes);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf(iTypes);	  int    index    =    iTypes.indexOf(types);    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('[',  types.length));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf('[',  types.length));  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('[',  types.length));	  int    index    =    iTypes.indexOf('[',    values.length));    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length  +  1));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length  +  1));  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('[',  values.length  +  1));	  int    index    =    iTypes.indexOf('[',    values.length));    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  int  index  =  values[0].compareTo(values[1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  values[0].compareTo(values[1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  values[0].compareTo(values[1]);	  int    index    =    types[0].compareTo(values[1]);    	non-compiled	[CE]  	18	None	replace
7	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf(values[0]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf(values[0]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf(values[0]);	  int    index    =    iTypes.indexOf(types[0]);    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf(types[0],  values[1]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf(types[0],  values[1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf(types[0],  values[1]);	  int    index    =    iTypes.indexOf(types[0]);    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.length  +  1]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(new  int[types.length  +  1]);	  int[]    types    =    iTypes.toArray(new    int[types.length]);    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.length  -  1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(new  int[types.length  -  1]);	  int[]    types    =    iTypes.toArray(new    int[types.length]);    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  iTypes.get(values,  compare);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int[]  types  =  iTypes.get(values,  compare);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.get(values,  compare);	  int[]    types    =    iTypes.get(values);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('.',  values.length);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf('.',  values.length);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('.',  values.length);	  int    index    =    iTypes.indexOf('.');    	non-compiled	[CE]  	20	None	replace
13	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('.',  types.length);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf('.',  types.length);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('.',  types.length);	  int    index    =    iTypes.indexOf('.');    	non-compiled	[CE]  	20	None	replace
14	[BUG]  [BUGGY]  int  index  =  iValues[0].compareTo(values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iValues[0].compareTo(values);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iValues[0].compareTo(values);	  int    index    =    values[0].compareTo(iTypes);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  int  index  =  types.indexOf('[',  values.length));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types.indexOf('[',  values.length));  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf('[',  values.length));	  int    index    =    types.indexOf('[');    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  int  index  =  types[0].compareTo(iTypes);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types[0].compareTo(iTypes);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types[0].compareTo(iTypes);	  int    index    =    iTypes[0].compareTo(types);    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  int  index  =  indexOf(types[index]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  indexOf(types[index]);  [BUGGY]      if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  indexOf(types[index]);	  int    index    =    indexOf(values[index]);    	non-compiled	[CE]  	21	None	replace
18	[BUG]  [BUGGY]  int  index  =  indexOf(values[0]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  indexOf(values[0]);  [BUGGY]      if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  indexOf(values[0]);	  int    index    =    indexOf(values[index]);    	non-compiled	[CE]  	21	None	replace
19	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('[',  types.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf('[',  types.length);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('[',  types.length);	  int    index    =    iTypes.indexOf('[',    values.length);    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iTypes.indexOf('[',  values.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iTypes.indexOf('[',  values.length  +  1);	  int    index    =    iTypes.indexOf('[',    values.length);    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  int  index  =  types.indexOf(iValues);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types.indexOf(iValues);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf(iValues);	  int    index    =    types.indexOf(values);    	non-compiled	[CE]  	14	None	replace
22	[BUG]  [BUGGY]  int  index  =  getIndex(types);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  getIndex(types);  [BUGGY]      if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  getIndex(types);	  int    index    =    getIndex(compare);    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  int  index  =  getIndex(values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  getIndex(values);  [BUGGY]      if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  getIndex(values);	  int    index    =    getIndex(compare);    	non-compiled	[CE]  	16	None	replace
24	[BUG]  [BUGGY]  int  index  =  iValues[0].compareTo(values[1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  iValues[0].compareTo(values[1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  iValues[0].compareTo(values[1]);	  int    index    =    values[0].compareTo(iValues[1]);    	non-compiled	[CE]  	11	None	replace
25	[BUG]  [BUGGY]  int  index  =  types.indexOf(':');  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types.indexOf(':');  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf(':');	  int    index    =    iTypes.indexOf(types);    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  int  index  =  types.indexOf('.');  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types.indexOf('.');  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf('.');	  int    index    =    iTypes.indexOf('.');    	non-compiled	[CE]  	20	None	replace
27	[BUG]  [BUGGY]  int  index  =  types.indexOf('[',  values.length);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types.indexOf('[',  values.length);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types.indexOf('[',  values.length);	  int    index    =    types.indexOf('[');    	non-compiled	[CE]  	15	None	replace
28	[BUG]  [BUGGY]  int[]  types  =  iTypes!=  null?  values.toArray(types):  iTypes;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int[]  types  =  iTypes!=  null?  values.toArray(types):  iTypes;  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes!=  null?  values.toArray(types):  iTypes;	  int[]    types    =    iTypes.toArray(types);    	non-compiled	[CE]  	4	None	replace
29	[BUG]  [BUGGY]  int  index  =  indexOf(values[index],  iValues);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  indexOf(values[index],  iValues);  [BUGGY]      if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  indexOf(values[index],  iValues);	  int    index    =    indexOf(values[index]);    	non-compiled	[CE]  	21	None	replace
30	[BUG]  [BUGGY]  int  index  =  types[0].compareTo(iValues[1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int  index  =  types[0].compareTo(iValues[1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int  index  =  types[0].compareTo(iValues[1]);	  int    index    =    values[0].compareTo(iValues[1]);    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[values.length]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int[]  types  =  iTypes.toArray(new  int[values.length]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(new  int[values.length]);	  int[]    types    =    iTypes.toArray(new    int[types.length]);    	non-compiled	[CE]  	10	None	replace
32	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.size()  -  1]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }      [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4082482904638631	207	207	1	replace	int[]  types  =  iTypes.toArray(new  int[types.size()  -  1]);	  int[]    types    =    iTypes.toArray(new    int[types.size()    ]);    	non-compiled	[CE]  	19	None	replace
