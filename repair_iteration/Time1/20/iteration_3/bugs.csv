bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  types  =  iTypes.getValues();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iTypes.getValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iTypes.getValues();	  int[]    types    =    chronology.getValues();    	non-compiled	[CE]  	17	None	replace
2	[BUG]  [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  if(values  ==  null  ||  values.length  ==  0)  {  [BUGGY]      iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	if(values  ==  null  ||  values.length  ==  0)  {	  if(types    ==    null    ||    values.length    ==    0)    {    	non-compiled	[CE]  	14	None	replace
3	[BUG]  [BUGGY]  int[]  types  =  getChronology().types;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  getChronology().types;  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getChronology().types;	  int[]    types    =    getChronology();    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  int[]  types  =  getChronology().variables;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  getChronology().variables;  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getChronology().variables;	  int[]    types    =    getChronology();    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  int[]  types  =  iTypes.getInstanceTypes();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iTypes.getInstanceTypes();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iTypes.getInstanceTypes();	  int[]    types    =    chronology.getInstanceTypes();    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  int[]  types  =  iPartial.getChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iPartial.getChronology();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iPartial.getChronology();	  int[]    types    =    chronology.getChronology();    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  int[]  types  =  iChronology.getTypesInYears(values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iChronology.getTypesInYears(values);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.getTypesInYears(values);	  int[]    types    =    iChronology.getTypesInYears();    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(iChronology);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  chronology.getChronology(iChronology);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getChronology(iChronology);	  int[]    types    =    iChronology.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iChronology.getChronology(chronology,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iChronology.getChronology(chronology,  values);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.getChronology(chronology,  values);	  int[]    types    =    iChronology.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  int[]  types  =  iTypes.getTypes();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iTypes.getTypes();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iTypes.getTypes();	  int[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  int[]  values  =  iChronology.chronology.getRangeValues();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  iChronology.chronology.getRangeValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  iChronology.chronology.getRangeValues();	  int[]    values    =    iChronology.chronology.getValues();    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  getTypes().toArray(new  int[types.length  -  1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  getTypes().toArray(new  int[types.length  -  1]);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getTypes().toArray(new  int[types.length  -  1]);	  int[]    types    =    getTypes().toArray(new    int[types.length]);    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  int[]  types  =  getTypes().toArray(new  int[types.length  +  1]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  getTypes().toArray(new  int[types.length  +  1]);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getTypes().toArray(new  int[types.length  +  1]);	  int[]    types    =    getTypes().toArray(new    int[types.length]);    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  int[]  values  =  types.getValues();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  types.getValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  types.getValues();	  int[]    values    =    chronology.getValues();    	non-compiled	[CE]  	15	None	replace
15	[BUG]  [BUGGY]  int[]  values  =  this.chronology.getValues();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  this.chronology.getValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  this.chronology.getValues();	  int[]    values    =    chronology.getValues();    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  int[]  types  =  iChronology.getRangeTypes(values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iChronology.getRangeTypes(values);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.getRangeTypes(values);	  int[]    types    =    iChronology.getRangeTypes();    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  int[]  types  =  iChronology.chronology.withUTC();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iChronology.chronology.withUTC();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.chronology.withUTC();	  int[]    types    =    iChronology.chronology.getTypes();    	non-compiled	[CE]  	13	None	replace
18	[BUG]  [BUGGY]  int[]  types  =  iChronology.chronology.getTypes(this,  values);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  iChronology.chronology.getTypes(this,  values);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.chronology.getTypes(this,  values);	  int[]    types    =    iChronology.chronology.getTypes();    	non-compiled	[CE]  	13	None	replace
19	[BUG]  [BUGGY]  int[]  types  =  this.chronology.getTypes();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  this.chronology.getTypes();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  this.chronology.getTypes();	  int[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  int[]  types  =  this.chronology.getChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  this.chronology.getChronology();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  this.chronology.getChronology();	  int[]    types    =    chronology.getChronology();    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  int[]  values  =  iChronology.getRangeValues(chronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  iChronology.getRangeValues(chronology);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  iChronology.getRangeValues(chronology);	  int[]    values    =    iChronology.getRangeValues();    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  int[]  types  =  getChronology().values;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  getChronology().values;  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getChronology().values;	  int[]    types    =    getChronology();    	non-compiled	[CE]  	4	None	replace
23	[BUG]  [BUGGY]  int[]  types  =  getTypes().toArray(new  int[values.length]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  getTypes().toArray(new  int[values.length]);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getTypes().toArray(new  int[values.length]);	  int[]    types    =    getTypes().toArray(new    int[types.length]);    	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  int[]  types  =  this.chronology.getInstanceTypes();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  this.chronology.getInstanceTypes();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  this.chronology.getInstanceTypes();	  int[]    types    =    chronology.getInstanceTypes();    	non-compiled	[CE]  	18	None	replace
25	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYears(types);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  iChronology.getValuesInYears(types);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  iChronology.getValuesInYears(types);	  int[]    values    =    iChronology.getValuesInYears();    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  int[]  values  =  chronology.chronology.getValues();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  chronology.chronology.getValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  chronology.chronology.getValues();	  int[]    values    =    iChronology.chronology.getValues();    	non-compiled	[CE]  	16	None	replace
27	[BUG]  [BUGGY]  int[]  types  =  chronology.getTypesInYears();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  chronology.getTypesInYears();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getTypesInYears();	  int[]    types    =    iChronology.getTypesInYears();    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(chronology);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  chronology.getChronology(chronology);  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getChronology(chronology);	  int[]    types    =    chronology.getChronology();    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  int[]  values  =  chronology.getChronology().getValues();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  chronology.getChronology().getValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  chronology.getChronology().getValues();	  int[]    values    =    chronology.getValues();    	non-compiled	[CE]  	15	None	replace
30	[BUG]  [BUGGY]  if(types  ==  null  ||  types.length  ==  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  if(types  ==  null  ||  types.length  ==  0)  {  [BUGGY]      iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	if(types  ==  null  ||  types.length  ==  0)  {	  if(types    ==    null    ||    values.length    ==    0)    {    	non-compiled	[CE]  	14	None	replace
31	[BUG]  [BUGGY]  int[]  types  =  chronology.getRangeTypes();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  chronology.getRangeTypes();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getRangeTypes();	  int[]    types    =    iChronology.getRangeTypes();    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  int[]  values  =  chronology.getValuesInYears();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  chronology.getValuesInYears();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  chronology.getValuesInYears();	  int[]    values    =    iChronology.getValuesInYears();    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  int[]  values  =  chronology.getRangeValues();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  values  =  chronology.getRangeValues();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  chronology.getRangeValues();	  int[]    values    =    iChronology.getRangeValues();    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology().getInstanceTypes();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }      [BUGGY]  int[]  types  =  chronology.getChronology().getInstanceTypes();  [BUGGY]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getChronology().getInstanceTypes();	  int[]    types    =    chronology.getInstanceTypes();    	non-compiled	[CE]  	18	None	replace
