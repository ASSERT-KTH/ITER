bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  types  =  iChronology.getRangeTypes();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  iChronology.getRangeTypes();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.getRangeTypes();	      int[]    types    =    iChronology.getValues();    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  chronology.getChronology();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getChronology();	      int[]    types    =    iChronology.getChronology();    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  int[]  values  =  iChronology.getRangeValues();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  values  =  iChronology.getRangeValues();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  iChronology.getRangeValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  int[]  types  =  getChronology();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  getChronology();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getChronology();	      int[]    types    =    getTypes();    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  int[]  types  =  getTypes().toArray(new  int[types.length]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  getTypes().toArray(new  int[types.length]);  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getTypes().toArray(new  int[types.length]);	      int[]    types    =    getTypes();    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  if(types  ==  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  if(types  ==  null)  {  [BUGGY]    iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	if(types  ==  null)  {	  if(values    ==    null)    {    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  int[]  types  =  getValues();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  getValues();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  getValues();	      int[]    types    =    getTypes();    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYears();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  values  =  iChronology.getValuesInYears();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  iChronology.getValuesInYears();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	1	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iChronology.getTypesInYears();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  iChronology.getTypesInYears();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.getTypesInYears();	      int[]    types    =    iChronology.getTypes();    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  if(types!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  if(types!=  null)  {  [BUGGY]    iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	if(types!=  null)  {	  if(values    ==    null)    {    	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  iChronology.getChronology(chronology);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  iChronology.getChronology(chronology);  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.getChronology(chronology);	      int[]    types    =    iChronology.getChronology();    	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  chronology.getTypes();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  chronology.getTypes();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getTypes();	      int[]    types    =    iChronology.getTypes();    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  int[]  types  =  iChronology.chronology.getTypes();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  iChronology.chronology.getTypes();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  iChronology.chronology.getTypes();	      int[]    types    =    iChronology.getTypes();    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  if(types  ==  null  ||  values.length  ==  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  if(types  ==  null  ||  values.length  ==  0)  {  [BUGGY]    iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	if(types  ==  null  ||  values.length  ==  0)  {	  if    (values.length    ==    0)    {    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  int[]  values  =  chronology.getValues();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  values  =  chronology.getValues();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  chronology.getValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  int[]  values  =  iChronology.chronology.getValues();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  values  =  iChronology.chronology.getValues();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  values  =  iChronology.chronology.getValues();	      int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  int[]  types  =  chronology.getValues();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  chronology.getValues();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getValues();	      int[]    types    =    iChronology.getValues();    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  int[]  types  =  chronology.getInstanceTypes();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }    [BUGGY]  int[]  types  =  chronology.getInstanceTypes();  [BUGGY]    if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3779644730092272	202	202	1	replace	int[]  types  =  chronology.getInstanceTypes();	      int[]    types    =    iChronology.getInstanceTypes();    	non-compiled	[CE]  	5	None	replace
