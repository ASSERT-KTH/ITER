bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lastUnitField  =  loopRangeField.getFirstUnitField();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  lastUnitField  =  loopRangeField.getFirstUnitField();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	lastUnitField  =  loopRangeField.getFirstUnitField();	  lastUnitField    =    loopUnitField.getFirstUnitField();    	non-compiled	[CE]  	17	None	replace
2	[BUG]  [BUGGY]  iChronology  =  lastRangeField.withLoop();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  lastRangeField.withLoop();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  lastRangeField.withLoop();	  iChronology    =    lastRangeField.withUTC();    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  iChronology.validate(this,  iTypes);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology.validate(this,  iTypes);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology.validate(this,  iTypes);	  iChronology.validate(this,    types);    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  iChronology.validate(this,  types,  chronology);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology.validate(this,  types,  chronology);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology.validate(this,  types,  chronology);	  iChronology.validate(this,    types);    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  lastUnitField  =  iChronology.getFirstChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  lastUnitField  =  iChronology.getFirstChronology();  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	lastUnitField  =  iChronology.getFirstChronology();	  lastUnitField    =    iChronology.getLastChronology();    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(lastRangeField).withUTC();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(lastRangeField).withUTC();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  DateTimeUtils.getChronology(lastRangeField).withUTC();	  iChronology    =    DateTimeUtils.getChronology(lastUnitField).withUTC();    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  int[]  values  =  chronology.getChronology(iChronology);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  chronology.getChronology(iChronology);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  chronology.getChronology(iChronology);	  int[]    values    =    iChronology.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(chronology);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iChronology.getValues(chronology);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iChronology.getValues(chronology);	  int[]    values    =    iChronology.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(lastUnitField);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  chronology.getChronology(lastUnitField);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  chronology.getChronology(lastUnitField);	  iChronology    =    chronology.getChronology();    	non-compiled	[CE]  	18	None	replace
10	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  chronology.getChronology(this);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  chronology.getChronology(this);	  iChronology    =    chronology.getChronology();    	non-compiled	[CE]  	18	None	replace
11	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(this.loopRangeField);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(this.loopRangeField);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  DateTimeUtils.getChronology(this.loopRangeField);	  iChronology    =    DateTimeUtils.getChronology(lastUnitField);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  lastUnitField  =  loopRangeField.getLastChronology();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  lastUnitField  =  loopRangeField.getLastChronology();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	lastUnitField  =  loopRangeField.getLastChronology();	  lastUnitField    =    loopRangeField.getLastUnitField();    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  chronology.withUTC(this,  values);	  iChronology    =    chronology.withUTC(this);    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(lastUnitField);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  chronology.withUTC(lastUnitField);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  chronology.withUTC(lastUnitField);	  iChronology    =    chronology.withUTC(this);    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  int[]  values  =  iChronology.chronology.getRangeValues();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iChronology.chronology.getRangeValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iChronology.chronology.getRangeValues();	  int[]    values    =    iChronology.chronology.getPartialValues();    	non-compiled	[CE]  	20	None	replace
16	[BUG]  [BUGGY]  int[]  values  =  getChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  getChronology();  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  getChronology();	  int[]    values    =    getValues();    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  int[]  values  =  iPartial.getPartialValues();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iPartial.getPartialValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iPartial.getPartialValues();	  int[]    values    =    chronology.getPartialValues();    	non-compiled	[CE]  	19	None	replace
18	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues(iFieldIndex);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iChronology.getValues(iFieldIndex);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iChronology.getValues(iFieldIndex);	  int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  iChronology  =  getChronology().getChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  getChronology().getChronology();  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  getChronology().getChronology();	  iChronology    =    getChronology();    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  int[]  values  =  getValues().toArray(values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  getValues().toArray(values);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  getValues().toArray(values);	  int[]    values    =    getValues();    	non-compiled	[CE]  	15	None	replace
21	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValuesInYears();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iChronology.getValuesInYears();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iChronology.getValuesInYears();	  int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(loopRangeField);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(loopRangeField);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  DateTimeUtils.getChronology(loopRangeField);	  iChronology    =    DateTimeUtils.getChronology(lastUnitField);    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  iChronology  =  getChronology(chronology);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  getChronology(chronology);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  getChronology(chronology);	  iChronology    =    getChronology();    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(loopRangeField).withUTC();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(loopRangeField).withUTC();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  DateTimeUtils.getChronology(loopRangeField).withUTC();	  iChronology    =    DateTimeUtils.getChronology(lastUnitField).withUTC();    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  iTypes  =(DateTimeFieldType[])this.iTypes.toArray(new  DateTimeFieldType[this.iTypes.size()  ]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iTypes  =(DateTimeFieldType[])this.iTypes.toArray(new  DateTimeFieldType[this.iTypes.size()  ]);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iTypes  =(DateTimeFieldType[])this.iTypes.toArray(new  DateTimeFieldType[this.iTypes.size()  ]);	  iTypes    =(DateTimeFieldType[])this.iTypes.clone();    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  lastUnitField  =  loopUnitField.getFirstChronology();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  lastUnitField  =  loopUnitField.getFirstChronology();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	lastUnitField  =  loopUnitField.getFirstChronology();	  lastUnitField    =    loopUnitField.getLastChronology();    	non-compiled	[CE]  	16	None	replace
27	[BUG]  [BUGGY]  int[]  values  =  chronology.getRangeValues();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  chronology.getRangeValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  chronology.getRangeValues();	  int[]    values    =    iChronology.getRangeValues();    	non-compiled	[CE]  	12	None	replace
28	[BUG]  [BUGGY]  int[]  values  =  iChronology.getRangeValues(chronology);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iChronology.getRangeValues(chronology);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iChronology.getRangeValues(chronology);	  int[]    values    =    iChronology.getRangeValues();    	non-compiled	[CE]  	12	None	replace
29	[BUG]  [BUGGY]  int[]  values  =  chronology.getChronology().getPartialValues();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  chronology.getChronology().getPartialValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  chronology.getChronology().getPartialValues();	  int[]    values    =    chronology.getPartialValues();    	non-compiled	[CE]  	19	None	replace
30	[BUG]  [BUGGY]  int[]  values  =  chronology.chronology.getPartialValues();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  chronology.chronology.getPartialValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  chronology.chronology.getPartialValues();	  int[]    values    =    iChronology.chronology.getPartialValues();    	non-compiled	[CE]  	20	None	replace
31	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(cycle);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  iChronology  =  DateTimeUtils.getChronology(cycle);  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	iChronology  =  DateTimeUtils.getChronology(cycle);	  iChronology    =    DateTimeUtils.getChronology(lastUnitField);    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  int[]  values  =  getValues(iChronology);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  getValues(iChronology);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  getValues(iChronology);	  int[]    values    =    getValues();    	non-compiled	[CE]  	15	None	replace
33	[BUG]  [BUGGY]  int[]  values  =  chronology.getValues();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  chronology.getValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  chronology.getValues();	  int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  int[]  values  =  iChronology.chronology.getValues();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  iChronology.chronology.getValues();  [BUGGY]      iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  iChronology.chronology.getValues();	  int[]    values    =    iChronology.getValues();    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  int[]  values  =  chronology.getChronology(chronology);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }      [BUGGY]  int[]  values  =  chronology.getChronology(chronology);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	int[]  values  =  chronology.getChronology(chronology);	  int[]    values    =    iChronology.getChronology(chronology);    	non-compiled	[CE]  	11	None	replace
