bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iChronology  =  chronology.withUTC(this,  values);	  iChronology    =    chronology.withUTC(this);    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  iChronology.validate(this,  types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iChronology.validate(this,  types);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iChronology.validate(this,  types);	  iChronology.validate(this,    iTypes);    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  iPartial  =(DateTimeFieldType[])iTypes.clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iPartial  =(DateTimeFieldType[])iTypes.clone();  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iPartial  =(DateTimeFieldType[])iTypes.clone();	  iPartial    =(DateTimeFieldType[])types.clone();    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  chronology.validate(this,  iTypes,  iChronology);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  chronology.validate(this,  iTypes,  iChronology);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	chronology.validate(this,  iTypes,  iChronology);	  chronology.validate(this,    iTypes,    iValues);    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iChronology  =  chronology.getChronology(this);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iChronology  =  chronology.getChronology(this);	  iChronology    =    chronology.getChronology();    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology().withUTC();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iChronology  =  chronology.getChronology().withUTC();  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iChronology  =  chronology.getChronology().withUTC();	  iChronology    =    dateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  chronology.validate(this,  iValues,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  chronology.validate(this,  iValues,  values);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	chronology.validate(this,  iValues,  values);	  chronology.validate(this,    values,    iTypes);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  iPartial  =  iChronology.withUTC(this,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iPartial  =  iChronology.withUTC(this,  values);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iPartial  =  iChronology.withUTC(this,  values);	  iPartial    =    iChronology.withUTC(this);    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  iPartial  =  iChronology.withUTC(lastUnitField);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iPartial  =  iChronology.withUTC(lastUnitField);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iPartial  =  iChronology.withUTC(lastUnitField);	  iPartial    =    iChronology.withUTC(this);    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  iPartial  =(DateTimeFieldType[])values.clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iPartial  =(DateTimeFieldType[])values.clone();  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iPartial  =(DateTimeFieldType[])values.clone();	  iPartial    =(DateTimeFieldType[])types.clone();    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  iChronology.validate(this,  iTypes,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iChronology.validate(this,  iTypes,  values);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iChronology.validate(this,  iTypes,  values);	  iChronology.validate(this,    iTypes);    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  iChronology  =  chronologyUtils.getChronology(chronology).withUTC();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iChronology  =  chronologyUtils.getChronology(chronology).withUTC();  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iChronology  =  chronologyUtils.getChronology(chronology).withUTC();	  iChronology    =    dateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  iPartial  =  iChronology.withUTC(this,  iTypes);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();      [BUGGY]  iPartial  =  iChronology.withUTC(this,  iTypes);  [BUGGY]      chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	iPartial  =  iChronology.withUTC(this,  iTypes);	  iPartial    =    iChronology.withUTC(this);    	non-compiled	[CE]  	7	None	replace
