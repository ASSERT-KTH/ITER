bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (values.length!=  0)  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]  if  (values.length!=  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if  (values.length!=  0)  {	if  (values.length  !=  types.length)  {  	non-compiled	[CE]  	41	None	replace
2	[BUG]  [BUGGY]    [CE]  [FE]      AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    [BUGGY]  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	  	if  (values.length  !=  types.length)  {  	non-compiled	[CE]  	41	None	replace
3	[BUG]  [BUGGY]    int[]  types  =  iPartial.getTypes();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  iPartial.getTypes();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  iPartial.getTypes();		non-compiled	[CE]  	42	None	add
4	[BUG]  [BUGGY]    int[]  types  =  iChronology.getTypes();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  iChronology.getTypes();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  iChronology.getTypes();		non-compiled	[CE]  	42	None	add
5	[BUG]  [BUGGY]    int[]  types  =  iChronology.getValues();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  iChronology.getValues();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  iChronology.getValues();		non-compiled	[CE]  	42	None	add
6	[BUG]  [BUGGY]    int[]  types  =  iChronology.getPartialTypes();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  iChronology.getPartialTypes();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  iChronology.getPartialTypes();		non-compiled	[CE]  	42	None	add
7	[BUG]  [BUGGY]    int[]  values  =  iChronology.withUTC();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  values  =  iChronology.withUTC();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  values  =  iChronology.withUTC();		non-compiled	[CE]  	42	None	add
8	[BUG]  [BUGGY]    int[]  types  =  iChronology.getFieldTypes(chronology);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  iChronology.getFieldTypes(chronology);  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  iChronology.getFieldTypes(chronology);		non-compiled	[CE]  	42	None	add
9	[BUG]  [BUGGY]    int[]  types  =  chronology.getChronology();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  chronology.getChronology();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  chronology.getChronology();		non-compiled	[CE]  	42	None	add
10	[BUG]  [BUGGY]    int[]  types  =  chronology.getChronology(chronology).withUTC();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  chronology.getChronology(chronology).withUTC();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  chronology.getChronology(chronology).withUTC();		non-compiled	[CE]  	42	None	add
11	[BUG]  [BUGGY]    int[]  types  =  chronology.getChronology(chronology).getTypes();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException( "Values  array  must  not  be  null ");  }  [BUGGY]    int[]  types  =  chronology.getChronology(chronology).getTypes();  [BUGGY]  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException( "Values  array  must  be  the  same  length  as  the  types  array ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	    int[]  types  =  chronology.getChronology(chronology).getTypes();		non-compiled	[CE]  	42	None	add
