bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  values  =  iChronology.getValues();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  values  =  iChronology.getValues();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  values  =  iChronology.getValues();	      int[]    values    =    iChronology.withUTC();    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  int[]  values  =  chronology.withUTC();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  values  =  chronology.withUTC();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  values  =  chronology.withUTC();	      int[]    values    =    iChronology.withUTC();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  int[]  types  =  iChronology.getChronology();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iChronology.getChronology();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iChronology.getChronology();	      int[]    types    =    chronology.getChronology();    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  int[]  types  =  chronology.getTypes();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getTypes();	      int[]    types    =    chronology.getChronology();    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  if  (types.length!=  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if  (types.length!=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if  (types.length!=  0)  {	  if    (values.length!=    0)    {    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  if  (values.length  ==  0)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if  (values.length  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if  (values.length  ==  0)  {	  if    (values.length!=    0)    {    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  int[]  types  =  iTypes.getValues();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iTypes.getValues();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iTypes.getValues();	      int[]    types    =    iChronology.getValues();    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  int[]  types  =  iPartial.getValues();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iPartial.getValues();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iPartial.getValues();	      int[]    types    =    iChronology.getValues();    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iPartial.getPartialTypes();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iPartial.getPartialTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iPartial.getPartialTypes();	      int[]    types    =    iChronology.getPartialTypes();    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  int[]  types  =  iChronology.getChronology(chronology).getTypes();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iChronology.getChronology(chronology).getTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iChronology.getChronology(chronology).getTypes();	      int[]    types    =    chronology.getChronology(chronology).getTypes();    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  chronology.getPartials().withUTC();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getPartials().withUTC();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getPartials().withUTC();	      int[]    types    =    chronology.getChronology(chronology).withUTC();    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  iTypes.getTypes();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iTypes.getTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iTypes.getTypes();	      int[]    types    =    iPartial.getTypes();    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  int[]  types  =  chronology.getFieldTypes(iChronology);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getFieldTypes(iChronology);  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getFieldTypes(iChronology);	      int[]    types    =    iChronology.getFieldTypes(chronology);    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  int[]  types  =  chronology.getFieldTypes();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getFieldTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getFieldTypes();	      int[]    types    =    iChronology.getFieldTypes(chronology);    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  if(types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if(types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if(types  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array ");  }	      	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  int[]  types  =  iChronology.getChronology(chronology).withUTC();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iChronology.getChronology(chronology).withUTC();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iChronology.getChronology(chronology).withUTC();	      int[]    types    =    chronology.getChronology(chronology).withUTC();    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(chronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getChronology(chronology);  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getChronology(chronology);	      int[]    types    =    chronology.getChronology();    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  int[]  types  =  chronology.getPartialTypes();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getPartialTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getPartialTypes();	      int[]    types    =    iChronology.getPartialTypes();    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  if(types  ==  null)  {  types  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array   ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if(types  ==  null)  {  types  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array   ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if(types  ==  null)  {  types  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array   ");  }	      	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  if(types  ==  null)  {  types  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if(types  ==  null)  {  types  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if(types  ==  null)  {  types  =  new  int[values.length];  for(int  i  =  0;  i  <  values.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types	      	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  if(values  ==  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if(values  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if(values  ==  null)  {	  if    (values.length!=    0)    {    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  int[]  types  =  iChronology.getRangeTypes();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  iChronology.getRangeTypes();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  iChronology.getRangeTypes();	      int[]    types    =    iChronology.getValues();    	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  if(types  ==  null)  {  for(int  i  =  0;  i  <  types.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if(types  ==  null)  {  for(int  i  =  0;  i  <  types.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if(types  ==  null)  {  for(int  i  =  0;  i  <  types.length;  i++)  {  if(types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  the  same  length  as  the  types  array ");  }	      	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  if(types  ==  null)  {  for(int  i  =  0;  i  <  types.length;  i++)  {  if(values[i]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  if(types  ==  null)  {  for(int  i  =  0;  i  <  types.length;  i++)  {  if(values[i]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	if(types  ==  null)  {  for(int  i  =  0;  i  <  types.length;  i++)  {  if(values[i]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  int[]  types  =  chronology.getValues();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getValues();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getValues();	      int[]    types    =    iChronology.getValues();    	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology().withUTC();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }    [BUGGY]  int[]  types  =  chronology.getChronology().withUTC();  [BUGGY]    if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.35355339059327373	199	199	1	replace	int[]  types  =  chronology.getChronology().withUTC();	      int[]    types    =    chronology.getChronology(chronology).withUTC();    	non-compiled	[CE]  	10	None	replace
