bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  types  =  iPartial.getChronologyTypes();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  iPartial.getChronologyTypes();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  iPartial.getChronologyTypes();	  int[]    types    =    iChronology.getChronologyTypes();    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  int[]  types  =  iValues.getTypes();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  iValues.getTypes();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  iValues.getTypes();	  int[]    types    =    values.getTypes();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  int[]  types  =  iPartial.getChronology();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  iPartial.getChronology();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  iPartial.getChronology();	  int[]    types    =    iChronology.getChronology();    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  int[]  types  =  iChronology.getChronology(chronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  iChronology.getChronology(chronology);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  iChronology.getChronology(chronology);	  int[]    types    =    chronology.getChronology(iChronology);    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(this.iPartial);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  chronology.getChronology(this.iPartial);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  chronology.getChronology(this.iPartial);	  int[]    types    =    chronology.getChronology(iChronology);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  chronology.getChronology(values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  chronology.getChronology(values);	  int[]    types    =    chronology.getChronology(chronology);    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(types);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  chronology.getChronology(types);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  chronology.getChronology(types);	  int[]    types    =    chronology.getChronology(chronology);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  int[]  types  =  iTypes.getValues();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  iTypes.getValues();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  iTypes.getValues();	  int[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  iTypes.toArray(values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  iTypes.toArray(values);	  int[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  int[]  types  =  chronology.getPartialTypes();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  chronology.getPartialTypes();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  chronology.getPartialTypes();	  int[]    types    =    chronology.getChronology(chronology);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  types.getTypes();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  types.getTypes();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  types.getTypes();	  int[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  chronology.getChronology(this,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;      [BUGGY]  int[]  types  =  chronology.getChronology(this,  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	193	193	1	replace	int[]  types  =  chronology.getChronology(this,  values);	  int[]    types    =    chronology.getChronology(iChronology);    	non-compiled	[CE]  	8	None	replace
