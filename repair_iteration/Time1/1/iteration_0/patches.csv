bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	add	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  	1	1	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  	1	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	add	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  	1	1	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  	1	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	add	  	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  	1	1	replace
6	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	  	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  	1	1	replace
7	[BUG]  [BUGGY]    int[]  types  =  loopUnitField.getTypes();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    int[]  types  =  loopUnitField.getTypes();  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    int[]  types  =  loopUnitField.getTypes();		non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	2	None	add
8	[BUG]  [BUGGY]    DateTimeFieldType  loopType  =  loopUnitField.getDurationType();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    DateTimeFieldType  loopType  =  loopUnitField.getDurationType();  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    DateTimeFieldType  loopType  =  loopUnitField.getDurationType();		non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	2	None	add
9	[BUG]  [BUGGY]    DateTimeFieldType  loopType  =  loopUnitField.getLastChronology();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    DateTimeFieldType  loopType  =  loopUnitField.getLastChronology();  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    DateTimeFieldType  loopType  =  loopUnitField.getLastChronology();		non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	2	None	add
10	[BUG]  [BUGGY]    DateTimeFieldType[]  types  =  loopUnitField.getTypes();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    DateTimeFieldType[]  types  =  loopUnitField.getTypes();  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    DateTimeFieldType[]  types  =  loopUnitField.getTypes();		non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	2	None	add
11	[BUG]  [BUGGY]    int  largestValue  =  loopUnitField.getRangeDurationType();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    int  largestValue  =  loopUnitField.getRangeDurationType();  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    int  largestValue  =  loopUnitField.getRangeDurationType();		non-compiled	[CE]  cannot  find  symbol	2	None	add
12	[BUG]  [BUGGY]    int[]  types  =  loopType.getDurationType().getFields(iChronology);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    int[]  types  =  loopType.getDurationType().getFields(iChronology);  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    int[]  types  =  loopType.getDurationType().getFields(iChronology);		non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	2	None	add
13	[BUG]  [BUGGY]    int  largestValue  =  types[i  -  1].getValue();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]    int  largestValue  =  types[i  -  1].getValue();  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +        types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	    int  largestValue  =  types[i  -  1].getValue();		non-compiled	[CE]  cannot  find  symbol	2	None	add
