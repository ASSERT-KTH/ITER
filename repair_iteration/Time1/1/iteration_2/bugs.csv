bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)loopUnitField.clone();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =(DateTimeFieldType)loopUnitField.clone();  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =(DateTimeFieldType)loopUnitField.clone();	      	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	6	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +   ",    and       "    +    loopType.getName());    throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());	  	non-compiled	[CE]  unreachable  statement	3	None	add
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());  [CE]  cannot  find  symbol  Throwables  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +   ",    and       "    +    loopType.getName());    Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  Throwables.throwAssertionError( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [CE]  cannot  find  symbol  Throwables  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  Throwables.throwAssertionError( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +   ",    and       "    +    loopType.getName());    Throwables.throwAssertionError( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	add
5	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iPartial,  iChronology);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iPartial,  iChronology);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iPartial,  iChronology);	      int[]    types    =    loopType.getDurationType().getFields(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	12	None	replace
6	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  compare);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  compare);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  compare);	      int[]    types    =    loopType.getDurationType().getFields(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	12	None	replace
7	[BUG]  [BUGGY]  int[]  types  =  loopUnitField.getTypes(iChronology);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int[]  types  =  loopUnitField.getTypes(iChronology);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopUnitField.getTypes(iChronology);	      int[]    types    =    loopUnitField.getTypes();    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	7	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iPartial.getDurationType();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =  iPartial.getDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iPartial.getDurationType();	      DateTimeFieldType    loopType    =    loopUnitField.getDurationType();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	8	None	replace
9	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  lastUnitField.getDurationType();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =  lastUnitField.getDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  lastUnitField.getDurationType();	      DateTimeFieldType    loopType    =    loopUnitField.getDurationType();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	8	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	  	non-compiled	[CE]  unreachable  statement	1	None	add
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [CE]  cannot  find  symbol  Throwables  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	  	non-compiled	[CE]  cannot  find  symbol  Throwables	1	None	add
12	[BUG]  [BUGGY]  int  largestValue  =  lastUnitField.getRangeDurationType();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int  largestValue  =  lastUnitField.getRangeDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  lastUnitField.getRangeDurationType();	      int    largestValue    =    loopUnitField.getRangeDurationType();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
13	[BUG]  [BUGGY]      int[]  types  =  loopType.getTypes();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]      int[]  types  =  loopType.getTypes();  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	        int[]  types  =  loopType.getTypes();	  	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	5	None	add
14	[BUG]  [BUGGY]  int  largestValue  =  types[i  *  1].getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int  largestValue  =  types[i  *  1].getValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  types[i  *  1].getValue();	      int    largestValue    =    types[i    -    1].getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
15	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iPartial.getTypes();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType[]  types  =  iPartial.getTypes();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType[]  types  =  iPartial.getTypes();	      DateTimeFieldType[]    types    =    loopUnitField.getTypes();    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	10	None	replace
16	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getLastChronology();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getLastChronology();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iChronology.getLastChronology();	      DateTimeFieldType    loopType    =    loopUnitField.getLastChronology();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	9	None	replace
17	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iPartial.getLastChronology();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]              AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =  iPartial.getLastChronology();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iPartial.getLastChronology();	      DateTimeFieldType    loopType    =    loopUnitField.getLastChronology();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	9	None	replace
18	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [CE]  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	  	non-compiled	[CE]  	1	None	add
19	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  if(compare  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  if(compare  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    if(compare  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  if(compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  if(compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    if(compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
21	[BUG]  [BUGGY]      int  iValues  =  loopUnitField.getValues();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]      int  iValues  =  loopUnitField.getValues();  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	        int  iValues  =  loopUnitField.getValues();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
22	[BUG]  [BUGGY]      DateTimeFieldType  loopType  =  loopUnitField.getLocale();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]      DateTimeFieldType  loopType  =  loopUnitField.getLocale();  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	        DateTimeFieldType  loopType  =  loopUnitField.getLocale();	  	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	5	None	add
23	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  loopType.getDurationType();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =  loopType.getDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  loopType.getDurationType();	      DateTimeFieldType    loopType    =    loopUnitField.getDurationType();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	8	None	replace
24	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getDurationType();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getDurationType();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iChronology.getDurationType();	      DateTimeFieldType    loopType    =    loopUnitField.getDurationType();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	8	None	replace
25	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.getTypes();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType[]  types  =  iTypes.getTypes();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType[]  types  =  iTypes.getTypes();	      DateTimeFieldType[]    types    =    loopUnitField.getTypes();    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	10	None	replace
26	[BUG]  [BUGGY]  int  largestValue  =  iTypes[i  -  1].getValue();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int  largestValue  =  iTypes[i  -  1].getValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  iTypes[i  -  1].getValue();	      int    largestValue    =    types[i    -    1].getValue();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
27	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  values);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  values);  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  values);	      int[]    types    =    loopType.getDurationType().getFields(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	12	None	replace
28	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [CE]  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +   ",    and       "    +    loopType.getName());    Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());	  	non-compiled	[CE]  	3	None	add
29	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  loopType.getTypes();  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]        AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  DateTimeFieldType[]  types  =  loopType.getTypes();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType[]  types  =  loopType.getTypes();	      DateTimeFieldType[]    types    =    loopUnitField.getTypes();    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	10	None	replace
30	[BUG]  [BUGGY]      if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]      if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	        if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
31	[BUG]  [BUGGY]      if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]      if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());  }  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	        if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  if(compare  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  if(compare  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  }  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +   ",    and       "    +    loopType.getName());    if(compare  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  if(compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and     "  +  loopType.getName());  if(compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  }  [BUGGY]    types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +   ",    and       "    +    loopType.getName());    if(compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   ",  and   "  +  loopType.getName());  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
34	[BUG]  [BUGGY]  int  largestValue  =  loopUnitField.getRangeDurationType()  -  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int  largestValue  =  loopUnitField.getRangeDurationType()  -  1;  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  loopUnitField.getRangeDurationType()  -  1;	      int    largestValue    =    loopUnitField.getRangeDurationType();    	non-compiled	[CE]  not  a  statement	11	None	replace
35	[BUG]  [BUGGY]  int  largestValue  =  values[i  -  1].getValue();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {    [BUGGY]  int  largestValue  =  values[i  -  1].getValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +        types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  values[i  -  1].getValue();	      int    largestValue    =    types[i    -    1].getValue();    	non-compiled	[CE]  not  a  statement	13	None	replace
