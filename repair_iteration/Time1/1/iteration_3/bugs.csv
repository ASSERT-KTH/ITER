bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throwAssertionError( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Throwables.throwAssertionError( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Throwables.throwAssertionError( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());	  throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:       "    +    types[i    -    1].getName()    +       ",    and           "    +    loopType.getName());    Throwables.throwAssertionError(   "Types    array    must    be    in    order    largest-smallest:       "    +    types[i    -    1].getName()    +       ",    and       "    +    loopType.getName());    	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  DurationFieldType  loopType  =(DateTimeFieldType)loopUnitField.clone();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DurationFieldType  loopType  =(DateTimeFieldType)loopUnitField.clone();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DurationFieldType  loopType  =(DateTimeFieldType)loopUnitField.clone();	  DateTimeFieldType    loopType    =(DateTimeFieldType)loopUnitField.clone();    	non-compiled	[CE]  not  a  statement	1	None	replace
3	[BUG]  [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	  throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:       "    +    types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    Throwables.warning(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    	non-compiled	[CE]  not  a  statement	11	None	replace
4	[BUG]  [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  [CE]  cannot  find  symbol  Throwables  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());	  throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:       "    +    types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    Throwables.warning(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    	non-compiled	[CE]  cannot  find  symbol  Throwables	11	None	replace
5	[BUG]  [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());  [CE]  cannot  find  symbol  Throwables  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   ",  and "  +  loopType.getName());	  throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:       "    +    types[i    -    1].getName()    +       ",    and           "    +    loopType.getName());    Throwables.warning(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       ",    and   "    +    loopType.getName());    	non-compiled	[CE]  cannot  find  symbol  Throwables	3	None	replace
6	[BUG]  [BUGGY]  int[]  types  =  loopUnitField.getTypes(iPartial,  iChronology);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopUnitField.getTypes(iPartial,  iChronology);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopUnitField.getTypes(iPartial,  iChronology);	  int[]    types    =    loopUnitField.getTypes(iChronology);    	non-compiled	[CE]  not  a  statement	7	None	replace
7	[BUG]  [BUGGY]  int[]  types  =  loopUnitField.getTypes(iChronology,  compare);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopUnitField.getTypes(iChronology,  compare);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopUnitField.getTypes(iChronology,  compare);	  int[]    types    =    loopUnitField.getTypes(iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	7	None	replace
8	[BUG]  [BUGGY]  degree  =  degree.getRangeDurationType();  [CE]  cannot  find  symbol  degree  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  degree  =  degree.getRangeDurationType();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	degree  =  degree.getRangeDurationType();	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  degree	30	None	replace
9	[BUG]  [BUGGY]  degree  =  degree.getLeadingDurationType();  [CE]  cannot  find  symbol  degree  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  degree  =  degree.getLeadingDurationType();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	degree  =  degree.getLeadingDurationType();	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  degree	30	None	replace
10	[BUG]  [BUGGY]  int  largestValue  =  loopUnitField.getDurationType()  -  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int  largestValue  =  loopUnitField.getDurationType()  -  1;  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  loopUnitField.getDurationType()  -  1;	  int    largestValue    =    loopUnitField.getRangeDurationType()    -    1;    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iPartial,  compare);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iPartial,  compare);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iPartial,  compare);	  int[]    types    =    loopType.getDurationType().getFields(iChronology,    compare);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	6	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iPartial,  values);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iPartial,  values);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iPartial,  values);	  int[]    types    =    loopType.getDurationType().getFields(iChronology,    values);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	27	None	replace
13	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  iPartial);  [CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  iPartial);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  iPartial);	  int[]    types    =    loopType.getDurationType().getFields(iPartial,    iChronology);    	non-compiled	[CE]  variable  types  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	5	None	replace
14	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  i);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  i);	  int[]    types    =    loopType.getDurationType().getFields(iPartial,    iChronology);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iPartial.getFirstChronology();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  iPartial.getFirstChronology();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iPartial.getFirstChronology();	  DateTimeFieldType    loopType    =    iPartial.getLastChronology();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	17	None	replace
16	[BUG]  [BUGGY]  int[]  types  =  iTypes.getTypes();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  iTypes.getTypes();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  iTypes.getTypes();	          int[]    types    =    loopType.getTypes();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  degrees[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  degrees[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	degrees[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +   "    and       "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	31	None	replace
18	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getLocale();  [CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getLocale();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iChronology.getLocale();	          DateTimeFieldType    loopType    =    loopUnitField.getLocale();    	non-compiled	[CE]  variable  loopType  is  already  defined  in  constructor  Partial(DateTimeFieldType[],int[],Chronology)	22	None	replace
19	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  lastUnitField.getLocale();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  lastUnitField.getLocale();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  lastUnitField.getLocale();	          DateTimeFieldType    loopType    =    loopUnitField.getLocale();    	non-compiled	[CE]  	22	None	replace
20	[BUG]  [BUGGY]  int  iValues  =  lastUnitField.getValues();  [CE]  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int  iValues  =  lastUnitField.getValues();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  iValues  =  lastUnitField.getValues();	          int    iValues    =    loopUnitField.getValues();    	non-compiled	[CE]  	21	None	replace
21	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  parametersNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  parametersNode);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  parametersNode);	  int[]    types    =    loopType.getDurationType().getFields(iChronology,    values);    	non-compiled	[CE]  	27	None	replace
22	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getLastChronology(compare);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  iChronology.getLastChronology(compare);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  iChronology.getLastChronology(compare);	  DateTimeFieldType    loopType    =    iChronology.getLastChronology();    	non-compiled	[CE]  	16	None	replace
23	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  loopType.getLastChronology();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  loopType.getLastChronology();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  loopType.getLastChronology();	  DateTimeFieldType    loopType    =    iPartial.getLastChronology();    	non-compiled	[CE]  	17	None	replace
24	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  dataType);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  dataType);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  dataType);	  int[]    types    =    loopType.getDurationType().getFields(iPartial,    iChronology);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  AND "  +  loopType.getName());  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  AND "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Throwables.warning( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  AND "  +  loopType.getName());	  throw    new    IllegalArgumentException(       "Types    array    must    be    in    order    largest-smallest:       "    +    types[i    -    1].getName()    +           "    and           "    +    loopType.getName());    Throwables.warning(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and       "    +    loopType.getName());    	non-compiled	[CE]  <identifier>  expected	11	None	replace
26	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  loopType.getRangeDurationType();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  loopType.getRangeDurationType();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  loopType.getRangeDurationType();	  DateTimeFieldType    loopType    =    loopType.getDurationType();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
27	[BUG]  [BUGGY]  int[]  types  =  loopType.getTypes().toArray(new  int[types.size()  ]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getTypes().toArray(new  int[types.size()  ]);  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getTypes().toArray(new  int[types.size()  ]);	          int[]    types    =    loopType.getTypes();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  aughtExceptionHandler.handleMissingName( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	aughtExceptionHandler.handleMissingName( "Types  array  must  not  contain  duplicate: "  +  types[i  -  1].getName()  +   "  and "  +  loopType.getName());	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +   "    and       "    +    loopType.getName());    }    	non-compiled	[CE]  not  a  statement	31	None	replace
29	[BUG]  [BUGGY]  Iterator  <  DateTimeFieldType>  loopTypes  =  loopType.getRangeDurationType().iterator();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Iterator  <  DateTimeFieldType>  loopTypes  =  loopType.getRangeDurationType().iterator();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Iterator  <  DateTimeFieldType>  loopTypes  =  loopType.getRangeDurationType().iterator();	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	30	None	replace
30	[BUG]  [BUGGY]  Iterator  <  DateTimeFieldType>  loopTypes  =  loopType.getRangeDurationType();  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  Iterator  <  DateTimeFieldType>  loopTypes  =  loopType.getRangeDurationType();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	Iterator  <  DateTimeFieldType>  loopTypes  =  loopType.getRangeDurationType();	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
31	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  dataArea);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  dataArea);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  dataArea);	  int[]    types    =    loopType.getDurationType().getFields(iPartial,    iChronology);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  DateTimeFieldType  loopType  =  loopType.getLocale();  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType  loopType  =  loopType.getLocale();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType  loopType  =  loopType.getLocale();	          DateTimeFieldType    loopType    =    loopUnitField.getLocale();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
33	[BUG]  [BUGGY]  int  iValues  =  this.loopUnitField.getValues();  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int  iValues  =  this.loopUnitField.getValues();  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  iValues  =  this.loopUnitField.getValues();	          int    iValues    =    loopUnitField.getValues();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
34	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  loopTypes.getTypes();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  DateTimeFieldType[]  types  =  loopTypes.getTypes();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	DateTimeFieldType[]  types  =  loopTypes.getTypes();	  DateTimeFieldType[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
35	[BUG]  [BUGGY]  int[]  types  =  loopUnitField.getTypes(iChronology,  values);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopUnitField.getTypes(iChronology,  values);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopUnitField.getTypes(iChronology,  values);	  int[]    types    =    loopUnitField.getTypes(iChronology);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  int  largestValue  =  types[i  *  2].getValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int  largestValue  =  types[i  *  2].getValue();  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int  largestValue  =  types[i  *  2].getValue();	  int    largestValue    =    types[i    *    1].getValue();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
37	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  types);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  types);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  types);	  int[]    types    =    loopType.getDurationType().getFields(iChronology,    values);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
38	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  [Delete]  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	[Delete]	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +   "    and       "    +    loopType.getName());    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
39	[BUG]  [BUGGY]  aughtExceptionHandler(throwable).throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  aughtExceptionHandler(throwable).throw  new  IllegalArgumentException( " ");  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	aughtExceptionHandler(throwable).throw  new  IllegalArgumentException( " ");	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    contain    duplicate:   "    +    types[i    -    1].getName()    +   "    and       "    +    loopType.getName());    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
40	[BUG]  [BUGGY]  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  [BUGGY]      types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());	          if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
41	[BUG]  [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  variables);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {      [BUGGY]  int[]  types  =  loopType.getDurationType().getFields(iChronology,  variables);  [BUGGY]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +        types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	int[]  types  =  loopType.getDurationType().getFields(iChronology,  variables);	  int[]    types    =    loopType.getDurationType().getFields(iChronology,    compare);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
