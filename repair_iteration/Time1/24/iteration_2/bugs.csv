bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  values  =  chronology.getPartialValues();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  int[]  values  =  chronology.getPartialValues();  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	int[]  values  =  chronology.getPartialValues();	      int[]    values    =    iChronology.getPartialValues();    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    null   ");    }    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    null   ");    }    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  tries  ==  null  ||  types.length  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  tries  ==  null  ||  types.length  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	tries  ==  null  ||  types.length  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    be    null.   ");    }    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  tries  ==  null  ||  types.length  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  tries  ==  null  ||  types.length  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	tries  ==  null  ||  types.length  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null ");  }	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    be    null   ");    }    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>();  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	nested  =  new  LinkedList  <  DateTimeFieldType>();	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    be    null.   ");    }    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>(types);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  nested  =  new  LinkedList  <  DateTimeFieldType>(types);  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	nested  =  new  LinkedList  <  DateTimeFieldType>(types);	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    be    null.   ");    }    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  nested  =  new  LinkedHashMap  <  DateTimeFieldType>();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  nested  =  new  LinkedHashMap  <  DateTimeFieldType>();  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	nested  =  new  LinkedHashMap  <  DateTimeFieldType>();	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    null   ");    }    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  tries  ==  null  ||  types.length  <  =  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  tries  ==  null  ||  types.length  <  =  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	tries  ==  null  ||  types.length  <  =  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  be  null. ");  }	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    not    be    null.   ");    }    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  null ");  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  null ");  }  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	tries  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  null ");  }	      if(types    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    null   ");    }    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  int[]  values  =  iChronology.getPartialValues(chronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }    [BUGGY]  int[]  values  =  iChronology.getPartialValues(chronology);  [BUGGY]    if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.3333333333333333	196	196	1	replace	int[]  values  =  iChronology.getPartialValues(chronology);	      int[]    values    =    iChronology.getPartialValues();    	non-compiled	[CE]  	4	None	replace
