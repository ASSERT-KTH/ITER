bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] throw new IllegalArgumentException("Types array must be in order largest-smallest: " +  types[i - 1].getName() + " < " + loopType.getName()); [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { [BUGGY] throw new IllegalArgumentException("Types array must be in order largest-smallest: " +       types[i - 1].getName() + " < " + loopType.getName()); [BUGGY] types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { [BUGGY] [BUGGY] throw new IllegalArgumentException("Types array must be in order largest-smallest: " +       types[i - 1].getName() + " < " + loopType.getName()); types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	add	
3	[BUG] [BUGGY] if (durationField.isSupported()) { [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] public int compareTo(DurationField durationField) { [BUGGY] if (durationField.isSupported()) { [BUGGY] return 1; } return 0; } [CLASS] UnsupportedDurationField [METHOD] compareTo [RETURN_TYPE] int  DurationField durationField [VARIABLES] boolean HashMap cCache DurationField durationField long duration instant minuendInstant serialVersionUID subtrahendInstant value DurationFieldType iType type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	227	227	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] public int compareTo(DurationField durationField) { [BUGGY] [BUGGY] if (durationField.isSupported()) { return 1; } return 0; } [CLASS] UnsupportedDurationField [METHOD] compareTo [RETURN_TYPE] int  DurationField durationField [VARIABLES] boolean HashMap cCache DurationField durationField long duration instant minuendInstant serialVersionUID subtrahendInstant value DurationFieldType iType type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	227	227	1	add	
5	[BUG] [BUGGY] return 1; [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] public int compareTo(DurationField durationField) { if (durationField.isSupported()) { [BUGGY] return 1; [BUGGY] } return 0; } [CLASS] UnsupportedDurationField [METHOD] compareTo [RETURN_TYPE] int  DurationField durationField [VARIABLES] boolean HashMap cCache DurationField durationField long duration instant minuendInstant serialVersionUID subtrahendInstant value DurationFieldType iType type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	228	228	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] public int compareTo(DurationField durationField) { if (durationField.isSupported()) { [BUGGY] [BUGGY] return 1; } return 0; } [CLASS] UnsupportedDurationField [METHOD] compareTo [RETURN_TYPE] int  DurationField durationField [VARIABLES] boolean HashMap cCache DurationField durationField long duration instant minuendInstant serialVersionUID subtrahendInstant value DurationFieldType iType type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	228	228	1	add	
7	[BUG] [BUGGY] } [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] public Partial(DateTimeFieldType[] types, int[] values) { this(types, values, null); [BUGGY] } [BUGGY]  [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] DateTimeFieldType[],int[])  DateTimeFieldType[] types int[] values [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial int[] iValues values Chronology chrono chronology iChronology long serialVersionUID DateTimeFormatter[] iFormatter int iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	176	176	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] public Partial(DateTimeFieldType[] types, int[] values) { this(types, values, null); [BUGGY] [BUGGY] } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] DateTimeFieldType[],int[])  DateTimeFieldType[] types int[] values [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial int[] iValues values Chronology chrono chronology iChronology long serialVersionUID DateTimeFormatter[] iFormatter int iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	176	176	1	add	
9	[BUG] [BUGGY] iValues = (int[]) values.clone(); [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); [BUGGY] iValues = (int[]) values.clone(); [BUGGY] } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); [BUGGY] [BUGGY] iValues = (int[]) values.clone(); } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	add	
11	[BUG] [BUGGY] } [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); [BUGGY] } [BUGGY]  [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	251	251	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); [BUGGY] [BUGGY] } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	251	251	1	add	
13	[BUG] [BUGGY] iTypes = (DateTimeFieldType[]) types.clone(); [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } [BUGGY] iTypes = (DateTimeFieldType[]) types.clone(); [BUGGY] chronology.validate(this, values); iValues = (int[]) values.clone(); } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } [BUGGY] [BUGGY] iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	248	248	1	add	
15	[BUG] [BUGGY] chronology.validate(this, values); [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); [BUGGY] chronology.validate(this, values); [BUGGY] iValues = (int[]) values.clone(); } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); [BUGGY] [BUGGY] chronology.validate(this, values); iValues = (int[]) values.clone(); } [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5	249	249	1	add	
17	[BUG] [BUGGY] DurationField lastUnitField = null; [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } [BUGGY] DurationField lastUnitField = null; [BUGGY] for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } [BUGGY] [BUGGY] DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	add	
19	[BUG] [BUGGY] for (int i = 0; i < types.length; i++) { [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; [BUGGY] for (int i = 0; i < types.length; i++) { [BUGGY] DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	213	213	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testConstructorEx7_TypeArray_intArray [CONTEXT] iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; [BUGGY] [BUGGY] for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { [CLASS] Partial Property [METHOD] <init> [RETURN_TYPE] Chronology)  DateTimeFieldType[] types int[] values Chronology chronology [VARIABLES] boolean DateTimeFieldType[] iTypes types Partial iPartial DateTimeFieldType loopType int[] iValues values Chronology chrono chronology iChronology DurationField lastRangeField lastUnitField loopRangeField loopUnitField long serialVersionUID DateTimeFormatter[] iFormatter int compare i iFieldIndex value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	213	213	1	add	
