bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  int  compareTo(DurationField  durationField)  {  if  (durationField.isSupported())  {  [BUGGY]  return  0;  [BUGGY]  }  return  0;  }  [CLASS]  UnsupportedDurationField  [METHOD]  compareTo  [RETURN_TYPE]  int  DurationField  durationField  [VARIABLES]  boolean  HashMap  cCache  DurationField  durationField  long  duration  instant  minuendInstant  serialVersionUID  subtrahendInstant  value  DurationFieldType  iType  type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	228	228	1	add	return  0;	return  1;  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	5	1	replace
52	[BUG]  [BUGGY]  return  0;  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  int  compareTo(DurationField  durationField)  {  if  (durationField.isSupported())  {  [BUGGY]  return  0;  [BUGGY]  }  return  0;  }  [CLASS]  UnsupportedDurationField  [METHOD]  compareTo  [RETURN_TYPE]  int  DurationField  durationField  [VARIABLES]  boolean  HashMap  cCache  DurationField  durationField  long  duration  instant  minuendInstant  serialVersionUID  subtrahendInstant  value  DurationFieldType  iType  type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	228	228	1	replace	return  0;	return  1;  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	5	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	add	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	1	1	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + "  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	1	1	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	add	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	1	1	replace
85	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  [BUGGY]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [BUGGY]  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	1.0	219	220	1	replace	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());	throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +    types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	1	1	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	213	213	1	add	for(int  i  =  0;  i  <  values.length;  i++)  {	for  (int  i  =  0;  i  <  types.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	19	1	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  null:  index   "  +  i);  }  }  DurationField  lastUnitField  =  null;  [BUGGY]  for(int  i  =  0;  i  <  values.length;  i++)  {  [BUGGY]  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	213	213	1	replace	for(int  i  =  0;  i  <  values.length;  i++)  {	for  (int  i  =  0;  i  <  types.length;  i++)  {  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	19	1	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values)  {  this(types,  values,  null);  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(values);  [BUGGY]    [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  DateTimeFieldType[],int[])  DateTimeFieldType[]  types  int[]  values  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  int[]  iValues  values  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	176	176	1	add	iChronology  =  DateTimeUtils.getChronology(values);	}  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	7	1	replace
302	[BUG]  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(values);  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  Partial(DateTimeFieldType[]  types,  int[]  values)  {  this(types,  values,  null);  [BUGGY]  iChronology  =  DateTimeUtils.getChronology(values);  [BUGGY]    [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  DateTimeFieldType[],int[])  DateTimeFieldType[]  types  int[]  values  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  int[]  iValues  values  Chronology  chrono  chronology  iChronology  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	176	176	1	replace	iChronology  =  DateTimeUtils.getChronology(values);	}  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	7	1	replace
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  int  compareTo(DurationField  durationField)  {  [BUGGY]  if(durationField  ==  null  ||  durationField.isSupported())  {  [BUGGY]  return  1;  }  return  0;  }  [CLASS]  UnsupportedDurationField  [METHOD]  compareTo  [RETURN_TYPE]  int  DurationField  durationField  [VARIABLES]  boolean  HashMap  cCache  DurationField  durationField  long  duration  instant  minuendInstant  serialVersionUID  subtrahendInstant  value  DurationFieldType  iType  type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	227	227	1	add	if(durationField  ==  null  ||  durationField.isSupported())  {	if  (durationField.isSupported())  {  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	3	1	replace
2	[BUG]  [BUGGY]  if(durationField  ==  null  ||  durationField.isSupported())  {  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  int  compareTo(DurationField  durationField)  {  [BUGGY]  if(durationField  ==  null  ||  durationField.isSupported())  {  [BUGGY]  return  1;  }  return  0;  }  [CLASS]  UnsupportedDurationField  [METHOD]  compareTo  [RETURN_TYPE]  int  DurationField  durationField  [VARIABLES]  boolean  HashMap  cCache  DurationField  durationField  long  duration  instant  minuendInstant  serialVersionUID  subtrahendInstant  value  DurationFieldType  iType  type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	227	227	1	replace	if(durationField  ==  null  ||  durationField.isSupported())  {	if  (durationField.isSupported())  {  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	3	1	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  int  compareTo(DurationField  durationField)  {  if  (durationField.isSupported())  {  [BUGGY]  return  2;  [BUGGY]  }  return  0;  }  [CLASS]  UnsupportedDurationField  [METHOD]  compareTo  [RETURN_TYPE]  int  DurationField  durationField  [VARIABLES]  boolean  HashMap  cCache  DurationField  durationField  long  duration  instant  minuendInstant  serialVersionUID  subtrahendInstant  value  DurationFieldType  iType  type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	228	228	1	add	return  2;	return  1;  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	5	1	replace
125	[BUG]  [BUGGY]  return  2;  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray  [CONTEXT]  public  int  compareTo(DurationField  durationField)  {  if  (durationField.isSupported())  {  [BUGGY]  return  2;  [BUGGY]  }  return  0;  }  [CLASS]  UnsupportedDurationField  [METHOD]  compareTo  [RETURN_TYPE]  int  DurationField  durationField  [VARIABLES]  boolean  HashMap  cCache  DurationField  durationField  long  duration  instant  minuendInstant  serialVersionUID  subtrahendInstant  value  DurationFieldType  iType  type  	projects/Time1/src/main/java/org/joda/time/field/UnsupportedDurationField.java	0.7071067811865475	228	228	1	replace	return  2;	return  1;  	compilable	  [FE]  AssertionFailedError  testConstructorEx7_TypeArray_intArray	5	1	replace
