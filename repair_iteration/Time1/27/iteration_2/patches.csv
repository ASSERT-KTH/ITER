bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(types);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.withUTC(types);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.withUTC(types);	  iChronology    =    chronology.withUTC(values);    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(values,  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.withUTC(values,  null);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.withUTC(values,  null);	  iChronology    =    chronology.withUTC(values);    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  iPartial  =  types.withZone();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iPartial  =  types.withZone();  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iPartial  =  types.withZone();	  iPartial    =    types.withUTC();    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  types  =  new  int[values.length];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  types  =  new  int[values.length];  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	types  =  new  int[values.length];	  if(types    ==    null)    {    types    =    new    int[values.length];    }    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  if(values  ==  null)  {  types  =  new  int[values.length];  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  if(values  ==  null)  {  types  =  new  int[values.length];  }  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	if(values  ==  null)  {  types  =  new  int[values.length];  }	  if(types    ==    null)    {    types    =    new    int[values.length];    }    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(getMillis(),  values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(getMillis(),  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(getMillis(),  values);	  iChronology    =    chronology.getChronology(getMillis());    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(getPartial());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(getPartial());  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(getPartial());	  iChronology    =    chronology.getChronology(getMillis());    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(false);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(false);	  iChronology    =    chronology.getChronology(true);    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(false,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(false,  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(false,  values);	  iChronology    =    chronology.getChronology(true);    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  iTypes.toArray(types);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iTypes.toArray(types);	  int[]    types    =    iTypes.toArray(values);    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(values,  chronology);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  iTypes.toArray(values,  chronology);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iTypes.toArray(values,  chronology);	  int[]    types    =    iTypes.toArray(values);    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  iPartial.getPartialTypes();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  iPartial.getPartialTypes();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iPartial.getPartialTypes();	  int[]    types    =    chronology.getPartialTypes();    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  int[]  types  =  iTypes.getPartialTypes();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  iTypes.getPartialTypes();  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iTypes.getPartialTypes();	  int[]    types    =    chronology.getPartialTypes();    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  ]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  ]);  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  ]);	  DateTimeFieldType[]    types    =    types.toArray(new    DateTimeFieldType[types.size()    ]);    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this,  values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(this,  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(this,  values);	  iChronology    =    chronology.getChronology(this);    	non-compiled	[CE]  	15	None	replace
16	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this,  types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(this,  types);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(this,  types);	  iChronology    =    chronology.getChronology(this);    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray();  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray();	  DateTimeFieldType[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  int[]  types  =  types.getValues();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  types.getValues();  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  types.getValues();	  int[]    types    =    types.getTypes();    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  if(values!=  null)  {  types  =  new  int[values.length];  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  if(values!=  null)  {  types  =  new  int[values.length];  }  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	if(values!=  null)  {  types  =  new  int[values.length];  }	  if(types    ==    null)    {    types    =    new    int[values.length];    }    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(getBase());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(getBase());  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(getBase());	  iChronology    =    chronology.getChronology(getMillis());    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes  ==  null?  null  :  iTypes.getTypes();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType[]  types  =  iTypes  ==  null?  null  :  iTypes.getTypes();  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  iTypes  ==  null?  null  :  iTypes.getTypes();	  DateTimeFieldType[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(null);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(null);	  iChronology    =    chronology.getChronology(true);    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(null,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(null,  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(null,  values);	  iChronology    =    chronology.getChronology(true);    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  int[]  types  =  iValues.getTypes();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  iValues.getTypes();  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iValues.getTypes();	  int[]    types    =    values.getTypes();    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  Chronology  chronology  =  DateTimeUtils.getChronology(chronology);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  Chronology  chronology  =  DateTimeUtils.getChronology(chronology);  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	Chronology  chronology  =  DateTimeUtils.getChronology(chronology);	  Chronology    chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  int[]  types  =  iValues.toArray(values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  int[]  types  =  iValues.toArray(values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iValues.toArray(values);	  int[]    types    =    iTypes.toArray(values);    	non-compiled	[CE]  	13	None	replace
27	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.withUTC(this,  values);	  iChronology    =    chronology.withUTC(values);    	non-compiled	[CE]  	4	None	replace
28	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  types.toArray(new  DateTimeFieldType[values.size()  ]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType[]  types  =  types.toArray(new  DateTimeFieldType[values.size()  ]);  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  types.toArray(new  DateTimeFieldType[values.size()  ]);	  DateTimeFieldType[]    types    =    types.toArray(new    DateTimeFieldType[types.size()    ]);    	non-compiled	[CE]  	14	None	replace
29	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  types.toArray(values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType[]  types  =  types.toArray(values);  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  types.toArray(values);	  DateTimeFieldType[]    types    =    types.getTypes();    	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(true,  values);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  iChronology  =  chronology.getChronology(true,  values);  [BUGGY]      if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(true,  values);	  iChronology    =    chronology.getChronology(true);    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  values.getTypes();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();      [BUGGY]  DateTimeFieldType[]  types  =  values.getTypes();  [BUGGY]      iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  be  null     ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(     "Values  array  must  not  be  null     ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(     "Values  array  must  be  the  same  length  as  the  types  array     ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  values.getTypes();	  DateTimeFieldType[]    types    =    iTypes.getTypes();    	non-compiled	[CE]  	8	None	replace
