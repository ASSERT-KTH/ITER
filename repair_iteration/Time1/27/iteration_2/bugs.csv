bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  types  =  types.getTypes();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  int[]  types  =  types.getTypes();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  types.getTypes();	      int[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  int[]  types  =  iTypes.getTypes();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  int[]  types  =  iTypes.getTypes();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iTypes.getTypes();	      int[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  chronology  =  DateTimeUtils.getChronology(types);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  chronology  =  DateTimeUtils.getChronology(types);  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	chronology  =  DateTimeUtils.getChronology(types);	      chronology    =    DateTimeUtils.getChronology(chronology);    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(values);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  chronology.withUTC(values);  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.withUTC(values);	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  if(types  ==  null)  {  types  =  new  int[values.length];  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  if(types  ==  null)  {  types  =  new  int[values.length];  }  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	if(types  ==  null)  {  types  =  new  int[values.length];  }	      	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  Chronology  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  Chronology  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	Chronology  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();	      chronology    =    DateTimeUtils.getChronology(chronology).withUTC();    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  types.getTypes();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType[]  types  =  types.getTypes();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  types.getTypes();	      DateTimeFieldType[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.getTypes();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType[]  types  =  iTypes.getTypes();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  iTypes.getTypes();	      DateTimeFieldType[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  iPartial  =  types.withUTC();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iPartial  =  types.withUTC();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iPartial  =  types.withUTC();	      iPartial    =    chronology.withUTC();    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(true);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  chronology.getChronology(true);  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(true);	  iChronology    =    chronology.getChronology();    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(getMillis());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  chronology.getChronology(getMillis());  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(getMillis());	  iChronology    =    chronology.getChronology();    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  values.getTypes();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  int[]  types  =  values.getTypes();  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  values.getTypes();	      int[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(values);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  int[]  types  =  iTypes.toArray(values);  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  iTypes.toArray(values);	      	non-compiled	[CE]  	3	None	replace
14	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  types.toArray(new  DateTimeFieldType[types.size()  ]);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  DateTimeFieldType[]  types  =  types.toArray(new  DateTimeFieldType[types.size()  ]);  [BUGGY]    iChronology  =  chronology;  if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	DateTimeFieldType[]  types  =  types.toArray(new  DateTimeFieldType[types.size()  ]);	      DateTimeFieldType[]    types    =    chronology.getTypes();    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  iChronology  =  chronology.getChronology(this);  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	iChronology  =  chronology.getChronology(this);	  iChronology    =    chronology.getChronology();    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  int[]  types  =  chronology.getPartialTypes();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Partial(DateTimeFieldType[]  types,  int[]  values,  Chronology  chronology)  {  super();  chronology  =  DateTimeUtils.getChronology(chronology).withUTC();    [BUGGY]  int[]  types  =  chronology.getPartialTypes();  [BUGGY]    if  (types  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  be  null   ");  }  if  (values  ==  null)  {  throw  new  IllegalArgumentException(   "Values  array  must  not  be  null   ");  }  if  (values.length  !=  types.length)  {  throw  new  IllegalArgumentException(   "Values  array  must  be  the  same  length  as  the  types  array   ");  }  if  (types.length  ==  0)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.31622776601683794	192	192	1	replace	int[]  types  =  chronology.getPartialTypes();	      	non-compiled	[CE]  	3	None	replace
