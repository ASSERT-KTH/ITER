bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lastUnitField  =  loopType.getFirstDurationField();  iChronology  =  chronology.withUTC();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopType.getFirstDurationField();  iChronology  =  chronology.withUTC();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopType.getFirstDurationField();  iChronology  =  chronology.withUTC();	  lastUnitField    =    loopType.getLastDurationField();    iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  lastUnitField  =  iPartial;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iPartial;  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iPartial;	  lastUnitField    =    loopType;    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  iChronology  =  lastRangeField.withUTC();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  iChronology  =  lastRangeField.withUTC();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	iChronology  =  lastRangeField.withUTC();	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  lastUnitField  =  this;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  this;  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  this;	  lastUnitField    =    null;    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  lastUnitField  =  iChronology.getLastRangeField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iChronology.getLastRangeField();  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iChronology.getLastRangeField();	  lastUnitField    =    iChronology.getLastUnitField();    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  lastUnitField  =  iLastRangeField;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iLastRangeField;  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iLastRangeField;	  lastUnitField    =    lastUnitField;    	non-compiled	[CE]  	17	None	replace
7	[BUG]  [BUGGY]  lastUnitField  =  loopRangeField.getFirstUnitField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopRangeField.getFirstUnitField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopRangeField.getFirstUnitField();	  lastUnitField    =    loopUnitField.getFirstUnitField();    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  lastUnitField  =  iLoopRangeField.getFirstUnitField();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iLoopRangeField.getFirstUnitField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iLoopRangeField.getFirstUnitField();	  lastUnitField    =    loopUnitField.getFirstUnitField();    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iLastRangeField.getLastDurationField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  DurationField  lastUnitField  =  iLastRangeField.getLastDurationField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	DurationField  lastUnitField  =  iLastRangeField.getLastDurationField();	  DurationField    lastUnitField    =    loopRangeField.getLastDurationField();    	non-compiled	[CE]  	12	None	replace
10	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopRangeField.getFirstDurationField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  DurationField  lastUnitField  =  loopRangeField.getFirstDurationField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	DurationField  lastUnitField  =  loopRangeField.getFirstDurationField();	  DurationField    lastUnitField    =    loopUnitField.getFirstDurationField();    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  lastUnitField  =  iChronology.getLastChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iChronology.getLastChronology();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iChronology.getLastChronology();	  lastUnitField    =    loopUnitField.getLastChronology();    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  lastUnitField  =  loopRangeField.getLastUnitField();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopRangeField.getLastUnitField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopRangeField.getLastUnitField();	  lastUnitField    =    loopUnitField.getLastUnitField();    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  lastUnitField  =  iLoopRangeField.getLastUnitField();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iLoopRangeField.getLastUnitField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iLoopRangeField.getLastUnitField();	  lastUnitField    =    loopUnitField.getLastUnitField();    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	DurationField  lastUnitField  =  iChronology.getLastDurationField();	  DurationField    lastUnitField    =    iPartial.getLastDurationField();    	non-compiled	[CE]  	3	None	replace
15	[BUG]  [BUGGY]  lastUnitField  =  iPartial.getLastUnitField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iPartial.getLastUnitField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iPartial.getLastUnitField();	  lastUnitField    =    loopType.getLastUnitField();    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  lastUnitField  =  iChronology.getLastLocalField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iChronology.getLastLocalField();  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iChronology.getLastLocalField();	  lastUnitField    =    iChronology.getLastUnitField();    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(lastRangeField);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  iChronology  =  chronology.withUTC(lastRangeField);  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	iChronology  =  chronology.withUTC(lastRangeField);	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  lastUnitField  =  iLastUnitField;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iLastUnitField;  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iLastUnitField;	  lastUnitField    =    this.lastUnitField;    	non-compiled	[CE]  	18	None	replace
19	[BUG]  [BUGGY]  lastUnitField  =  loopUnitField.getFirstChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopUnitField.getFirstChronology();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopUnitField.getFirstChronology();	  lastUnitField    =    loopUnitField.getLastChronology();    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopRangeField.getlastDurationField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  DurationField  lastUnitField  =  loopRangeField.getlastDurationField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	DurationField  lastUnitField  =  loopRangeField.getlastDurationField();	  DurationField    lastUnitField    =    loopRangeField.getLastDurationField();    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  lastUnitField  =  loopType.getLastChronology();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopType.getLastChronology();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopType.getLastChronology();	  lastUnitField    =    loopType.getLastUnitField();    	non-compiled	[CE]  	14	None	replace
22	[BUG]  [BUGGY]  lastUnitField  =  this.iChronology;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  this.iChronology;  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  this.iChronology;	  lastUnitField    =    iChronology;    	non-compiled	[CE]  	6	None	replace
23	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iLoopRangeField.getFirstDurationField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  DurationField  lastUnitField  =  iLoopRangeField.getFirstDurationField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	DurationField  lastUnitField  =  iLoopRangeField.getFirstDurationField();	  DurationField    lastUnitField    =    loopUnitField.getFirstDurationField();    	non-compiled	[CE]  	13	None	replace
24	[BUG]  [BUGGY]  lastUnitField  =  iChronology.getLastLocalVariable();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iChronology.getLastLocalVariable();  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iChronology.getLastLocalVariable();	  lastUnitField    =    iChronology.getLastUnitField();    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  lastUnitField  =  iChronology.lastUnitField;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  iChronology.lastUnitField;  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iChronology.lastUnitField;	  lastUnitField    =    this.lastUnitField;    	non-compiled	[CE]  	18	None	replace
26	[BUG]  [BUGGY]  lastUnitField  =  loopLangeField;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopLangeField;  [BUGGY]      }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopLangeField;	  lastUnitField    =    iLoopUnitField;    	non-compiled	[CE]  	1	None	replace
27	[BUG]  [BUGGY]  lastUnitField  =  loopType.getLastDurationField();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }      [BUGGY]  lastUnitField  =  loopType.getLastDurationField();  [BUGGY]      lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopType.getLastDurationField();	  lastUnitField    =    loopType.getLastUnitField();    	non-compiled	[CE]  	14	None	replace
