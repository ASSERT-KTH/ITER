bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    DateTimeFieldType  lastUnitField  =  loopUnitField;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]    DateTimeFieldType  lastUnitField  =  loopUnitField;  [BUGGY]  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	    DateTimeFieldType  lastUnitField  =  loopUnitField;		non-compiled	[CE]  	34	None	add
2	[BUG]  [BUGGY]    DateTimeFieldType  lastUnitField  =  loopUnitField.getLastUnitField();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]    DateTimeFieldType  lastUnitField  =  loopUnitField.getLastUnitField();  [BUGGY]  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	    DateTimeFieldType  lastUnitField  =  loopUnitField.getLastUnitField();		non-compiled	[CE]  	34	None	add
3	[BUG]  [BUGGY]    lastUnitField  =  loopUnitField;  [CE]  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]    lastUnitField  =  loopUnitField;  [BUGGY]  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	    lastUnitField  =  loopUnitField;		non-compiled	[CE]  	34	None	add
4	[BUG]  [BUGGY]  lastUnitField  =  iLoopRangeField;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]  lastUnitField  =  iLoopRangeField;  [BUGGY]  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  iLoopRangeField;	lastUnitField  =  loopUnitField;  	non-compiled	[CE]  	33	None	replace
5	[BUG]  [BUGGY]  lastUnitField  =  this.loopUnitField;  [CE]  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]  lastUnitField  =  this.loopUnitField;  [BUGGY]  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  this.loopUnitField;	lastUnitField  =  loopUnitField;  	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  lastUnitField  =  loopRangeField;  [CE]  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]  lastUnitField  =  loopRangeField;  [BUGGY]  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	lastUnitField  =  loopRangeField;	lastUnitField  =  loopUnitField;  	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]    DurationField  lastUnitField  =  loopType.getLastDurationField();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]    DurationField  lastUnitField  =  loopType.getLastDurationField();  [BUGGY]  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	    DurationField  lastUnitField  =  loopType.getLastDurationField();		non-compiled	[CE]  	34	None	add
8	[BUG]  [BUGGY]    DurationField  lastUnitField  =  loopUnitField.getLastDurationField();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]    DurationField  lastUnitField  =  loopUnitField.getLastDurationField();  [BUGGY]  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	    DurationField  lastUnitField  =  loopUnitField.getLastDurationField();		non-compiled	[CE]  	34	None	add
9	[BUG]  [BUGGY]    DurationField  lastUnitField  =  loopType.getLastDurationField();  iChronology  =  chronology.withUTC();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest:   "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName());  }  if  (lastRangeField.compareTo(loopRangeField)  ==  0)  {  throw  new  IllegalArgumentException( "Types  array  must  not  contain  duplicate:   "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  [BUGGY]    DurationField  lastUnitField  =  loopType.getLastDurationField();  iChronology  =  chronology.withUTC();  [BUGGY]  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	245	245	1	replace	    DurationField  lastUnitField  =  loopType.getLastDurationField();  iChronology  =  chronology.withUTC();		non-compiled	[CE]  	34	None	add
