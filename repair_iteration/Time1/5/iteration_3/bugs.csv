bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iPartial  =  iChronology.getPartial();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iPartial  =  iChronology.getPartial();  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  iChronology.getPartial();	  iPartial    =    iChronology.getChronology();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
2	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology  =  chronology.withUTC(this,  values);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.withUTC(this,  values);	  iChronology    =    chronology.withUTC(this);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  iChronology.validate(this,  values,  iTypes);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology.validate(this,  values,  iTypes);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology.validate(this,  values,  iTypes);	  iChronology.validate(this,    values,    chronology);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  iChronology.validate(this,  values,  iValues);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology.validate(this,  values,  iValues);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology.validate(this,  values,  iValues);	  iChronology.validate(this,    values,    chronology);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  iPartial  =  chronology.getChronology(this,  values);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iPartial  =  chronology.getChronology(this,  values);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  chronology.getChronology(this,  values);	  iPartial    =    chronology.getChronology(chronology);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  iPartial  =  chronology.getChronology(lastUnitField);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iPartial  =  chronology.getChronology(lastUnitField);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  chronology.getChronology(lastUnitField);	  iPartial    =    chronology.getChronology(chronology);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  iValues  =(int[])types.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iValues  =(int[])types.clone();  [BUGGY]      }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iValues  =(int[])types.clone();	  iValues    =(int[])iTypes.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(false);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology  =  chronology.withUTC(false);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.withUTC(false);	  iChronology    =    chronology.withUTC(true);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(true,  values);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology  =  chronology.withUTC(true,  values);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.withUTC(true,  values);	  iChronology    =    chronology.withUTC(true);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this,  values);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology  =  chronology.getChronology(this,  values);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.getChronology(this,  values);	  iChronology    =    chronology.getChronology(this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  iChronology.validate(this,  iTypes,  values);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology.validate(this,  iTypes,  values);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology.validate(this,  iTypes,  values);	  iChronology.validate(this,    iTypes);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  iPartial  =  iChronology.withUTC(this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iPartial  =  iChronology.withUTC(this);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  iChronology.withUTC(this);	  iPartial    =    iChronology.withUTC();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this,  iTypes);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iChronology  =  chronology.getChronology(this,  iTypes);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.getChronology(this,  iTypes);	  iChronology    =    chronology.getChronology(this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  iValues  =(int[])this.iTypes.clone();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iValues  =(int[])this.iTypes.clone();  [BUGGY]      }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iValues  =(int[])this.iTypes.clone();	  iValues    =(int[])iTypes.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  iPartial.validate(this,  iTypes);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);      [BUGGY]  iPartial.validate(this,  iTypes);  [BUGGY]      iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial.validate(this,  iTypes);	  iChronology.validate(this,    iTypes);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
