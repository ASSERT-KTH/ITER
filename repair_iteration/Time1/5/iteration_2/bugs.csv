bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(true);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iChronology  =  chronology.withUTC(true);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.withUTC(true);	      iChronology    =    chronology.withUTC();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  iPartial  =  iChronology.withUTC();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iPartial  =  iChronology.withUTC();  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  iChronology.withUTC();	      iPartial    =    chronology.withUTC();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  iChronology  =  chronology.getChronology(this);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iChronology  =  chronology.getChronology(this);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.getChronology(this);	      iChronology    =    chronology.getChronology();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  iPartial  =  iChronology.getChronology();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iPartial  =  iChronology.getChronology();  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  iChronology.getChronology();	      iPartial    =    chronology.getChronology();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  iValues  =(int[])iTypes.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iValues  =(int[])iTypes.clone();  [BUGGY]    }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iValues  =(int[])iTypes.clone();	  iValues    =(int[])iValues.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  iChronology.validate(this,  iValues);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iChronology.validate(this,  iValues);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology.validate(this,  iValues);	      iChronology.validate(this,    values);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  iChronology.validate(this,  iTypes);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iChronology.validate(this,  iTypes);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology.validate(this,  iTypes);	      iChronology.validate(this,    values);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(this);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iChronology  =  chronology.withUTC(this);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology  =  chronology.withUTC(this);	      iChronology    =    chronology.withUTC();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  iChronology.validate(this,  values,  chronology);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iChronology.validate(this,  values,  chronology);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iChronology.validate(this,  values,  chronology);	      iChronology.validate(this,    values);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  iPartial  =  chronology.getChronology(chronology);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iPartial  =  chronology.getChronology(chronology);  [BUGGY]    iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iPartial  =  chronology.getChronology(chronology);	      iPartial    =    chronology.getChronology();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  iValues  =(int[])this.iValues.clone();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);    [BUGGY]  iValues  =(int[])this.iValues.clone();  [BUGGY]    }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iValues  =(int[])this.iValues.clone();	  iValues    =(int[])iValues.clone();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
