bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  iValues  =(int[])iValues.clone();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]  iValues  =(int[])iValues.clone();  [BUGGY]  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	iValues  =(int[])iValues.clone();	iValues  =  (int[])  values.clone();  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
2	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]    [BUGGY]  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	  	iValues  =  (int[])  values.clone();  	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
3	[BUG]  [BUGGY]    iChronology  =  chronology.withUTC();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]    iChronology  =  chronology.withUTC();  [BUGGY]  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	    iChronology  =  chronology.withUTC();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
4	[BUG]  [BUGGY]    iPartial  =  chronology.withUTC();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]    iPartial  =  chronology.withUTC();  [BUGGY]  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	    iPartial  =  chronology.withUTC();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
5	[BUG]  [BUGGY]    iChronology  =  chronology.getChronology();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]    iChronology  =  chronology.getChronology();  [BUGGY]  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	    iChronology  =  chronology.getChronology();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
6	[BUG]  [BUGGY]    iChronology.validate(this,  values);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]    iChronology.validate(this,  values);  [BUGGY]  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	    iChronology.validate(this,  values);		non-compiled	[CE]  illegal  start  of  expression	10	None	add
7	[BUG]  [BUGGY]    iPartial  =  chronology.getChronology();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  }  }  }  }  lastUnitField  =  loopUnitField;  }  iTypes  =  (DateTimeFieldType[])  types.clone();  chronology.validate(this,  values);  [BUGGY]    iPartial  =  chronology.getChronology();  [BUGGY]  iValues  =  (int[])  values.clone();  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.5773502691896258	250	250	1	replace	    iPartial  =  chronology.getChronology();		non-compiled	[CE]  illegal  start  of  expression	10	None	add
