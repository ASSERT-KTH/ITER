bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  int  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	int  lastUnitField  =  loopType.getDurationType().getField(iChronology);	      int    lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  int  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  int  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	int  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);	      int    lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  lastUnitField  =  loopUnitField.getFirstDurationType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  lastUnitField  =  loopUnitField.getFirstDurationType();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	lastUnitField  =  loopUnitField.getFirstDurationType();	      lastUnitField    =    loopUnitField.getLastDurationType();    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DurationField  lastUnitField  =  loopType.getLastDurationType();	      DateTimeFieldType    lastUnitField    =    loopUnitField.getLastDurationType();    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopUnitField.getLastDurationType();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DurationField  lastUnitField  =  loopUnitField.getLastDurationType();  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DurationField  lastUnitField  =  loopUnitField.getLastDurationType();	      DateTimeFieldType    lastUnitField    =    loopUnitField.getLastDurationType();    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(i  >  0  ||  loopUnitField  ==  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(i  >  0  ||  loopUnitField  ==  null)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(i  >  0  ||  loopUnitField  ==  null)  {	  if(i    >    0    ||    loopUnitField!=    null)    {    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  if(i  >  0  ||  i  <  iValues.length)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(i  >  0  ||  i  <  iValues.length)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(i  >  0  ||  i  <  iValues.length)  {	  if(i    >    0    ||    i    <    values.length)    {    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  if(i  >  0  ||  i  <  types.length)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(i  >  0  ||  i  <  types.length)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(i  >  0  ||  i  <  types.length)  {	  if(i    >    0    ||    i    <    values.length)    {    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  DateTimeFieldType  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DateTimeFieldType  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DateTimeFieldType  lastUnitField  =  loopType.getDurationType().getField(iChronology);	      DateTimeFieldType    lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DurationField  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DurationField  lastUnitField  =  loopType.getDurationType().getField(iChronology);	      DateTimeFieldType    lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DurationField  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);	      DurationField    lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DateTimeFieldType  loopUnitField  =  loopType.getDurationType().getField(iChronology);	      DateTimeFieldType    loopUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  lastUnitField  =  loopType.getDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	lastUnitField  =  loopType.getDurationType().getField(iChronology);	      lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  lastUnitField  =  loopType.getRangeDurationType().getField(iChronology);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  lastUnitField  =  loopType.getRangeDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	lastUnitField  =  loopType.getRangeDurationType().getField(iChronology);	      lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  if(lastUnitField!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(lastUnitField!=  null)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(lastUnitField!=  null)  {	  if(loopUnitField!=    null)    {    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getRangeDurationType().getField(iChronology);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DateTimeFieldType  loopUnitField  =  loopType.getRangeDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DateTimeFieldType  loopUnitField  =  loopType.getRangeDurationType().getField(iChronology);	      DateTimeFieldType    loopUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  if(i  >  0  &&  i  <  values.length)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(i  >  0  &&  i  <  values.length)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(i  >  0  &&  i  <  values.length)  {	  if(i    >    0    ||    i    <    values.length)    {    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  if(i  >  0  ||  i  <  loopUnitField.length)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(i  >  0  ||  i  <  loopUnitField.length)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(i  >  0  ||  i  <  loopUnitField.length)  {	  if(i    >    0    ||    i    <    values.length)    {    	non-compiled	[CE]  	11	None	replace
19	[BUG]  [BUGGY]  DateTimeFieldType  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  DateTimeFieldType  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);  [BUGGY]    if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	DateTimeFieldType  lastUnitField  =  loopType.getLastDurationType().getField(iChronology);	      DateTimeFieldType    lastUnitField    =    loopUnitField.getDurationType().getField(iChronology);    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  if(loopUnitField  ==  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  null:  index     "  +  i);  }  }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);    [BUGGY]  if(loopUnitField  ==  null)  {  [BUGGY]    int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(   "Types  array  must  be  in  order  largest-smallest:     "  +  types[i  -  1].getName()  +     "  <     "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(   "Types  array  must  not  contain  duplicate:     "  +  types[i  -  1].getName()  +     "  and     "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	216	216	1	replace	if(loopUnitField  ==  null)  {	  if(loopUnitField!=    null)    {    	non-compiled	[CE]  	8	None	replace
