bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  ||  compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	||  compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  ||(compare  <  0  &&  types[i  -  1].getRangeDurationType()  ==  null))  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  ||(compare  <  0  &&  types[i  -  1].getRangeDurationType()  ==  null))  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	||(compare  <  0  &&  types[i  -  1].getRangeDurationType()  ==  null))  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  years[i  -  1].getDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  years[i  -  1].getDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	years[i  -  1].getDurationType()  ==  null)  {  throw  new  IllegalArgumentException( " ");	  years[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  years[i  -  1].getName()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  years[i  -  1].getName()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	years[i  -  1].getName()  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  years[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  if(compare  ==  0)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  ==  0)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  ==  0)  {  aughtExceptionHandler.throwAsIgnoredException( " ");  }	  aughtExceptionHandler.throwAsIgnoredException(   "   ");    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  int[]  types  =  iTypes.getTypes();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  int[]  types  =  iTypes.getTypes();  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	int[]  types  =  iTypes.getTypes();	  int[]    types    =    loopUnitField.getTypes();    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  aughtExceptionHandler.handleMissingName( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	aughtExceptionHandler.handleMissingName( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.getName());	  aughtExceptionHandler.handleMissingName(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    <       "    +    loopType.getName());    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( " ",  compare);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  aughtExceptionHandler.throwAsSuccess( " ",  compare);  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	aughtExceptionHandler.throwAsSuccess( " ",  compare);	  aughtExceptionHandler.throwAsSuccess(   "   ");    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  }  else  if(compare  <  0  ||(values[i  -  1].getRangeDurationType()  ==  null  &&  types[i  -  1].getRangeDurationType()!=  null))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  }  else  if(compare  <  0  ||(values[i  -  1].getRangeDurationType()  ==  null  &&  types[i  -  1].getRangeDurationType()!=  null))  {  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	}  else  if(compare  <  0  ||(values[i  -  1].getRangeDurationType()  ==  null  &&  types[i  -  1].getRangeDurationType()!=  null))  {	  }    else    if(compare    <    0    ||(values[i    -    1].getRangeDurationType()    ==    null    &&    values[i    -    1].getRangeDurationType()!=    null))    {    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  }  else  if(compare  <  0  ||(values[i  -  1].getRangeDurationType()!=  null  &&  types[i  -  1].getRangeDurationType()!=  null))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  }  else  if(compare  <  0  ||(values[i  -  1].getRangeDurationType()!=  null  &&  types[i  -  1].getRangeDurationType()!=  null))  {  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	}  else  if(compare  <  0  ||(values[i  -  1].getRangeDurationType()!=  null  &&  types[i  -  1].getRangeDurationType()!=  null))  {	  }    else    if(compare    <    0    ||(values[i    -    1].getRangeDurationType()    ==    null    &&    values[i    -    1].getRangeDurationType()!=    null))    {    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  int[]  types  =  iTypes.get(compare,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  int[]  types  =  iTypes.get(compare,  values);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	int[]  types  =  iTypes.get(compare,  values);	  int[]    types    =    iTypes.get(compare);    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  if(compare  ==  0)  {  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  ==  0)  {  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  }  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  ==  0)  {  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  }	  aughtExceptionHandler(this,    loopType,    values[i    -    1].getName());    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  if(compare  ==  0)  {  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  ==  0)  {  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  ==  0)  {  aughtExceptionHandler(this,  loopType,  values[i  -  1].getName());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler(this,    loopType,    values[i    -    1].getName());    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  int[]  values  =  loopUnitField.getValues(compare);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  int[]  values  =  loopUnitField.getValues(compare);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	int[]  values  =  loopUnitField.getValues(compare);	  int[]    values    =    loopUnitField.getValues();    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  int[]  types  =  iTypes.get(compare  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  int[]  types  =  iTypes.get(compare  +  1);  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	int[]  types  =  iTypes.get(compare  +  1);	  int[]    types    =    iTypes.get(compare);    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsSuccess( ", ");  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  aughtExceptionHandler.throwAsSuccess( ", ");  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	aughtExceptionHandler.throwAsSuccess( ", ");	  aughtExceptionHandler.throwAsSuccess(   "   ");    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.get  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.get  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  ==  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  and   "  +  loopType.get	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.get    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  }  else  if(compare  <  0  ||(values[i  -  1].getDurationType()  ==  null  &&  values[i  -  1].getRangeDurationType()!=  null))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  }  else  if(compare  <  0  ||(values[i  -  1].getDurationType()  ==  null  &&  values[i  -  1].getRangeDurationType()!=  null))  {  [BUGGY]      if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	}  else  if(compare  <  0  ||(values[i  -  1].getDurationType()  ==  null  &&  values[i  -  1].getRangeDurationType()!=  null))  {	  }    else    if(compare    <    0    ||(values[i    -    1].getRangeDurationType()    ==    null    &&    values[i    -    1].getRangeDurationType()!=    null))    {    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  aughtExceptionHandler.handleMissingName( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	aughtExceptionHandler.handleMissingName( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  + ",  and   "  +  loopType.getName());	  aughtExceptionHandler.handleMissingName(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    <       "    +    loopType.getName());    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	if(compare  <  0)  {  if(types[i  -  1].getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException( "Types  array  must  be  in  order  largest-smallest: "  +  types[i  -  1].getName()  +   "  <   "  +  loopType.getName	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  aughtExceptionHandler(loopType.getName(),  loopUnitField);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  aughtExceptionHandler(loopType.getName(),  loopUnitField);  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	aughtExceptionHandler(loopType.getName(),  loopUnitField);	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.get    	non-compiled	[CE]  	12	None	replace
24	[BUG]  [BUGGY]  aughtExceptionHandler(loopType.getName(),  loopType.getName());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());      [BUGGY]  aughtExceptionHandler(loopType.getName(),  loopType.getName());  [BUGGY]      }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  duplicate:       "  +  types[i  -  1].getName()  +       "  and       "  +  loopType.getName());  }  }  else  {  if  (loopType.getRangeDurationType()  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	221	221	1	replace	aughtExceptionHandler(loopType.getName(),  loopType.getName());	  if(compare    <    0)    {    if(types[i    -    1].getRangeDurationType()    ==    null)    {    throw    new    IllegalArgumentException(   "Types    array    must    be    in    order    largest-smallest:   "    +    types[i    -    1].getName()    +       "    and   "    +    loopType.get    	non-compiled	[CE]  	12	None	replace
