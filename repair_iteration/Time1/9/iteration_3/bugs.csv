bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int[]  iValues  =  values.toArray(types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  int[]  iValues  =  values.toArray(types);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	int[]  iValues  =  values.toArray(types);	  int[]    iValues    =    types.toArray(values);    	non-compiled	[CE]  	16	None	replace
2	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iValues.length;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iValues.length;  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iValues.length;	  DurationField    lastUnitField    =    iValues;    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  +  1]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  +  1]);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  +  1]);	  DateTimeFieldType[]    types    =    iTypes.toArray(new    DateTimeFieldType[types.size()    -    1]);    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField(iTypes,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField(iTypes,  values);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology.getLastDurationField(iTypes,  values);	  DurationField    lastUnitField    =    iChronology.getLastDurationField(iTypes);    	non-compiled	[CE]  	19	None	replace
5	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField(iValues,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField(iValues,  values);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology.getLastDurationField(iValues,  values);	  DurationField    lastUnitField    =    iChronology.getLastDurationField(iValues);    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  int[]  iValues  =  iTypes.toArray(types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  int[]  iValues  =  iTypes.toArray(types);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	int[]  iValues  =  iTypes.toArray(types);	  int[]    iValues    =    types.toArray(iTypes);    	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  -  1];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  types[i  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  types[i  -  1];	  DurationField    lastUnitField    =    types[i];    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(iValues,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(iValues,  values);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.get(iValues,  values);	  DateTimeFieldType[]    types    =    iTypes.get(iValues);    	non-compiled	[CE]  	24	None	replace
9	[BUG]  [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.size()  +  1]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  int[]  types  =  iTypes.toArray(new  int[types.size()  +  1]);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	int[]  types  =  iTypes.toArray(new  int[types.size()  +  1]);	  int[]    types    =    iTypes.toArray(new    int[types.size()    -    1]);    	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  iChronology  =  iChronology.withUTC();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  iChronology  =  iChronology.withUTC();  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	iChronology  =  iChronology.withUTC();	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	21	None	replace
11	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.length  +  2]);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.length  +  2]);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.length  +  2]);	  DateTimeFieldType[]    types    =    iTypes.toArray(new    DateTimeFieldType[types.length    +    1]);    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastField(iTypes,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastField(iTypes,  values);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology.getLastField(iTypes,  values);	  DurationField    lastUnitField    =    iChronology.getLastField(iTypes);    	non-compiled	[CE]  	20	None	replace
13	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes,  iValues;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes,  iValues;  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes,  iValues;	  DateTimeFieldType[]    types    =    iTypes,    values;    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes,  iChronology;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes,  iChronology;  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes,  iChronology;	  DateTimeFieldType[]    types    =    iTypes,    values;    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[0];  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  types[0];  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  types[0];	  DurationField    lastUnitField    =    iTypes[0];    	non-compiled	[CE]  	22	None	replace
16	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iTypes.length  -  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iTypes.length  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iTypes.length  -  1;	  DurationField    lastUnitField    =    iTypes.length;    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(iChronology,  values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(iChronology,  values);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.get(iChronology,  values);	  DateTimeFieldType[]    types    =    iTypes.get(iChronology);    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes  ==  null?  null  :  iTypes.toArray(types);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes  ==  null?  null  :  iTypes.toArray(types);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes  ==  null?  null  :  iTypes.toArray(types);	  DateTimeFieldType[]    types    =    iTypes.toArray(types);    	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  +  1];  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  types[i  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  types[i  +  1];	  DurationField    lastUnitField    =    iTypes[i    +    1];    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iTypes[i  -  1];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iTypes[i  -  1];  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iTypes[i  -  1];	  DurationField    lastUnitField    =    iTypes[i    +    1];    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.length  -  2]);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.length  -  2]);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.length  -  2]);	  DateTimeFieldType[]    types    =    iTypes.toArray(new    DateTimeFieldType[types.length    -    1]);    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastField(iValues,  values);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastField(iValues,  values);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology.getLastField(iValues,  values);	  DurationField    lastUnitField    =    iChronology.getLastField(iValues);    	non-compiled	[CE]  	25	None	replace
23	[BUG]  [BUGGY]  int[]  types  =  iTypes!=  null?  0  :  iTypes.toArray(types);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  int[]  types  =  iTypes!=  null?  0  :  iTypes.toArray(types);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	int[]  types  =  iTypes!=  null?  0  :  iTypes.toArray(types);	  int[]    types    =    iTypes.toArray(types);    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getFirstField();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  types[i  -  1].getFirstField();  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  types[i  -  1].getFirstField();	  DurationField    lastUnitField    =    iChronology.getFirstField();    	non-compiled	[CE]  	13	None	replace
25	[BUG]  [BUGGY]  DurationFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  -  1]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  -  1]);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  -  1]);	  DurationFieldType[]    types    =    iTypes.toArray(new    DateTimeFieldType[types.size()    ]);    	non-compiled	[CE]  	18	None	replace
26	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField(types);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastDurationField(types);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology.getLastDurationField(types);	  DurationField    lastUnitField    =    iChronology.getLastDurationField(iTypes);    	non-compiled	[CE]  	19	None	replace
27	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology;  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology;	  DurationField    lastUnitField    =    iValues;    	non-compiled	[CE]  	15	None	replace
28	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(iChronology  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(iChronology  +  1);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.get(iChronology  +  1);	  DateTimeFieldType[]    types    =    iTypes.get(iChronology);    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iTypes[0].getDurationType();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iTypes[0].getDurationType();  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iTypes[0].getDurationType();	  DurationField    lastUnitField    =    iTypes.length;    	non-compiled	[CE]  	14	None	replace
30	[BUG]  [BUGGY]  int[]  iValues  =  types.toArray(iValues);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  int[]  iValues  =  types.toArray(iValues);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	int[]  iValues  =  types.toArray(iValues);	  int[]    iValues    =    types.toArray(values);    	non-compiled	[CE]  	16	None	replace
31	[BUG]  [BUGGY]  iChronology  =  chronology.withUTC(values);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  iChronology  =  chronology.withUTC(values);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	iChronology  =  chronology.withUTC(values);	  iChronology    =    chronology.withUTC();    	non-compiled	[CE]  	21	None	replace
32	[BUG]  [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastField(types);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  iChronology.getLastField(types);  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  iChronology.getLastField(types);	  DurationField    lastUnitField    =    iChronology.getLastField(iTypes);    	non-compiled	[CE]  	20	None	replace
33	[BUG]  [BUGGY]  DurationField  lastUnitField  =  types[iChronology.getLastField()  ];  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DurationField  lastUnitField  =  types[iChronology.getLastField()  ];  [BUGGY]      for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DurationField  lastUnitField  =  types[iChronology.getLastField()  ];	  DurationField    lastUnitField    =    iChronology.getFirstField();    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(types);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.get(types);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.get(types);	  DateTimeFieldType[]    types    =    iTypes.get(iValues);    	non-compiled	[CE]  	24	None	replace
35	[BUG]  [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  1]);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (types.length  ==  0)  {  iTypes  =  types;  iValues  =  values;  return;  }  for  (int  i  =  0;  i  <  types.length;  i++)  {  if  (types[i]  ==  null)  {  throw  new  IllegalArgumentException(     "Types  array  must  not  contain  null:  index       "  +  i);  }  }      [BUGGY]  DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  1]);  [BUGGY]      DurationField  lastUnitField  =  null;  for  (int  i  =  0;  i  <  types.length;  i++)  {  DateTimeFieldType  loopType  =  types[i];  DurationField  loopUnitField  =  loopType.getDurationType().getField(iChronology);  if  (i  >  0)  {  int  compare  =  lastUnitField.compareTo(loopUnitField);  if  (compare  <  0)  {  throw  new  IllegalArgumentException(     "Types  array  must  be  in  order  largest-smallest:       "  +  types[i  -  1].getName()  +       "  <       "  +  loopType.getName());  }  else  if  (compare  ==  0)  {  if  (types[i  -  1].getRangeDurationType()  ==  null)  {  [CLASS]  Partial  Property  [METHOD]  <init>  [RETURN_TYPE]  Chronology)  DateTimeFieldType[]  types  int[]  values  Chronology  chronology  [VARIABLES]  boolean  DateTimeFieldType[]  iTypes  types  Partial  iPartial  DateTimeFieldType  loopType  int[]  iValues  values  Chronology  chrono  chronology  iChronology  DurationField  lastRangeField  lastUnitField  loopRangeField  loopUnitField  long  serialVersionUID  DateTimeFormatter[]  iFormatter  int  compare  i  iFieldIndex  value  	projects/Time1/src/main/java/org/joda/time/Partial.java	0.4472135954999579	212	212	1	replace	DateTimeFieldType[]  types  =  iTypes.toArray(new  DateTimeFieldType[types.size()  1]);	  DateTimeFieldType[]    types    =    iTypes.toArray(new    DateTimeFieldType[types.size()    -    1]);    	non-compiled	[CE]  	7	None	replace
