bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;	  Size2D    w[2]    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    	non-compiled	[CE]  ']'  expected	20	None	replace
2	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  If(this.rightBlock  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(this.rightBlock!=  null)  {  If(this.rightBlock  ==  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.rightBlock!=  null)  {  If(this.rightBlock  ==  null)  {	  if(this.centerBlock    ==    null)    {    If(this.centerBlock    ==    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  if(this.rightBlock  ==  null)  {  If(this.rightBlock  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(this.rightBlock  ==  null)  {  If(this.rightBlock  ==  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.rightBlock  ==  null)  {  If(this.rightBlock  ==  null)  {	  if(this.centerBlock    ==    null)    {    If(this.centerBlock    ==    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
4	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3));  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3));  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3));	          w[2]    =    Math.max(w[2],    h[3]);    w[2]    =    Math.max(w[2],    h[3));    	non-compiled	[CE]  ']'  expected	22	None	replace
5	[BUG]  [BUGGY]  if(w[2]!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(w[2]!=  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(w[2]!=  null)  {	  if(this.rightBlock!=    null)    {    if(this.rightBlock!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	15	None	replace
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
7	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
8	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
9	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
10	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
11	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
12	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
13	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
14	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[2]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  h[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[3]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[3]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
17	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
19	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[3],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[3],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
21	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[3],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[3],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[3],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
22	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(this.rightBlock  ==  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	if(this.rightBlock  ==  null)  {	  if(this.centerBlock    ==    null)    {    if(this.centerBlock!=    null)    {    	compilable	  [FE]  NullPointerException  	9	1	replace
23	[BUG]  [BUGGY]  if(this.rightBlock  ==  null)  {  [FE]  NullPointerException  [FE]          AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(this.rightBlock  ==  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.rightBlock  ==  null)  {	  if(this.centerBlock    ==    null)    {    if(this.centerBlock!=    null)    {    	compilable	  [FE]  NullPointerException  	9	1	replace
24	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
25	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
26	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
27	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
28	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
29	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[3],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[3],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
30	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[3],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[3],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[3],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
31	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
32	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
33	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
34	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
35	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
36	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
37	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
38	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
39	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
40	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
41	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
42	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
43	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[1]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.max(w[2],    w[3]);    w[1]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
44	[BUG]  [BUGGY]  w[0]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[0]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[0]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.max(w[2],    w[3]);    w[1]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
45	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
46	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[1]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
48	[BUG]  [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
49	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
50	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
52	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
53	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
54	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
55	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  If(this.centerBlock!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(this.centerBlock!=  null)  {  If(this.centerBlock!=  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.centerBlock!=  null)  {  If(this.centerBlock!=  null)  {	  if(this.rightBlock!=    null)    {    If(this.rightBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
56	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  If(this.centerBlock  ==  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  if(this.centerBlock!=  null)  {  If(this.centerBlock  ==  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.centerBlock!=  null)  {  If(this.centerBlock  ==  null)  {	  if(this.rightBlock!=    null)    {    If(this.rightBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
57	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[3]  =  size.width;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;	  Size2D    w[2]    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  ']'  expected	21	None	replace
60	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
61	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
62	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  Size2D  w[2]  =  Math.max(w[2],  w[3]  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  Size2D  w[2]  =  Math.max(w[2],  w[3]  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  Size2D  w[2]  =  Math.max(w[2],  w[3]	  	non-compiled	[CE]  ']'  expected	11	None	add
63	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3);  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3);	  	non-compiled	[CE]  ']'  expected	28	None	add
64	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
65	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
66	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3];  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3];  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3];	  	non-compiled	[CE]  ')'  expected	4	None	add
67	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.max(w[2],    w[3]);    w[2]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
69	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;	  Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
70	[BUG]  [BUGGY]  If(this.centerBlock!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  If(this.centerBlock!=  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	If(this.centerBlock!=  null)  {	  if(this.rightBlock!=    null)    {    If(this.rightBlock!=    null)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
71	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
72	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
73	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[3]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
75	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
76	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3];  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3];  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3];	  	non-compiled	[CE]  ')'  expected	13	None	add
77	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
78	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
79	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  else  {  Size2D  w[2]  =  Math.max(w[2],  h[3]  [CE]  ']'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  else  {  Size2D  w[2]  =  Math.max(w[2],  h[3]  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  else  {  Size2D  w[2]  =  Math.max(w[2],  h[3]	  	non-compiled	[CE]  ']'  expected	2	None	add
80	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
81	[BUG]  [BUGGY]  w[2]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[2]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[2]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
83	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
84	[BUG]  [BUGGY]  If(this.rightBlock!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  If(this.rightBlock!=  null)  {  [BUGGY]      RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	If(this.rightBlock!=  null)  {	  if(this.centerBlock    ==    null)    {    If(this.centerBlock    ==    null)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
85	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
86	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
87	[BUG]  [BUGGY]  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];      [BUGGY]  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
