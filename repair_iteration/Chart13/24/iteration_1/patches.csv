bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	w[3]  =  Math.max(w[2],  w[3]);	      w[2]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
3	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
4	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	        w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
5	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
6	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[3]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;	      Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  if(this.centerBlock  ==  null)  {  if(this.centerBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  if(this.centerBlock  ==  null)  {  if(this.centerBlock  ==  null)  {  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.centerBlock    ==    null)    {    if(this.centerBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
9	[BUG]  [BUGGY]  if(this.centerBlock  ==  null)  {  if(this.centerBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  if(this.centerBlock  ==  null)  {  if(this.centerBlock!=  null)  {  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.centerBlock    ==    null)    {    if(this.centerBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
10	[BUG]  [BUGGY]  if(this.centerBlock  ==  null)  {  If(this.centerBlock  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  if(this.centerBlock  ==  null)  {  If(this.centerBlock  ==  null)  {  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.centerBlock    ==    null)    {    If(this.centerBlock  ==  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
11	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
12	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
13	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
14	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
15	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  if(this.rightBlock!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  if(this.rightBlock!=  null)  {  if(this.rightBlock!=  null)  {  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.rightBlock!=    null)    {    if(this.rightBlock!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
16	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  if(this.rightBlock  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  if(this.rightBlock!=  null)  {  if(this.rightBlock  ==  null)  {  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.rightBlock!=    null)    {    if(this.rightBlock  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
17	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  If(this.rightBlock!=  null)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  if(this.rightBlock!=  null)  {  If(this.rightBlock!=  null)  {  [BUGGY]    RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	if(this.rightBlock!=    null)    {    If(this.rightBlock!=  null)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
18	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;	      Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;	      Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;	      Size2D    w[2]    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  ']'  expected	12	None	replace
21	[BUG]  [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;	      Size2D    w[2]    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  ']'  expected	12	None	replace
22	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3));  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3));  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3));	  	non-compiled	[CE]  ']'  expected	8	None	add
23	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;	      Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;	      Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
25	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[3]  =  size.width;	      Size2D    size    =    this.centerBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	        w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
27	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	add
28	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	add	        w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
29	[BUG]  [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];    [BUGGY]      w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	replace	        w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
