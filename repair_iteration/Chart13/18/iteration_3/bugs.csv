bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE    	non-compiled	[CE]  ')'  expected	16	None	replace
2	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE    	non-compiled	[CE]  ')'  expected	2	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
4	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
6	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(w[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(w[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
8	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(w[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(w[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(w[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
9	[BUG]  [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0,  width,  LengthConstraintType.NONE);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0,  width,  LengthConstraintType.NONE);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  maxW  =  Math.max(width  -  w[2],  0.0,  width,  LengthConstraintType.NONE);	  double    maxW    =    Math.max(width    -    w[2],    0.0,    width);    	non-compiled	[CE]  not  a  statement	18	None	replace
10	[BUG]  [BUGGY]  double  height  =  Math.max(width  -  w[2],  maxW,  0.0,  LengthConstraintType.NONE);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  height  =  Math.max(width  -  w[2],  maxW,  0.0,  LengthConstraintType.NONE);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  height  =  Math.max(width  -  w[2],  maxW,  0.0,  LengthConstraintType.NONE);	  double    height    =    Math.max(width    -    w[2],    maxW,    0.0);    	non-compiled	[CE]  not  a  statement	21	None	replace
11	[BUG]  [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0,  h);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0,  h);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  maxW  =  Math.max(width  -  w[2],  0.0,  h);	  double    maxW    =    Math.max(width    -    w[2],    0.0,    height);    	non-compiled	[CE]  not  a  statement	17	None	replace
12	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  maxW);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  h[3]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	h[3]  =  Math.max(h[2],  maxW);	          h[2]    =    Math.max(h[2],    maxW);    h[2]    =    Math.max(h[2],    maxW);    	non-compiled	[CE]  not  a  statement	12	None	replace
13	[BUG]  [BUGGY]  Double  height  =  Math.max(width  -  w[2],  maxW);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  Double  height  =  Math.max(width  -  w[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	Double  height  =  Math.max(width  -  w[2],  maxW);	          double    height    =    Math.max(width    -    w[2],    maxW);    Double    height    =    Math.max(width    -    w[2],    maxW);    	non-compiled	[CE]  not  a  statement	9	None	replace
14	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
15	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
17	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(w[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(w[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
19	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(w[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(w[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(w[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
20	[BUG]  [BUGGY]  double  height  =  Math.max(width  -  w[2],  0.0,  maxW);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  height  =  Math.max(width  -  w[2],  0.0,  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  height  =  Math.max(width  -  w[2],  0.0,  maxW);	          double    height    =    Math.max(width    -    w[2],    0.0);    double    height    =    Math.max(width    -    w[2],    0.0);    	non-compiled	[CE]  not  a  statement	3	None	replace
21	[BUG]  [BUGGY]  w[2]  =  Math.max(h[2],  maxW);  [CE]  not  a  statement  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	w[2]  =  Math.max(h[2],  maxW);	          h[2]    =    Math.max(h[2],    maxW);    w[2]    =    Math.max(h[2],    maxW);    	non-compiled	[CE]  not  a  statement	14	None	replace
22	[BUG]  [BUGGY]  Double  height  =  Math.max(width  -  w[2],  0.0);  [CE]  not  a  statement  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  Double  height  =  Math.max(width  -  w[2],  0.0);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	Double  height  =  Math.max(width  -  w[2],  0.0);	          double    height    =    Math.max(width    -    w[2],    0.0);    Double    height    =    Math.max(width    -    w[2],    0.0);    	non-compiled	[CE]  not  a  statement	4	None	replace
23	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE);  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE);	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	1	None	replace
24	[BUG]  [BUGGY]  double  width  =  Math.max(width  -  w[2],  maxW,  0.0);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  width  =  Math.max(width  -  w[2],  maxW,  0.0);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  width  =  Math.max(width  -  w[2],  maxW,  0.0);	  double    width    =    Math.max(width    -    w[2],    0.0);    	non-compiled	[CE]  not  a  statement	25	None	replace
25	[BUG]  [BUGGY]  double  width  =  Math.max(width  -  w[2],  0.0,  maxW);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  width  =  Math.max(width  -  w[2],  0.0,  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  width  =  Math.max(width  -  w[2],  0.0,  maxW);	  double    width    =    Math.max(width    -    w[2],    0.0);    	non-compiled	[CE]  not  a  statement	25	None	replace
26	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  width);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  h[2]  =  Math.max(h[2],  width);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	h[2]  =  Math.max(h[2],  width);	          h[2]    =    Math.max(h[2],    maxW);    h[2]    =    Math.max(h[2],    maxw);    	non-compiled	[CE]  not  a  statement	23	None	replace
27	[BUG]  [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  width,  0.0);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  width,  0.0);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  maxW  =  Math.max(width  -  w[2],  width,  0.0);	  double    maxW    =    Math.max(width    -    w[2],    0.0,    width);    	non-compiled	[CE]  not  a  statement	18	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[1]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[1]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  AssertionFailedError  	11	1	add
29	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[1]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[1]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[1]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  AssertionFailedError  	11	1	add
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.min(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.min(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
31	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.min(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[2]  =  Math.min(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.min(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
32	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE    	non-compiled	[CE]  ')'  expected	2	None	replace
33	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE    	non-compiled	[CE]  ')'  expected	16	None	replace
34	[BUG]  [BUGGY]  double  width  =  Math.max(width  -  w[2],  maxW);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  width  =  Math.max(width  -  w[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  width  =  Math.max(width  -  w[2],  maxW);	  double    width    =    Math.max(width    -    w[2],    0.0);    	non-compiled	[CE]  not  a  statement	25	None	replace
35	[BUG]  [BUGGY]  double  width  =  Math.max(width  -  w[3],  0.0);  [CE]  not  a  statement  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  width  =  Math.max(width  -  w[3],  0.0);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  width  =  Math.max(width  -  w[3],  0.0);	  double    width    =    Math.max(width    -    w[2],    0.0);    	non-compiled	[CE]  not  a  statement	25	None	replace
36	[BUG]  [BUGGY]  double  height  =  Math.max(width  -  w[2],  0.0,  height);  [CE]  not  a  statement  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  height  =  Math.max(width  -  w[2],  0.0,  height);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  height  =  Math.max(width  -  w[2],  0.0,  height);	  double    maxW    =    Math.max(width    -    w[2],    0.0,    height);    	non-compiled	[CE]  not  a  statement	17	None	replace
37	[BUG]  [BUGGY]  double  height  =  Math.max(width  -  w[2],  maxHeight,  0.0);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  double  height  =  Math.max(width  -  w[2],  maxHeight,  0.0);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	double  height  =  Math.max(width  -  w[2],  maxHeight,  0.0);	  double    height    =    Math.max(width    -    w[2],    maxW,    0.0);    	non-compiled	[CE]  not  a  statement	21	None	replace
38	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW)),  0.0,  null,  LengthConstraintType.NONE  [CE]  ')'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW)),  0.0,  null,  LengthConstraintType.NONE  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW)),  0.0,  null,  LengthConstraintType.NONE	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE    	non-compiled	[CE]  ')'  expected	2	None	replace
39	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[3]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[3]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
40	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[3]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    h[2]  =  Math.max(h[2],  maxW);  h[3]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        h[2]    =    Math.max(h[2],    maxW);    h[3]  =  Math.max(h[2],  maxW);  h[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
41	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [BUGGY]      new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);	  RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	1	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[1]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    h[1]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  AssertionFailedError  	13	1	add
43	[BUG]  [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[1]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);      [BUGGY]          h[2]    =    Math.max(h[2],    maxW);    w[2]  =  Math.max(h[2],  maxW);  h[1]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);  [BUGGY]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,      new  Range(Math.min(w[2],  maxW),  maxW),          LengthConstraintType.RANGE,  0.0,  null,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	                h[2]        =        Math.max(h[2],        maxW);        w[2]    =    Math.max(h[2],    maxW);    h[1]  =  Math.max(h[2],  maxW);  w[2]  =  Math.max(h[2],  maxW);	  	compilable	  [FE]  AssertionFailedError  	13	1	add
