bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    w[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	replace
2	[BUG]  [BUGGY]  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    w[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[1]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
4	[BUG]  [BUGGY]  double  height  =  h[1]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[1]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
5	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[0]  =  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  h[0]    =    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	39	None	replace
6	[BUG]  [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  w[4]);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  w[4]);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	RectangleConstraint  height  =  this.centerBlock.arrange(g2,  w[4]);	  RectangleConstraint    height    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double)	42	None	replace
7	[BUG]  [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  h);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double[])  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  h);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	RectangleConstraint  height  =  this.centerBlock.arrange(g2,  h);	  RectangleConstraint    height    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double[])	42	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.min(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	30	1	replace
9	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.min(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	30	1	replace
10	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4));  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4));	          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4));    	non-compiled	[CE]  ']'  expected	31	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
12	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	34	1	replace
13	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[3],    h[4]);    double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	5	None	add
14	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[3],    h[4]);    double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  h[4]);	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	5	None	add
15	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(w[4],  h[4]);  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(w[4],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[3],    h[4]);    double  height  =  h[0]  +  h[1]  +  Math.max(w[4],  h[4]);	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	5	None	add
16	[BUG]  [BUGGY]  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	8	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
18	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
20	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
22	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
23	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	28	None	add
24	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	28	None	add
25	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  w[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	28	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	44	1	add
27	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	44	1	add
28	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	44	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	44	1	add
30	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	44	1	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	41	1	replace
32	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	41	1	replace
33	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	38	None	replace
34	[BUG]  [BUGGY]  double  height  =  h[2]  +  h[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[2]  +  h[1]  +  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[2]  +  h[1]  +  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	38	None	replace
35	[BUG]  [BUGGY]  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    Double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	non-compiled	[CE]  incompatible  types	16	None	replace
36	[BUG]  [BUGGY]  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	45	None	replace
37	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	33	None	add
38	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	33	None	add
39	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    h[0]  +  h[1]  +  Math.max(h[2],  h[4]);	  	non-compiled	[CE]  not  a  statement	33	None	add
40	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	36	None	replace
41	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  h[4]));  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	36	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	11	1	add
43	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	11	1	add
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	11	1	add
45	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]);  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	11	1	add
46	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	11	None	add
47	[BUG]  [BUGGY]  h[0]  =  w[1]  +  Math.min(h[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]          AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[0]  =  w[1]  +  Math.min(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  w[1]  +  Math.min(h[2],  Math.max(h[3],  h[4]));	  h[0]    =    h[1]    +    Math.min(w[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	14	None	replace
48	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	replace
49	[BUG]  [BUGGY]  double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	replace
50	[BUG]  [BUGGY]  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	10	None	replace
51	[BUG]  [BUGGY]  Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  incompatible  types  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    Double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  incompatible  types	23	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
53	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
54	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	replace
55	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	replace
56	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  Math.max(h[3],  h[4]));  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ')'  expected	22	None	replace
57	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]),  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]),  maxW);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]),  maxW);	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  maxW	29	None	replace
58	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  width);  h[4]  =  size.height;  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  width);  h[4]  =  size.height;  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  width);  h[4]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c4);    h[4]    =    size.height;    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double)	24	None	replace
59	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.height;  [CE]  cannot  find  symbol  height  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.height;  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[4]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c4);    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  height	24	None	replace
60	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	40	None	add
61	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(w[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	40	None	add
62	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	40	None	add
63	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(w[3],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
64	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(w[3],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  *  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  *  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	15	1	replace
66	[BUG]  [BUGGY]  double  height  =  h[0]  *  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  *  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  *  h[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	15	1	replace
67	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[3],  h[4]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.min(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	17	None	replace
68	[BUG]  [BUGGY]  double  height  =  h[1]  +  h[1]  +  Math.min(h[3],  h[4]));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  h[1]  +  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[1]  +  h[1]  +  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.min(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	17	None	replace
69	[BUG]  [BUGGY]  Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [CE]  incompatible  types  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    Double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  incompatible  types	20	None	replace
70	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
71	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(w[3],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
72	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	1	None	add
73	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
74	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    Double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
75	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  w[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  w[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    double  height  =  w[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
77	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
79	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
81	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
82	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[4],  h[3]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[4],  h[3]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	replace
83	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[4],  h[3]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[4],  h[3]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.max(h[4],  h[3]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	replace
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[3]);	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
85	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[3]);	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	38	1	replace
86	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  h[4]  =  size.height;  [CE]  cannot  find  symbol  height  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  h[4]  =  size.height;  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  h[4]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c4);    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  height	24	None	replace
87	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.height;  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c4);    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c4	24	None	replace
88	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	7	None	add
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
90	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
91	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4])  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4])  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4])	  	non-compiled	[CE]  ')'  expected	44	None	add
92	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.min(h[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	28	None	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[1]    +    h[3]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	47	1	replace
94	[BUG]  [BUGGY]  double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[1]  +  h[3]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[1]    +    h[3]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	47	1	replace
95	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  if(this.centerBlock!=  null)  {  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  }  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  if(this.centerBlock!=  null)  {  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  }  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    if(this.centerBlock!=  null)  {  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  }	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	33	None	add
96	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[4],  h[3]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[4],  h[3]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	replace
97	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[4],  h[3]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[4],  h[3]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[4],  h[3]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    Math.max(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	replace
98	[BUG]  [BUGGY]  double  height  =  h[2]  +  w[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[2]  +  w[1]  +  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[2]  +  w[1]  +  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	36	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[4],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[4],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
100	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[4],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[4],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[4],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
101	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[4],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[4],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
102	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[4],  h[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[4],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.min(h[4],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
103	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4])  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4])  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4])	  	non-compiled	[CE]  ')'  expected	11	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
105	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
107	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
109	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[0]    =    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	9	1	add
110	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  h[0]  +  w[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	add
111	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4));  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4));	  	non-compiled	[CE]  ']'  expected	3	None	add
112	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  h[4]));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.min(h[2],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.min(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	17	None	replace
113	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.min(h[3],    h[4]));    double  height  =  h[1]  +  h[1]  +  Math.max(w[2],  Math.min(h[3],  h[4]));	  	non-compiled	[CE]  variable  height  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	3	None	add
114	[BUG]  [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c3);  [CE]  cannot  find  symbol  c3  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c3);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c3);	  RectangleConstraint    height    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  cannot  find  symbol  c3	42	None	replace
115	[BUG]  [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c1);  [CE]  incompatible  types  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	RectangleConstraint  height  =  this.centerBlock.arrange(g2,  c1);	  RectangleConstraint    height    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  incompatible  types	42	None	replace
116	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[1],  h[4]));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[1],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(h[1],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	38	None	replace
117	[BUG]  [BUGGY]  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CE]  incompatible  types  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	Double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  incompatible  types	37	None	replace
118	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.min(h[2],  Math.max(h[3],  h[4]));  [CE]  cannot  find  symbol  height  [FE]          AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[0]  =  h[1]  +  Math.min(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.min(h[2],  Math.max(h[3],  h[4]));	  h[0]    =    h[1]    +    Math.min(w[2],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	14	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	11	1	add
120	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[1]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[1]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	11	1	add
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  *  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  *  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	29	1	replace
122	[BUG]  [BUGGY]  double  height  =  h[0]  *  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  *  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  *  w[1]  +  Math.max(h[2],  Math.min(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	29	1	replace
123	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  Math.min(h[4],  h[3]));  [CE]  cannot  find  symbol  height  [FE]        AssertionFailedError      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  Math.min(h[4],  h[3]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	h[0]  =  h[1]  +  Math.max(h[2],  Math.min(h[4],  h[3]));	  h[0]    =    h[1]    +    Math.max(h[2],    Math.min(h[3],    h[4]));    	non-compiled	[CE]  cannot  find  symbol  height	39	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[4],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[4],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	41	1	replace
125	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[4],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[4],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.min(w[4],  h[4]));	  double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    Math.min(w[3],    h[4]));    	compilable	  [FE]  AssertionFailedError  	41	1	replace
126	[BUG]  [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]));  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]);  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    h[1]    +    Math.max(h[2],    h[4]);    double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  h[4]));	  	non-compiled	[CE]  ';'  expected	33	None	add
127	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[1],  h[4]));  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[1],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[1],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ';'  expected	36	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	44	1	add
129	[BUG]  [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]          h[0]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]      double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	                h[0]        =        h[1]        +        Math.max(h[2],        Math.max(h[3],        h[4]));        h[2]    =    h[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    h[0]  =  h[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  h[2]  =  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	  	compilable	  [FE]  AssertionFailedError  	44	1	add
130	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  w[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(w[2],  Math.max(h[3],  h[4]));  double  height  =  w[0]  +  w[1]  +  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double    height    =    h[0]    +    w[1]    +    Math.max(w[2],    Math.max(h[3],    h[4]));    double  height  =  w[0]  +  w[1]  +  Math.max(h[3],  h[4]));	  	non-compiled	[CE]  ';'  expected	1	None	add
131	[BUG]  [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[1],  Math.max(h[3],  Math.max(h[3],  h[4]));  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }      [BUGGY]  double  height  =  h[0]  +  w[1]  +  Math.max(h[1],  Math.max(h[3],  Math.max(h[3],  h[4]));  [BUGGY]      return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  h[0]  +  w[1]  +  Math.max(h[1],  Math.max(h[3],  Math.max(h[3],  h[4]));	  double    height    =    h[0]    +    w[1]    +    Math.max(h[2],    Math.max(h[3],    h[4]));    double    height    =    h[0]    +    w[1]    +    Math.max(h[3],    Math.max(h[3],    h[4]));    	non-compiled	[CE]  ')'  expected	22	None	replace
