bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getWidth()    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	replace
2	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getWidth()    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4];    w[3]  =  constraint.getWidth()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
4	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getWidth()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4];    w[3]  =  constraint.getWidth()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4];    w[4]  =  constraint.getWidth()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
6	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getWidth()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[4]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4];    w[4]  =  constraint.getWidth()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
7	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getWidth()  -  w[5];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4];    w[3]  =  constraint.getWidth()  -  w[5];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	add
8	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getWidth()  -  w[5];  [FE]  ArrayIndexOutOfBoundsException  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getWidth()  -  w[5];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4];    w[3]  =  constraint.getWidth()  -  w[5];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	39	1	add
9	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
10	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
11	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1]  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1]	  	non-compiled	[CE]  ';'  expected	26	None	add
12	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
13	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
14	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	replace
15	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	replace
17	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	replace
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];	  w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	81	1	replace
19	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];	  w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	81	1	replace
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
21	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  +  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
23	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
24	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
25	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
26	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
27	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
28	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
29	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
31	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
32	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
33	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
34	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
35	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
36	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
37	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
39	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
40	[BUG]  [BUGGY]  Size2D  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  Size2D    w[4]    =    constraint.getWidth()    -    w[4]    -    w[2];    	non-compiled	[CE]  ']'  expected	16	None	replace
41	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
42	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
43	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
44	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
45	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
46	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
47	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
48	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
49	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
50	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[3]  /  h[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	replace
52	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[3]  /  h[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	replace
53	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
54	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
55	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
56	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
57	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	80	1	add
58	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	80	1	add
59	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	80	1	add
60	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	80	1	add
61	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	80	1	add
62	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	80	1	add
63	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
64	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
65	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
66	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
67	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
68	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
69	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	add
70	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	add
71	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	add
72	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	add
73	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2]  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2]	  	non-compiled	[CE]  ';'  expected	82	None	add
74	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	77	1	replace
75	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	77	1	replace
76	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
77	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
78	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
79	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
80	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
81	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
82	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
83	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
84	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
85	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
86	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
87	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
88	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
89	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
90	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
91	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
92	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2	  	non-compiled	[CE]  ']'  expected	5	None	add
93	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];	  w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	replace
94	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];	  w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	replace
95	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getHeight()  -  w[3]  -  w[4];	  w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
96	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getHeight()  -  w[3]  -  w[4];	  w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
97	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
98	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
99	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
100	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
101	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
102	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
103	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
104	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
105	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
106	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
107	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
108	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
109	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1]  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1]	  	non-compiled	[CE]  ';'  expected	7	None	add
110	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
111	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
112	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  [CE]  cannot  find  symbol  c2  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c2);	  Size2D    size    =    this.bottomBlock.arrange(g2,    h);    	non-compiled	[CE]  cannot  find  symbol  c2	36	None	replace
113	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
114	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
115	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
116	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
117	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
118	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
119	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
120	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
121	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
122	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
123	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
124	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
125	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	87	1	replace
126	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	87	1	replace
127	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	replace
128	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	replace
129	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	replace
130	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	replace
131	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
132	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
133	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
134	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
135	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2	  	non-compiled	[CE]  ']'  expected	96	None	add
136	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
137	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
138	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
139	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
140	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
141	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
142	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
143	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
144	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
145	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	34	1	add
146	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
147	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
148	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
149	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
150	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
151	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
152	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
153	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
154	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
155	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
156	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
157	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
158	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
159	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
160	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
161	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
162	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
163	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
164	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
165	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
166	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[2]  /  w[3];	  w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
167	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  /  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[2]  /  w[3];	  w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
168	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
169	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
170	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
171	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
172	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
173	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
174	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight())-  w[3]  -  w[2];  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight())-  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight())-  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight())    -    w[3]    -    w[2];    	non-compiled	[CE]  ';'  expected	75	None	replace
175	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight())-  w[3]  -  w[2];  [CE]  ';'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight())-  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight())-  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight())    -    w[3]    -    w[2];    	non-compiled	[CE]  ';'  expected	75	None	replace
176	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
177	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
178	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
179	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
180	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
181	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
182	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
183	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
184	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[5]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[5]  -  w[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
185	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[5]  -  w[2];  [FE]  ArrayIndexOutOfBoundsException  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[5]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[5]  -  w[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	1	add
186	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[4]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
187	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[4]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
188	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
189	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
190	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
191	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
192	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2]  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2]	  	non-compiled	[CE]  ';'  expected	92	None	add
193	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
194	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
195	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
196	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
197	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
198	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
199	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	93	1	replace
200	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	93	1	replace
201	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
202	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
203	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  -  h[0];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
204	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  -  h[0];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
205	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
206	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
207	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
208	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
209	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	79	1	replace
210	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	79	1	replace
211	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  +  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	79	1	replace
212	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  +  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	79	1	replace
213	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
214	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
215	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
216	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
217	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
218	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
219	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
220	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
221	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[1]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[4]  =  constraint.getWidth()  -  w[1]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
222	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[1]  /  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[1]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[4]  =  constraint.getWidth()  -  w[1]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
223	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
224	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
225	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
226	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
227	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
228	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
229	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
230	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
231	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
232	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
233	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
234	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
235	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2	  	non-compiled	[CE]  ']'  expected	98	None	add
236	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
237	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
238	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
239	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
240	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
241	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
242	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
243	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
244	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
245	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
246	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
247	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
248	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
249	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
250	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
251	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
252	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
253	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
254	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
255	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
256	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
257	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
258	[BUG]  [BUGGY]  Size2D  w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  w[3]  =  constraint.getHeight()  -  w[4]  -  w[2];	  Size2D    w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    	non-compiled	[CE]  ']'  expected	17	None	replace
259	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	replace
260	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	25	1	replace
261	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
262	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
263	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
264	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
265	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
266	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
267	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  *  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2]  *  w[3];	  w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	replace
268	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  *  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  *  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2]  *  w[3];	  w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	replace
269	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c5);  [CE]  cannot  find  symbol  c5  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c5);  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c5);	  Size2D    size    =    this.leftBlock.arrange(g2,    c3);    	non-compiled	[CE]  cannot  find  symbol  c5	41	None	replace
270	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2]  -  w[3];	  w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	85	1	replace
271	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2]  -  w[3];	  w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	85	1	replace
272	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3];	  w[4]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	95	1	replace
273	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3];	  w[4]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	95	1	replace
274	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
275	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
276	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
277	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
278	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
279	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
280	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[5];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[5];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
281	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[5];  [FE]  ArrayIndexOutOfBoundsException  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[5];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[5];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	3	1	add
282	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
283	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
284	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
285	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
286	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
287	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
288	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
289	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
290	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
291	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
292	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
293	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
294	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
295	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
296	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	91	1	replace
297	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	91	1	replace
298	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[4]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	replace
299	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[4]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	replace
300	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getHeight()  -  w[4];	  w[3]    =    constraint.getWidth()    -    w[4];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	40	1	replace
301	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getHeight()  -  w[4];	  w[3]    =    constraint.getWidth()    -    w[4];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	40	1	replace
302	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	replace
303	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	replace
304	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
305	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
306	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
307	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
308	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
309	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
310	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
311	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
312	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
313	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
314	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2]  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2]	  	non-compiled	[CE]  ';'  expected	71	None	add
315	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	replace
316	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	replace
317	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	replace
318	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[2];    w[3]    =    constraint.getHeight()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	replace
319	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
320	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
321	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
322	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
323	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
324	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
325	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
326	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
327	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
328	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
329	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
330	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
331	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
332	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
333	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
334	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
335	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	replace
336	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	replace
337	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	replace
338	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	replace
339	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
340	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
341	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
342	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
343	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1]  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1]	  	non-compiled	[CE]  ';'  expected	65	None	add
344	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
345	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
346	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]  =  constraint.getWidth()  -  w[3]  -  h[1];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
347	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]  =  constraint.getWidth()  -  w[3]  -  h[1];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
348	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
349	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
350	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight()  -  w[1]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
351	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[1]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight()  -  w[1]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
352	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
353	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
354	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
355	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
356	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
357	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
358	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0]  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0]	  	non-compiled	[CE]  ';'  expected	28	None	add
359	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
360	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
361	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
362	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
363	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2	  	non-compiled	[CE]  ']'  expected	76	None	add
364	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  [CE]  cannot  find  symbol  c2  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c2);	  Size2D    size    =    this.leftBlock.arrange(g2,    h);    	non-compiled	[CE]  cannot  find  symbol  c2	42	None	replace
365	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
366	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
367	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
368	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
369	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
370	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
371	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  *  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
372	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  *  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	69	1	add
373	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
374	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
375	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
376	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
377	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2]  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2]  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2]	  	non-compiled	[CE]  ';'  expected	78	None	add
378	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
379	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
380	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
381	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
382	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
383	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
384	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
385	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
386	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
387	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
388	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight())  -  w[2];  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[3]  =  constraint.getHeight())  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[2];    w[3]  =  constraint.getHeight())  -  w[2];	  	non-compiled	[CE]  ';'  expected	37	None	add
389	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
390	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
391	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
392	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	add
393	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
394	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
395	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[1]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[1]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
396	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[1]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[1]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[1]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
397	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
398	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
399	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
400	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
401	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
402	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
403	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
404	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
405	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	99	1	replace
406	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	99	1	replace
407	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight())  -  w[3]  /  w[2];  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight())  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight())  -  w[3]  /  w[2];	  	non-compiled	[CE]  ';'  expected	43	None	add
408	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
409	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
410	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
411	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
412	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  if(this.bottomBlock!=  null)  {  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  }  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    if(this.bottomBlock!=  null)  {  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
413	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  if(this.bottomBlock!=  null)  {  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  if(this.bottomBlock!=  null)  {  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  }  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    if(this.bottomBlock!=  null)  {  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
414	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
415	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	add
416	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4];    w[3]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
417	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getHeight()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[3]  =  constraint.getHeight()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4];    w[3]  =  constraint.getHeight()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
418	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
419	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[4]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
420	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
421	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
422	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
423	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
424	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
425	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[2]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	88	1	add
426	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	replace
427	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	replace
428	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
429	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
430	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
431	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
432	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
433	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
434	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight())  -  w[3]  -  w[2];  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight())  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight())  -  w[3]  -  w[2];	  	non-compiled	[CE]  ';'  expected	13	None	add
435	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[2]  =  constraint.getWidth()  -  w[2]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[2]  =  constraint.getWidth()  -  w[2]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
436	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[2]  =  constraint.getWidth()  -  w[2]  /  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  w[3];  w[2]  =  constraint.getWidth()  -  w[2]  /  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[2]    /    w[3];    w[2]  =  constraint.getWidth()  -  w[2]  /  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
437	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  -  h[0];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
438	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  -  h[0];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	replace
439	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	replace
440	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	10	1	replace
441	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
442	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
443	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[4];	  w[3]    =    constraint.getWidth()    -    w[4];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	40	1	replace
444	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[4];	  w[3]    =    constraint.getWidth()    -    w[4];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	40	1	replace
445	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight())  -  w[2]  -  w[3];  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[4]  =  constraint.getHeight())  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[4]  =  constraint.getHeight())  -  w[2]  -  w[3];	  	non-compiled	[CE]  ';'  expected	84	None	add
446	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
447	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];  [FE]  ArrayIndexOutOfBoundsException  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[5]  -  w[2];	  	compilable	  [FE]  ArrayIndexOutOfBoundsException  	1	1	add
448	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
449	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[0];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[3]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
450	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
451	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  -  w[1];  w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[3]    =    constraint.getWidth()    -    w[1];    w[3]  =  constraint.getWidth()  +  w[2];  w[3]  =  constraint.getWidth()  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	add
452	[BUG]  [BUGGY]  Size2D  w[4]  =  constraint.getWidth()  -  w[4]  -  w[3];  [CE]  ']'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  w[4]  =  constraint.getWidth()  -  w[4]  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  w[4]  =  constraint.getWidth()  -  w[4]  -  w[3];	  Size2D    w[4]    =    constraint.getWidth()    -    w[4]    -    w[2];    	non-compiled	[CE]  ']'  expected	16	None	replace
453	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
454	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
455	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
456	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
457	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
458	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
459	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
460	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
461	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
462	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
463	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
464	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	add
465	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
466	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
467	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getHeight()  -  w[2];	  w[4]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	95	1	replace
468	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getHeight()  -  w[2];	  w[4]    =    constraint.getWidth()    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	95	1	replace
469	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
470	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
471	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
472	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
473	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
474	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
475	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
476	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[3]  -  h[1];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
477	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
478	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
479	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
480	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
481	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight())  -  w[3]  -  w[2];  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight())  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight())  -  w[3]  -  w[2];	  	non-compiled	[CE]  ';'  expected	80	None	add
482	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
483	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  +  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[3]  =  constraint.getWidth()  +  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
484	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  +  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	79	1	replace
485	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  +  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	79	1	replace
486	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
487	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
488	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
489	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
490	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
491	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
492	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4];    w[2]  =  constraint.getWidth()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
493	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4];  w[2]  =  constraint.getWidth()  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4];    w[2]  =  constraint.getWidth()  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
494	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
495	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
496	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
497	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
498	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
499	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	add
500	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3,]  -  w[2];  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3,]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3,]  -  w[2];	  	non-compiled	[CE]  ']'  expected	80	None	add
501	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
502	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    %    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  %  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	add
503	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
504	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
505	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
506	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[1];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
507	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
508	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
509	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
510	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
511	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
512	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	1	1	add
513	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	91	1	replace
514	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	91	1	replace
515	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
516	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  /  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	add
517	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
518	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  -  h[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    -    h[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	add
519	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
520	[BUG]  [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getHeight()  -  w[2];  w[2]  =  constraint.getHeight()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getHeight()    -    w[2];    w[2]  =  constraint.getHeight()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
521	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2]  /  h[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	replace
522	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  /  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2]  /  h[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	replace
523	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
524	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	replace
525	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
526	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
527	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
528	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
529	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
530	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    *    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
531	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
532	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
533	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
534	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  *  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  *  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[2]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	97	1	replace
535	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
536	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[4];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[3]  -  w[4];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[4];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]    =    constraint.getWidth()    -    w[3]    -    w[4];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[4];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
537	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
538	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
539	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[1]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[1]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
540	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[1]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[1]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[1]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
541	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	99	1	replace
542	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[3]    =    constraint.getWidth()    -    w[3]    /    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	99	1	replace
543	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
544	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[2]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[2]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
545	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
546	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    +    w[3]    /    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  +  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	78	1	add
547	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
548	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	63	1	add
549	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
550	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
551	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
552	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[4]  -  w[2];	          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	83	1	replace
553	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
554	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	59	1	add
555	[BUG]  [BUGGY]  Size2D  w[3]  =  constraint.getWidth()  -  w[1]  -  w[2];  [CE]  ']'  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  Size2D  w[3]  =  constraint.getWidth()  -  w[1]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	Size2D  w[3]  =  constraint.getWidth()  -  w[1]  -  w[2];	  Size2D    w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    	non-compiled	[CE]  ']'  expected	17	None	replace
556	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
557	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	add
558	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
559	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
560	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
561	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	65	1	add
562	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
563	[BUG]  [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[4]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	add
564	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
565	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
566	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
567	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	add
568	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
569	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
570	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
571	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	add
572	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
573	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  /  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[3]  /  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  /  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[3]    /    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  /  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
574	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	add
575	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	add
576	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[2]  =  constraint.getHeight()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[2]  =  constraint.getHeight()  -  w[2]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
577	[BUG]  [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[2]  =  constraint.getHeight()  -  w[2]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getHeight()  -  w[2]  -  w[3];  w[2]  =  constraint.getHeight()  -  w[2]  -  w[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]    =    constraint.getHeight()    -    w[2]    -    w[3];    w[2]  =  constraint.getHeight()  -  w[2]  -  w[3];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	add
578	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
579	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        -        h[2];        w[4]    =    constraint.getWidth()    -    w[3]    -    h[0];    w[2]  =  constraint.getWidth()  -  w[3]  -  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
580	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
581	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[4]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
582	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
583	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[2]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
584	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
585	[BUG]  [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getWidth()    -    w[3]    /    w[2];    w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getWidth()        -        w[3]        /        w[2];        w[4]    =    constraint.getWidth()    -    w[3]    /    w[1];    w[3]  =  constraint.getWidth()  -  w[3]  /  w[2];  w[4]  =  constraint.getWidth()  -  w[3]  /  w[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
586	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];	  w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	replace
587	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[2]  =  constraint.getWidth()  -  w[4]  -  w[3];	  w[2]    =    constraint.getWidth()    -    w[4]    -    w[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	replace
588	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
589	[BUG]  [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]        =        constraint.getHeight()        -        w[3]        -        w[2];        w[2]    =    constraint.getHeight()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	90	1	add
590	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  -  h[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[4]  =  constraint.getWidth()  -  w[2]  -  h[3];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	93	1	replace
591	[BUG]  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  -  h[3];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[4]  =  constraint.getWidth()  -  w[2]  -  h[3];  [BUGGY]      RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[4]  =  constraint.getWidth()  -  w[2]  -  h[3];	  w[4]    =    constraint.getWidth()    -    w[3]    -    h[2];    w[2]    =    constraint.getWidth()    -    w[3]    -    h[2];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	93	1	replace
592	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
593	[BUG]  [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[3]    =    constraint.getWidth()    -    w[2];    w[4]  =  constraint.getWidth()  -  w[2];  w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[3]        =        constraint.getWidth()        -        w[2];        w[4]    =    constraint.getWidth()    -    w[2];    w[2]  =  constraint.getWidth()  -  w[2];  w[4]  =  constraint.getWidth()  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	add
594	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
595	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    +    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	71	1	add
596	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
597	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[3]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getHeight()  -  w[3]  -  w[2];  w[3]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	100	1	add
598	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
599	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[4]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
600	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
601	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]  w[3]  =  constraint.getWidth()  -  w[4]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	w[3]    =    constraint.getWidth()    -    w[4]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[4]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
602	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
603	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];      [BUGGY]          w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];  [BUGGY]      w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	                w[2]        =        constraint.getWidth()        -        w[3]        -        w[2];        w[2]    =    constraint.getWidth()    -    w[3]    -    w[2];    w[2]  =  constraint.getWidth()  +  w[3]  -  w[2];  w[2]  =  constraint.getWidth()  -  w[3]  -  w[2];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
