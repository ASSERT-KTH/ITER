bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c1);	  Size2D    size    =    this.leftBlock.arrange(g2,    c4);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	11	None	replace
2	[BUG]  [BUGGY]  g2.setPaint(size.getPaint(),  this.rightBlock.getPaint());  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  g2.setPaint(size.getPaint(),  this.rightBlock.getPaint());  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	g2.setPaint(size.getPaint(),  this.rightBlock.getPaint());	  g2.setPaint(this.rightBlock,    size.getPaint());    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
4	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
6	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
8	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
9	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c3);  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c3);	  Size2D    size    =    this.leftBlock.arrange(g2,    c1,    c3);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	2	None	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
11	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
12	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
13	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
14	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    Size2D  size  =  this.rightBlock.arrange(g2,  c3);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	14	None	add
15	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);	  Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]  =  size.width;  h[2]  =  size.height;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
17	[BUG]  [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]  =  size.width;  h[2]  =  size.height;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  h[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	h[2]  =  size.width;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
19	[BUG]  [BUGGY]  h[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  h[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	h[2]  =  size.width;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
20	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);	  w[2]    =    size.width;    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	7	None	replace
21	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[3]  =  size.width;  w[3]  =  size.height;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[3]  =  size.width;  w[3]  =  size.height;	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
22	[BUG]  [BUGGY]  w[3]  =  size.width;  w[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[3]  =  size.width;  w[3]  =  size.height;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[3]  =  size.width;  w[3]  =  size.height;	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
23	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]  =  size.width;  w[3]  =  size.height;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]  =  size.width;  w[3]  =  size.height;	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
24	[BUG]  [BUGGY]  w[2]  =  size.width;  w[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]  =  size.width;  w[3]  =  size.height;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]  =  size.width;  w[3]  =  size.height;	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
25	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
26	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
27	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
28	[BUG]  [BUGGY]  g2.setPaint(this.centerBlock,  this.rightBlock.getPaint());  [CE]  cannot  find  symbol  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  g2.setPaint(this.centerBlock,  this.rightBlock.getPaint());  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	g2.setPaint(this.centerBlock,  this.rightBlock.getPaint());	  g2.setPaint(this.rightBlock,    this.centerBlock.getPaint());    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
29	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        h[2]    =    size.width;    w[2]  =  size.width;  h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
30	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    w[2]  =  size.width;  h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
31	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[3]  =  size.width;  h[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        h[2]    =    size.width;    w[3]  =  size.width;  h[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
32	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[3]  =  size.width;  h[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[3]  =  size.width;  h[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    w[3]  =  size.width;  h[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
33	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    Size2D  size  =  this.rightBlock.arrange(g2,  c3);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	12	None	add
34	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
35	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
36	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
37	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]  >=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]  >=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
39	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]  >=  size.width)  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]  >=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]  >=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
40	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        h[2]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
41	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
42	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  else  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  size[3]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  else  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  size[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  else  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  size[3]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	12	None	add
43	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
44	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.width;  }	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
45	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
46	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
47	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[3]  =  size.width;  w[3]  =  size.width;	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
48	[BUG]  [BUGGY]  w[3]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[3]  =  size.width;  w[3]  =  size.width;	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
49	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[2]    =    size.width;    if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
50	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[2]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
52	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
53	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
54	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
55	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4,  c3);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c4,  c3);  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c4,  c3);	  Size2D    size    =    this.leftBlock.arrange(g2,    c1,    c3);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	2	None	replace
56	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[3]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
57	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
58	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        w[3]    =    size.width;    if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
59	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    if(this.rightBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
60	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  [BUGGY]      w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);	  Size2D    size    =    this.centerBlock.arrange(g2,    c4);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	replace
61	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
62	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	size  =  this.rightBlock.arrange(g2,  c3);	  w[2]    =    size.width;    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
63	[BUG]  [BUGGY]  size  =  this.rightBlock.arrange(g2,  c3);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	size  =  this.rightBlock.arrange(g2,  c3);	  w[2]    =    size.width;    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	replace
64	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  h[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	h[3]  =  size.width;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
65	[BUG]  [BUGGY]  h[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  h[3]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	h[3]  =  size.width;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
66	[BUG]  [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  h[3]  =  size.height;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    w[3]  =  size.width;  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  h[3]  =  size.height;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        w[3]    =    size.width;    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  else  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  h[3]  =  size.height;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	14	None	add
67	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[3]  =  size.width;  h[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        h[2]    =    size.width;    w[3]  =  size.width;  h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
68	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[3]  =  size.width;  h[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[3]  =  size.width;  h[2]  =  size.width;  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    w[3]  =  size.width;  h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
69	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  h[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    h[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
70	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  h[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  h[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    h[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
71	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
72	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  w[3]  =  size.width;  }	  w[2]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
