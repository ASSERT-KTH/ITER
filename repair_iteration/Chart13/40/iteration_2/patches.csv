bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  size  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c2);    w[3]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  size	9	None	replace
2	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  cannot  find  symbol  c1  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[3]  =  size.width;	  Size2D    size    =    this.leftBlock.arrange(g2,    c4);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c1	8	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
4	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
5	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  c4  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }	  	non-compiled	[CE]  cannot  find  symbol  c4	6	None	add
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
7	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
8	[BUG]  [BUGGY]  w[3]  =  this.leftBlock.width;  [CE]  cannot  find  symbol  width  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  w[3]  =  this.leftBlock.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	w[3]  =  this.leftBlock.width;	  w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  width	11	None	replace
9	[BUG]  [BUGGY]  w[3]  =  this.rightBlock.width;  [CE]  cannot  find  symbol  width  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  w[3]  =  this.rightBlock.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	w[3]  =  this.rightBlock.width;	  w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  width	11	None	replace
10	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
11	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
12	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  c4  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }	  	non-compiled	[CE]  cannot  find  symbol  c4	4	None	add
13	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
14	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
15	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  size  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  size	7	None	replace
16	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  w,  c3);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,double[],RectangleConstraint)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  w,  c3);  [BUGGY]      w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3,  w,  c3);	  Size2D    size    =    this.leftBlock.arrange(g2,    c3,    c3);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,double[],RectangleConstraint)	10	None	replace
17	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  w[3]);  [CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,double)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  w[3]);  [BUGGY]      w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3,  w[3]);	  Size2D    size    =    this.leftBlock.arrange(g2,    c3,    c3);    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,RectangleConstraint,double)	10	None	replace
18	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  cannot  find  symbol  c1  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c4);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c1	3	None	replace
19	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	1	None	add
20	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	1	None	add
21	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	1	None	add
22	[BUG]  [BUGGY]  w[2]  =  this.leftBlock.width;  [CE]  cannot  find  symbol  width  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  w[2]  =  this.leftBlock.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	w[2]  =  this.leftBlock.width;	  w[2]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  width	12	None	replace
23	[BUG]  [BUGGY]  w[2]  =  c3.width;  [CE]  width  has  private  access  in  RectangleConstraint  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  w[2]  =  c3.width;  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	w[2]  =  c3.width;	  w[2]    =    size.width;    	non-compiled	[CE]  width  has  private  access  in  RectangleConstraint	12	None	replace
24	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  else  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	1	None	add
25	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[2]    =    size.width;    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFF(BlockContainer,Graphics2D,RectangleConstraint)	1	None	add
26	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  c2  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }	  	non-compiled	[CE]  cannot  find  symbol  c2	4	None	add
27	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }  [CE]  cannot  find  symbol  c2  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[3]  =  size.width;  }	  	non-compiled	[CE]  cannot  find  symbol  c2	6	None	add
28	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
29	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
30	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c4);  [CE]  cannot  find  symbol  c4  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c4);  [BUGGY]      w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3,  c4);	  Size2D    size    =    this.leftBlock.arrange(g2,    c3,    c3);    	non-compiled	[CE]  cannot  find  symbol  c4	10	None	replace
31	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	add	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
32	[BUG]  [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);      [BUGGY]          if(this.leftBlock!=    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock  ==  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  [BUGGY]      Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	replace	                if(this.leftBlock!=        null)        {        Size2D        size        =        this.leftBlock.arrange(g2,        c3);        w[3]        =        size.width;        }        if(this.leftBlock    ==    null)    {    Size2D    size    =    this.leftBlock.arrange(g2,    c3);    w[3]    =    size.width;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
