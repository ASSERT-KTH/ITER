bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [CE]  '('  or  '['  expected  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new	  if(this.width!=    null)    {    Size2D    size    =    this.widthBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  '('  or  '['  expected	24	None	replace
2	[BUG]  [BUGGY]  Size2D  size  =  this.widthBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.widthBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.widthBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;	  if(this.width!=    null)    {    Size2D    size    =    this.widthBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
4	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
5	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  cannot  find  symbol  c3  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	non-compiled	[CE]  cannot  find  symbol  c3	16	None	add
6	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
8	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	1	1	add
9	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
10	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
12	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
13	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
14	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
17	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
18	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
19	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
20	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
23	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
25	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	27	1	add
26	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
27	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[1]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
28	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[1]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[1]  =  size.width;  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[1]  =  size.width;  h[1]  =  size.height;	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[1]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
29	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);	  Size2D    size    =    this.leftBlock.arrange(g2,    c1);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  Size2D  size  =  this.size.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.size.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.size.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
32	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[2]  =  size.height;	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  Size2D  size  =  this.size.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.size.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.size.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
36	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
37	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  cannot  find  symbol  c3  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	non-compiled	[CE]  cannot  find  symbol  c3	18	None	add
38	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
40	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
41	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
42	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
43	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[0]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[0]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
44	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
45	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);	  RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	37	None	replace
47	[BUG]  [BUGGY]  h[0]  =  size.height;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  h[0]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	h[0]  =  size.height;	  h[2]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
48	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
50	[BUG]  [BUGGY]  if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
52	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
53	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
54	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[2]  =  size.height;  }	  w[2]    =    size.width;    h[2]    =    size.height;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  NullPointerException  	1	1	add
56	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  NullPointerException  	1	1	add
57	[BUG]  [BUGGY]  Size2D  size  =  this.size.width.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.size.width.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.size.width.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
58	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
59	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.width.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.width.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.width.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  NullPointerException  	3	1	add
61	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  NullPointerException  	3	1	add
62	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
63	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
64	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
65	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w  [CE]  not  a  statement  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w	  	non-compiled	[CE]  not  a  statement	16	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
67	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	30	1	add
68	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [CE]  '('  or  '['  expected  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new	  if(this.width!=    null)    {    Size2D    size    =    this.widthBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
69	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[1]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[1]  =  size.width;  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[1]  =  size.width;  h[1]  =  size.height;	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
71	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE	  RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	37	None	replace
72	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
73	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[0]  =  size.width;  h[0]  =  size.height;  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[0]  =  size.width;  h[0]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[0]  =  size.width;  h[0]  =  size.height;	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[1]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
74	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE));  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE));  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE));	  RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW,    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	37	None	replace
75	[BUG]  [BUGGY]  if(this.height!=  0)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.height!=  0)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.height!=  0)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
76	[BUG]  [BUGGY]  if(this.c2!=  null)  {  Size2D  size  =  this.c2.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.c2!=  null)  {  Size2D  size  =  this.c2.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.c2!=  null)  {  Size2D  size  =  this.c2.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
77	[BUG]  [BUGGY]  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	w[2]  =  size.width;  h[1]  =  size.height;	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
78	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
79	[BUG]  [BUGGY]  if(c2!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(c2!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(c2!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
80	[BUG]  [BUGGY]  if(c2!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(c2!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(c2!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[0]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
81	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
82	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
83	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[2]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(c2!=  null)  {  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	if(c2!=  null)  {	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	compilable	  [FE]  NullPointerException  	2	1	replace
85	[BUG]  [BUGGY]  if(c2!=  null)  {  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(c2!=  null)  {  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(c2!=  null)  {	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	compilable	  [FE]  NullPointerException  	2	1	replace
86	[BUG]  [BUGGY]  if(this.c2!=  null)  {  [CE]  cannot  find  symbol  c2  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.c2!=  null)  {  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.c2!=  null)  {	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c2	2	None	replace
87	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE	  RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE    	non-compiled	[CE]  ')'  expected	22	None	replace
88	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[1]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[1]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[1]  =  size.width;  h[1]  =  size.height;  }	  if(this.centerBlock!=    null)    {    Size2D    size    =    this.centerBlock.arrange(g2,    c2);    w[1]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
89	[BUG]  [BUGGY]  if(this.height!=  null)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.height!=  null)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.height!=  null)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
90	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
91	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);	  RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.NONE,    0.0,    null,    LengthConstraintType.RANGE);    	non-compiled	[CE]  ')'  expected	15	None	replace
92	[BUG]  [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	                if(this.rightBlock!=        null)        {        Size2D        size        =        this.rightBlock.arrange(g2,        c2);        w[2]        =        size.width;        h[1]        =        size.height;        }        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
93	[BUG]  [BUGGY]  if(this.height!=  null)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.height!=  null)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.height!=  null)  {  Size2D  size  =  this.heightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  if(this.left  <  0)  {  Size2D  size  =  this.left.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);      [BUGGY]  if(this.left  <  0)  {  Size2D  size  =  this.left.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.left  <  0)  {  Size2D  size  =  this.left.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
