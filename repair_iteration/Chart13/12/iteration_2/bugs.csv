bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
2	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
4	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
5	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  cannot  find  symbol  c3  [FE]        AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	non-compiled	[CE]  cannot  find  symbol  c3	9	None	add
6	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);	      RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	2	None	replace
9	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
10	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3);	      Size2D    size    =    this.leftBlock.arrange(g2,    c2);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c1);	      Size2D    size    =    this.leftBlock.arrange(g2,    c2);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [CE]  '('  or  '['  expected  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
14	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [CE]  '('  or  '['  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
15	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.RANGE);	      RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	4	None	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
17	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
19	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
20	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  [CE]  cannot  find  symbol  c3  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }	  	non-compiled	[CE]  cannot  find  symbol  c3	6	None	add
21	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE);  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  LengthConstraintType.NONE,  0.0,  null,  LengthConstraintType.NONE);	      RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    width),    LengthConstraintType.NONE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	3	None	replace
22	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE	      RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [CE]  '('  or  '['  expected  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
24	[BUG]  [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [CE]  '('  or  '['  expected  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.width!=  null)  {  Size2D  size  =  this.widthBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  else  {  RectangleConstraint  c3  =  new	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    	non-compiled	[CE]  '('  or  '['  expected	8	None	replace
25	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
28	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
29	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[1]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[1]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[1]  =  size.width;  h[1]  =  size.height;  }	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
31	[BUG]  [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]      if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	        if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[0]  =  size.height;  }	  	compilable	  [FE]  AssertionFailedError  	9	1	add
32	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  width,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  width,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  width,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);	      RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	2	None	replace
33	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[1]  =  size.height;  }	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c1);  w[2]  =  size.width;  h[1]  =  size.height;  }	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  h[2]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	h[2]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	w[2]  =  size.width;  h[2]  =  size.height;	      if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    w[2]    =    size.width;    h[2]    =    size.height;    }    else    {    RectangleConstraint    c3    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]    h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);    [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]    if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW,  maxW,  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);	      RectangleConstraint    c2    =    new    RectangleConstraint(0.0,    new    Range(Math.min(w[2],    maxW),    maxW,    LengthConstraintType.RANGE,    0.0,    null,    LengthConstraintType.NONE);    	non-compiled	[CE]  ')'  expected	4	None	replace
