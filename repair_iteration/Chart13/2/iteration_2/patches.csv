bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  LengthConstraintType  h  =  constraint.getWidth()  -  1;  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  h  =  constraint.getWidth()  -  1;  [BUGGY]      if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	LengthConstraintType  h  =  constraint.getWidth()  -  1;	  LengthConstraintType    h    =    constraint.getHeight()    -    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Size2D  contentSize  =  arrangeNN(container,  g2,  constraint.getHeight());  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Size2D  contentSize  =  arrangeNN(container,  g2,  constraint.getHeight());  [BUGGY]      contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	Size2D  contentSize  =  arrangeNN(container,  g2,  constraint.getHeight());	  Size2D    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  [BUGGY]      contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	Size2D  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());	  Size2D    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  if(h  ==  LengthConstraintType.NONE  &&  constraint.getWidth()  ==  LengthConstraintType.NONE)  {  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  if(h  ==  LengthConstraintType.NONE  &&  constraint.getWidth()  ==  LengthConstraintType.NONE)  {  [BUGGY]      contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	if(h  ==  LengthConstraintType.NONE  &&  constraint.getWidth()  ==  LengthConstraintType.NONE)  {	  if(h    ==    LengthConstraintType.NONE    &&    constraint.getHeight()    ==    LengthConstraintType.NONE)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	9	None	replace
5	[BUG]  [BUGGY]  LengthConstraintType  h  =  constraint.getBounds(container,  g2);  [CE]  illegal  start  of  type  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  h  =  constraint.getBounds(container,  g2);  [BUGGY]      if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	LengthConstraintType  h  =  constraint.getBounds(container,  g2);	  LengthConstraintType    h    =    constraint.getBounds(g2,    container);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  Integer  w  =  constraint.getWidth()  +  1;  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  Integer  w  =  constraint.getWidth()  +  1;  [BUGGY]      if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	Integer  w  =  constraint.getWidth()  +  1;	  Integer    w    =    constraint.getWidth();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  LengthConstraintType  h  =  container.getBounds(container,  g2,  constraint);  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {      [BUGGY]  LengthConstraintType  h  =  container.getBounds(container,  g2,  constraint);  [BUGGY]      if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	LengthConstraintType  h  =  container.getBounds(container,  g2,  constraint);	  LengthConstraintType    h    =    container.getBounds(container,    g2);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
