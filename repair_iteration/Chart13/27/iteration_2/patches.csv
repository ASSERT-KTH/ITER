bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
2	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    w[2]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	2	1	add
3	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	2	None	add
4	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	2	None	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[4]  =  size.height;	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
6	[BUG]  [BUGGY]  w[4]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[4]  =  size.height;	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
7	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
8	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
9	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
10	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
11	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
12	[BUG]  [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[2]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
13	[BUG]  [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(w[3]  <  size.width;  w[2]  >  size.width)  {  w[3]  =  size.width;  w[2]  =  size.width;  }  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(w[3]  <  size.width;  w[2]  >  size.width)  {  w[3]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[2]    =    size.width;    if(w[3]  <  size.width;  w[2]  >  size.width)  {  w[3]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  ')'  expected	18	None	add
14	[BUG]  [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[3]  =  size.width;  w[2]  =  size.width;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[3]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[2]    =    size.width;    if(size.width!=  null)  {  w[3]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	18	None	add
15	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
16	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
17	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
18	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
19	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  [CE]  illegal  start  of  type  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	h[2]  =  size.width;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
21	[BUG]  [BUGGY]  h[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	h[2]  =  size.width;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]  =  size.width;  h[2]  =  size.height;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
23	[BUG]  [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]  =  size.width;  h[2]  =  size.height;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
24	[BUG]  [BUGGY]  g2.setPaint(this.centerBlock.getPaint(),  size.height);  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  g2.setPaint(this.centerBlock.getPaint(),  size.height);  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	g2.setPaint(this.centerBlock.getPaint(),  size.height);	          g2.setPaint(this.centerBlock.getPaint());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
25	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.height;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
26	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
27	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
28	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  [CE]  not  a  statement  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]	  	non-compiled	[CE]  not  a  statement	4	None	add
29	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
31	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
32	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
33	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  h[4]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	h[4]  =  size.height;	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
34	[BUG]  [BUGGY]  h[4]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  h[4]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	h[4]  =  size.height;	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
35	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
36	[BUG]  [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[3]    =    size.width;    w[3]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
37	[BUG]  [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  if(size.width!=  null)  {  w[3]  =  size.width;  w[3]  =  size.width;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  if(size.width!=  null)  {  w[3]  =  size.width;  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[3]    =    size.width;    if(size.width!=  null)  {  w[3]  =  size.width;  w[3]  =  size.width;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	8	None	add
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
39	[BUG]  [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  w[2]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[3]    =    size.width;    w[2]  =  size.width;  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
40	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[4]  =  size.width;  w[3]  =  size.width;	  w[3]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	replace
41	[BUG]  [BUGGY]  w[4]  =  size.width;  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[4]  =  size.width;  w[3]  =  size.width;	  w[3]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	replace
42	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[4]  =  size.width;  w[2]  =  size.width;	  w[3]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
43	[BUG]  [BUGGY]  w[4]  =  size.width;  w[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[4]  =  size.width;  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[4]  =  size.width;  w[2]  =  size.width;	  w[3]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
44	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
45	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
46	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  }  w[3]  =  size.width;  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  }  w[3]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  }  w[3]  =  size.width;	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
47	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.height;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
48	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.height;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
49	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  size.width;  if(h[2]!=  size.width)  {  h[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	h[2]  =  size.width;  if(h[2]!=  size.width)  {  h[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
50	[BUG]  [BUGGY]  h[2]  =  size.width;  if(h[2]!=  size.width)  {  h[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  h[2]  =  size.width;  if(h[2]!=  size.width)  {  h[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	h[2]  =  size.width;  if(h[2]!=  size.width)  {  h[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        h[2]    =    size.width;    w[2]  =  size.width;  h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
52	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  size.width;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    w[2]  =  size.width;  h[2]  =  size.width;	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
53	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(w[2]!=  size.width;  h[2]  ==  size.width)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(w[2]!=  size.width;  h[2]  ==  size.width)  {  w[2]  =  size.width;  h[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    if(w[2]!=  size.width;  h[2]  ==  size.width)  {  w[2]  =  size.width;  h[2]  =  size.width;  }	  	non-compiled	[CE]  ')'  expected	20	None	add
54	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  Size.width;  h[2]  =  size.width;  [CE]  cannot  find  symbol  Size  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  Size.width;  h[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    w[2]  =  Size.width;  h[2]  =  size.width;	  	non-compiled	[CE]  cannot  find  symbol  Size	20	None	add
55	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
56	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
57	[BUG]  [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(w[3]!=  size.width;  w[2]  ==  size.width;  w[4]  =  size.height;  }  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(w[3]!=  size.width;  w[2]  ==  size.width;  w[4]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[2]    =    size.width;    if(w[3]!=  size.width;  w[2]  ==  size.width;  w[4]  =  size.height;  }	  	non-compiled	[CE]  ')'  expected	18	None	add
58	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(size.width!=  null)  {  w[2]  =  size.width;  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	2	None	add
59	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  =  size.width;  }  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  ')'  expected	2	None	add
60	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(size.width!=  width)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(size.width!=  width)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
61	[BUG]  [BUGGY]  if(size.width!=  width)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(size.width!=  width)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(size.width!=  width)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  w[2]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	replace
62	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;  }  w[2]  =  size.height;  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;  }  w[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.height;  }  w[2]  =  size.height;	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
63	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]  =  size.width;  h[3]  =  size.height;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
64	[BUG]  [BUGGY]  w[2]  =  size.width;  h[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]  =  size.width;  h[3]  =  size.height;	  w[2]    =    size.width;    h[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
65	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(w[2]!=  size.width;  h[2]  ==  size.width;  h[2]  =  size.width;  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(w[2]!=  size.width;  h[2]  ==  size.width;  h[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    if(w[2]!=  size.width;  h[2]  ==  size.width;  h[2]  =  size.width;	  	non-compiled	[CE]  ')'  expected	20	None	add
66	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(w[2]!=  size.width;  h[2]  ==  size.width;  h[2]  =  size.width;  }  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  if(w[2]!=  size.width;  h[2]  ==  size.width;  h[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    if(w[2]!=  size.width;  h[2]  ==  size.width;  h[2]  =  size.width;  }	  	non-compiled	[CE]  ')'  expected	20	None	add
67	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
70	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
71	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
72	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
73	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  w[3]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]  =  size.width;  w[3]  =  size.height;	  w[3]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	replace
74	[BUG]  [BUGGY]  w[2]  =  size.width;  w[3]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]  =  size.width;  w[3]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]  =  size.width;  w[3]  =  size.height;	  w[3]    =    size.width;    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	replace
75	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
76	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
77	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  }  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  w[3]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  type	14	None	add
79	[BUG]  [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]  <  size.width;  w[3]  >  size.width;  w[3]  >  size.width;  }  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]  <  size.width;  w[3]  >  size.width;  w[3]  >  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[3]    =    size.width;    if(w[3]  <  size.width;  w[3]  >  size.width;  w[3]  >  size.width;  }	  	non-compiled	[CE]  ')'  expected	8	None	add
80	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
81	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
82	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
83	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]  =  size.width;  w[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]  =  size.width;  w[2]  =  size.height;	  w[3]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
84	[BUG]  [BUGGY]  w[3]  =  size.width;  w[2]  =  size.height;  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]  =  size.width;  w[2]  =  size.height;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]  =  size.width;  w[2]  =  size.height;	  w[3]    =    size.width;    w[2]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
85	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
88	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
89	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
90	[BUG]  [BUGGY]  g2.setPaint(this.centerBlock,  size.getPaint());  [CE]  cannot  find  symbol  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  g2.setPaint(this.centerBlock,  size.getPaint());  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	g2.setPaint(this.centerBlock,  size.getPaint());	          g2.setPaint(this.centerBlock.getPaint());    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
91	[BUG]  [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]!=  size.width;  w[3]  ==  size.width;  }  else  {  w[4]  =  size.height;  }  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[3]  =  size.width;  if(w[3]!=  size.width;  w[3]  ==  size.width;  }  else  {  w[4]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[3]    =    size.width;    if(w[3]!=  size.width;  w[3]  ==  size.width;  }  else  {  w[4]  =  size.height;  }	  	non-compiled	[CE]  ')'  expected	8	None	add
92	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(w[4]  <  size.width)  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(w[4]  <  size.width)  {  w[3]  =  size.width;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
93	[BUG]  [BUGGY]  if(w[4]  <  size.width)  {  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(w[4]  <  size.width)  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(w[4]  <  size.width)  {  w[3]  =  size.width;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    w[3]    =    size.width;    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
94	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  <  =  LengthConstraintType.FIXED)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  <  =  LengthConstraintType.FIXED)  {  w[2]  =  size.width;  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  <  =  LengthConstraintType.FIXED)  {  w[2]  =  size.width;  w[2]  =  size.width;  }	  	non-compiled	[CE]  ')'  expected	2	None	add
95	[BUG]  [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  <  =  LengthConstraintType.FIXED)  {  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    w[2]  =  size.width;  if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  <  =  LengthConstraintType.FIXED)  {  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        w[2]    =    size.width;    if(w[2]!=  size.width;  w[2]  ==  size.width;  w[2]  <  =  LengthConstraintType.FIXED)  {  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }	  	non-compiled	[CE]  ')'  expected	2	None	add
96	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
97	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
98	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
99	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.height;  }	  w[3]    =    size.width;    if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	17	1	replace
100	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
101	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	6	1	add
102	[BUG]  [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  Size.width;  [CE]  cannot  find  symbol  Size  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    h[2]  =  size.width;  w[2]  =  size.width;  h[2]  =  Size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        h[2]    =    size.width;    w[2]  =  size.width;  h[2]  =  Size.width;	  	non-compiled	[CE]  cannot  find  symbol  Size	20	None	add
103	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
104	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.height;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.height;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	replace
105	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  w[2]  =  size.width;  [CE]  illegal  start  of  type  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  w[2]  =  size.width;  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  w[2]  =  size.width;	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
106	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  [CE]  illegal  start  of  type  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  w[2]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
107	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
108	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	add
109	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
110	[BUG]  [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [CE]  illegal  start  of  expression  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[2]    =    size.width;    if(w[2]!=  size.width)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[2]        =        size.width;        if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    if(this.centerBlock!=  null)  {  w[2]  =  size.width;  if(w[2]!=  size.width)  {  w[2]  =  size.height;  }  else  {  w[2]  =  size.width;  }	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
111	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
112	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
113	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
114	[BUG]  [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    if(w[3]  <  size.width)  {  w[3]  =  size.width;  }  else  {  w[3]  =  size.width;  }  if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        if(w[3]    <    size.width)    {    w[3]    =    size.width;    }    else    {    w[3]    =    size.width;    }    if(w[3]  <  size.width)  {  w[3]  =  size.height;  }  else  {  w[3]  =  size.height;  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
115	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
116	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  size.width;  }  else  {  w[2]  =  size.width;  }	  w[2]    =    size.width;    if(w[2]!=    size.width)    {    w[2]    =    size.width;    }    else    {    w[2]    =    size.width;    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	replace
117	[BUG]  [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(w[3]!=  size.width;  w[2]  ==  size.width;  }  else  {  w[4]  =  size.height;  }  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);      [BUGGY]  w[3]    =    size.width;    w[2]  =  size.width;  if(w[3]!=  size.width;  w[2]  ==  size.width;  }  else  {  w[4]  =  size.height;  }  [BUGGY]      h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]        =        size.width;        w[2]    =    size.width;    if(w[3]!=  size.width;  w[2]  ==  size.width;  }  else  {  w[4]  =  size.height;  }	  	non-compiled	[CE]  ')'  expected	18	None	add
