bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
2	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
3	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
4	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
5	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[4]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[4]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
6	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[4]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[4]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[4]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
8	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
9	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0]	  	non-compiled	[CE]  ';'  expected	50	None	add
10	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
11	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
12	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[0]  =  size.width;  [CE]  cannot  find  symbol  c3  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[0]  =  size.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[0]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[1]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c3	15	None	replace
13	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.width;  [CE]  cannot  find  symbol  c3  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[1]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c3	15	None	replace
14	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	38	1	replace
15	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	38	1	replace
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
17	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
19	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
20	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	          w[2]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
21	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[0]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	          w[2]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth();  w[1]  =  constraint.getHeight();	          w[2]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
23	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth();  w[1]  =  constraint.getHeight();	          w[2]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
24	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
25	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	23	1	replace
26	[BUG]  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  w[2],  null,  LengthConstraintType.FIXED  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  w[2],  null,  LengthConstraintType.FIXED  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  w[2],  null,  LengthConstraintType.FIXED	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FIXED    	non-compiled	[CE]  ')'  expected	55	None	replace
27	[BUG]  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[0],  null,  LengthConstraintType.FIXED  [CE]  ')'  expected  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[0],  null,  LengthConstraintType.FIXED  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[0],  null,  LengthConstraintType.FIXED	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FIXED    	non-compiled	[CE]  ')'  expected	55	None	replace
28	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
29	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
30	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
31	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
32	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
33	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
34	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
35	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
36	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  h[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    h[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
37	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  h[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  h[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    h[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
38	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
39	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
40	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.height;	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    h[1]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	35	None	replace
41	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.height;  }  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  h[1]  =  size.height;  }	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    h[1]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
42	[BUG]  [BUGGY]  w[2]  =  width;  [CE]  cannot  find  symbol  width  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  width;	  w[2]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  width	58	None	replace
43	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
44	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
45	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
46	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
47	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0]	  	non-compiled	[CE]  ';'  expected	43	None	add
48	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
49	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
50	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
51	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
52	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
53	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]    =    constraint.getWidth();    w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
54	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
55	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
56	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
57	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
58	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getHeight()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
59	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getHeight()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
60	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	replace
61	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	replace
62	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
63	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
64	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
65	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
66	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  %  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  %  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
67	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  %  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  %  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  %  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
68	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  [CE]  cannot  find  symbol  c3  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,  c3);	          if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FIXED);    Size2D    size    =    this.leftBlock.arrange(g2,    	non-compiled	[CE]  cannot  find  symbol  c3	64	None	replace
69	[BUG]  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  [CE]  illegal  start  of  expression  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.leftBlock.arrange(g2,	          if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FIXED);    Size2D    size    =    this.leftBlock.arrange(g2,    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
70	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
71	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
72	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0]	  	non-compiled	[CE]  ';'  expected	7	None	add
73	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
74	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
75	[BUG]  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  w[2],  null,  LengthConstraintType.FI  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  w[2],  null,  LengthConstraintType.FI  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  w[2],  null,  LengthConstraintType.FI	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FI    	non-compiled	[CE]  ')'  expected	54	None	replace
76	[BUG]  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[0],  null,  LengthConstraintType.FI  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[0],  null,  LengthConstraintType.FI  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[0],  null,  LengthConstraintType.FI	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FI    	non-compiled	[CE]  ')'  expected	54	None	replace
77	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[3]  =  constraint.getWidth();	          w[2]    =    constraint.getWidth();    if(constraint.getWidth()!=    LengthConstraintType.FIXED)    {    w[2]    =    constraint.getWidth();    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
78	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[3]  =  constraint.getWidth();	          w[2]    =    constraint.getWidth();    if(constraint.getWidth()!=    LengthConstraintType.FIXED)    {    w[2]    =    constraint.getWidth();    }    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	replace
79	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
80	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
81	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
82	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
83	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
84	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
85	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[0]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	replace
86	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[0]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	replace
87	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c5);  [CE]  cannot  find  symbol  c5  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c5);  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c5);	          Size2D    size    =    this.rightBlock.arrange(g2,    c4);    	non-compiled	[CE]  cannot  find  symbol  c5	13	None	replace
88	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]  =  constraint.getHeight();	  w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
89	[BUG]  [BUGGY]  w[1]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  constraint.getHeight();	  w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
90	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth()  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]  =  constraint.getWidth()  -  h[0];	  w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
91	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth()  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth()  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  constraint.getWidth()  -  h[0];	  w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	21	1	replace
92	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
93	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
94	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
95	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
96	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
97	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
98	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	replace
99	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	replace
100	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
101	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
102	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
103	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
104	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
105	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
106	[BUG]  [BUGGY]  w[1]  =  width;  [CE]  cannot  find  symbol  width  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  width;	  w[1]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  width	59	None	replace
107	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
108	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
109	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
110	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
111	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0]  [CE]  ';'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0]  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0]	  	non-compiled	[CE]  ';'  expected	33	None	add
112	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
113	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
114	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
115	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
116	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
117	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
118	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight();    w[2]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
119	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    w[2]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
120	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  w[2]  =  constraint.getHeight();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight();    if(constraint!=  null)  {  w[2]  =  constraint.getHeight();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
121	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  w[2]  =  constraint.getHeight();  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  w[2]  =  constraint.getHeight();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    if(constraint!=  null)  {  w[2]  =  constraint.getHeight();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
122	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  }  w[2]  =  constraint.getHeight();  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  w[2]  =  constraint.getHeight();  }  w[2]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    w[2]  =  constraint.getHeight();  }  w[2]  =  constraint.getHeight();	  	non-compiled	[CE]  ']'  expected	18	None	add
123	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  w[0]);  w[2]  =  size.width;  [CE]  no  suitable  method  found  for  arrange(Graphics2D,double)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  w[0]);  w[2]  =  size.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  w[0]);  w[2]  =  size.width;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    }    	non-compiled	[CE]  no  suitable  method  found  for  arrange(Graphics2D,double)	36	None	replace
124	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
125	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
126	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
127	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
128	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
129	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
130	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	replace
131	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	replace
132	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
133	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
134	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
135	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
136	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
137	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
138	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
139	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
140	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
141	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
142	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
143	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
144	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0]	  	non-compiled	[CE]  ';'  expected	3	None	add
145	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
146	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
147	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
148	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	4	1	replace
149	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	replace
150	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	replace
151	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	replace
152	[BUG]  [BUGGY]  h[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	replace
153	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
154	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
155	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
156	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
157	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
158	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
159	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
160	[BUG]  [BUGGY]  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[3]  =  constraint.getWidth()  -  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
161	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
162	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
163	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0]	  	non-compiled	[CE]  ';'  expected	52	None	add
164	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
165	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
166	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[2]  =  size.width;  [CE]  cannot  find  symbol  c4  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[2]  =  size.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[2]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[2]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c4	2	None	replace
167	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
168	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
169	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
170	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
171	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  h[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    h[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
172	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  h[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  h[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    h[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
173	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	replace
174	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	replace
175	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getHeight()  -  h[1];	  w[2]    =    constraint.getHeight();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
176	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getHeight()  -  h[1];	  w[2]    =    constraint.getHeight();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	19	1	replace
177	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
178	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
179	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
180	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
181	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  w[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  w[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
182	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  w[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  w[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  w[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
183	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
184	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
185	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[0]  =  constraint.getWidth();	          w[2]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
186	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[0]  =  constraint.getWidth();	          w[2]    =    constraint.getWidth();    w[1]    =    constraint.getWidth();    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
187	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
188	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
189	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0].;  [CE]  <identifier>  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0].;  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  /  h[0].;	  	non-compiled	[CE]  <identifier>  expected	16	None	add
190	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CE]  cannot  find  symbol  c2  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  size.width;	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c2	36	None	replace
191	[BUG]  [BUGGY]  w[1]  =  this.rightBlock.width;  [CE]  cannot  find  symbol  width  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  this.rightBlock.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  this.rightBlock.width;	  w[1]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  width	59	None	replace
192	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getHeight()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
193	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getHeight()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    w[2]  =  constraint.getHeight()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
194	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	replace
195	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	replace
196	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
197	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
198	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
199	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
200	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
201	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
202	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
203	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
204	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  h[1]  =  size.height;  [CE]  cannot  find  symbol  c2  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c2);  h[1]  =  size.height;	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    h[1]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c2	35	None	replace
205	[BUG]  [BUGGY]  w[2]  =  constraint.width;  [CE]  width  has  private  access  in  RectangleConstraint  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.width;  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.width;	  w[2]    =    size.width;    	non-compiled	[CE]  width  has  private  access  in  RectangleConstraint	58	None	replace
206	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
207	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  /  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
208	[BUG]  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FI    	non-compiled	[CE]  ')'  expected	54	None	replace
209	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
210	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
211	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  [CE]  ';'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1]	  	non-compiled	[CE]  ';'  expected	37	None	add
212	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
213	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[0]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
214	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0]  [CE]  ';'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0]  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0]	  	non-compiled	[CE]  ';'  expected	41	None	add
215	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
216	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
217	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
218	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	add
219	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	replace
220	[BUG]  [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	53	1	replace
221	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
222	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
223	[BUG]  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FIXED    	non-compiled	[CE]  ')'  expected	55	None	replace
224	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
225	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
226	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
227	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
228	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
229	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
230	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[3]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[3]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
231	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[3]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[3]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[3]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
232	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
233	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[3]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
234	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
235	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[3]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[3]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[3]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[3]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
236	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  constraint.getHeight();  }  [CE]  cannot  find  symbol  c2  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  constraint.getHeight();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    if(constraint!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c2);  w[2]  =  constraint.getHeight();  }	  	non-compiled	[CE]  cannot  find  symbol  c2	18	None	add
237	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  constraint.getHeight();  }  [CE]  cannot  find  symbol  c2  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  if(constraint!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  constraint.getHeight();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    if(constraint!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  constraint.getHeight();  }	  	non-compiled	[CE]  cannot  find  symbol  c2	18	None	add
238	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
239	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
240	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
241	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
242	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
243	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
244	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
245	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
246	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[3]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[3]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
247	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[3]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[3]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[3]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
248	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
249	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
250	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  }  [CE]  cannot  find  symbol  c1  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[2]  =  size.width;  }	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[2]    =    size.width;    }    	non-compiled	[CE]  cannot  find  symbol  c1	36	None	replace
251	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  /  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  /  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	replace
252	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  /  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  /  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  /  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    +    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	49	1	replace
253	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  if(this.leftBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	if(this.leftBlock!=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(0.0,  constraint.getWidth(),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FI	  if(this.rightBlock!=    null)    {    RectangleConstraint    c1    =    new    RectangleConstraint(0.0,    constraint.getWidth(),    LengthConstraintType.RANGE,    h[2],    null,    LengthConstraintType.FI    	non-compiled	[CE]  ')'  expected	54	None	replace
254	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[0]  =  size.width;  }  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[0]  =  size.width;  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[0]  =  size.width;  }	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[1]    =    size.width;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
255	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  h[2]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight();    h[2]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
256	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  h[2]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  h[2]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    h[2]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
257	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  w[1]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight();    w[1]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
258	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight();  w[1]  =  constraint.getHeight();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight();  w[1]  =  constraint.getHeight();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight();    w[1]  =  constraint.getHeight();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
259	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
260	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	29	1	add
261	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
262	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	add
263	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
264	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	7	1	add
265	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[1]  =  constraint.getWidth()  -  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	replace
266	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[1]  =  constraint.getWidth()  -  h[1]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	replace
267	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
268	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	replace
269	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	replace
270	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	47	1	replace
271	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
272	[BUG]  [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	add
273	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
274	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    +    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  +  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
275	[BUG]  [BUGGY]  h[1]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[1]  =  size.height;  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[1]  =  size.height;	          if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c2);    h[1]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	35	None	replace
276	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
277	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
278	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
279	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  h[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[0]    -    h[0];    h[1]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
280	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
281	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[0]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[1];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
282	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
283	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];	  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]    =    constraint.getHeight()    -    h[1]    -    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	replace
284	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
285	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        w[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  /  h[0];  w[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
286	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
287	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[1]    =    constraint.getWidth();    if(this.rightBlock!=  null)  {  w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
288	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
289	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  +  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
290	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
291	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[0]    -    h[1];    w[2]  =  constraint.getWidth()  -  h[0]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[0]  -  h[1];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
292	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
293	[BUG]  [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getHeight()        -        h[1]        /        h[0];        h[2]    =    constraint.getHeight()    -    h[1]    /    h[0];    h[2]  =  constraint.getHeight()  -  h[0]  /  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  /  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
294	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  *  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	w[2]  =  constraint.getWidth()  -  h[1]  *  h[0];	  w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	replace
295	[BUG]  [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  *  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  w[2]  =  constraint.getWidth()  -  h[1]  *  h[0];  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	w[2]  =  constraint.getWidth()  -  h[1]  *  h[0];	  w[2]    =    constraint.getWidth()    -    h[1]    /    h[0];    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	57	1	replace
296	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
297	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        w[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  w[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
298	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
299	[BUG]  [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]  h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]      if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]        =        constraint.getWidth()        -        h[1]        -        h[0];        h[2]    =    constraint.getWidth()    -    h[1]    -    h[0];    h[2]  =  constraint.getWidth()  -  h[0]  -  h[1];  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
300	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
301	[BUG]  [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }      [BUGGY]          w[2]    =    constraint.getWidth();    w[2]  =  constraint.getWidth();  w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();  [BUGGY]      h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	                w[2]        =        constraint.getWidth();        w[2]    =    constraint.getWidth();    w[1]  =  constraint.getWidth();  w[2]  =  constraint.getWidth();	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	9	1	add
