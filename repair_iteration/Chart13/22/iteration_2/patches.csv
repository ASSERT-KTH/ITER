bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]  =  Math.max(h[2],  h[3]  -  width);	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]    =    Math.max(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	31	1	replace
2	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.max(h[2],  h[3]  -  width);	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]    =    Math.max(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	31	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[1]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    h[1]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	29	1	replace
4	[BUG]  [BUGGY]  h[1]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[1]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    h[1]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	29	1	replace
5	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	53	None	replace
6	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[2]  =  Math.max(h[2],  h[3]  /  width);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
7	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[2]  =  Math.max(h[2],  h[3]  /  width);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[3]  =  Math.max(h[2],  h[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[3]  =  Math.max(h[2],  h[3]  /  width);	  	compilable	  [FE]  AssertionFailedError  	20	1	add
9	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[3]  =  Math.max(h[2],  h[3]  /  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[3]  =  Math.max(h[2],  h[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[3]  =  Math.max(h[2],  h[3]  /  width);	  	compilable	  [FE]  AssertionFailedError  	20	1	add
10	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  width;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[2]  =  Math.max(h[2],  h[3]  /  width;	  	non-compiled	[CE]  ')'  expected	20	None	add
11	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[4]    =    size.width;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	52	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	w[2]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    w[2]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
13	[BUG]  [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    w[2]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	w[3]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    w[2]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
15	[BUG]  [BUGGY]  w[3]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[3]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    w[2]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	68	1	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	w[2]  =  Math.max(h[2],  w[3]);	  h[2]    =    Math.max(h[2],    w[3]);    w[2]    =    Math.max(h[2],    w[3]);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
17	[BUG]  [BUGGY]  w[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  Math.max(h[2],  w[3]);	  h[2]    =    Math.max(h[2],    w[3]);    w[2]    =    Math.max(h[2],    w[3]);    	compilable	  [FE]  AssertionFailedError  	59	1	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
19	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.min(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(h[2],    h[3]    -    width);    h[3]  =  Math.min(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
21	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.min(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.min(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    width);    h[3]  =  Math.min(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	65	1	add
22	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width;	  	non-compiled	[CE]  ')'  expected	65	None	add
23	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[4]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c4	6	None	replace
24	[BUG]  [BUGGY]  h[2]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  size.width;  h[4]  =  size.height;	  w[2]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	78	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
26	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
28	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
30	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
31	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]    =    Math.max(h[2],    h[4]);    h[4]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	add
32	[BUG]  [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.max(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]    =    Math.max(h[2],    h[4]);    h[4]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	add
33	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]    =    Math.max(h[2],    h[4]);    h[4]  =  Math.min(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	add
34	[BUG]  [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.min(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]    =    Math.max(h[2],    h[4]);    h[4]  =  Math.min(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	add
35	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]    =    Math.max(h[2],    h[4]);    h[2]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	add
36	[BUG]  [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]    =    Math.max(h[2],    h[4]);    h[2]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	add
37	[BUG]  [BUGGY]  h[3]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  size.width;  h[4]  =  size.height;	  w[3]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	79	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
39	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
41	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
42	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width;	  	non-compiled	[CE]  ')'  expected	34	None	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]  =  Math.max(h[2],  w[4]);	  h[3]    =    Math.max(h[2],    w[3]);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
44	[BUG]  [BUGGY]  h[4]  =  Math.max(h[2],  w[4]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]  =  Math.max(h[2],  w[4]);	  h[3]    =    Math.max(h[2],    w[3]);    	compilable	  [FE]  AssertionFailedError  	19	1	replace
45	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
46	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	12	1	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
48	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
50	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
51	[BUG]  [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  w[2]  =  this.bottomBlock.arrange(g2,  c1);	  Size2D    w[2]    =    this.bottomBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	76	None	replace
52	[BUG]  [BUGGY]  h[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  size.width;  h[3]  =  size.height;	  w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	87	None	replace
53	[BUG]  [BUGGY]  Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  w[2]  =  this.rightBlock.arrange(g2,  c1);	  Size2D    w[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	75	None	replace
54	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
55	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	8	1	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
57	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
59	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
61	[BUG]  [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(w[2],    h[3]);    h[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
63	[BUG]  [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(w[2],    h[3]);    h[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
65	[BUG]  [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
66	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c3	5	None	replace
67	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c3	5	None	replace
68	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(w[2],  maxW);	  h[2]    =    Math.min(w[2],    h[3]);    	non-compiled	[CE]  cannot  find  symbol  maxW	39	None	replace
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]  =  Math.min(w[2],  h[3]);	  h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
70	[BUG]  [BUGGY]  h[3]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.min(w[2],  h[3]);	  h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[1]  =  Math.max(h[2],  h[3]  -  width);	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]    =    Math.max(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	35	1	replace
72	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[1]  =  Math.max(h[2],  h[3]  -  width);	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]    =    Math.max(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	35	1	replace
73	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	69	None	replace
74	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	69	None	replace
75	[BUG]  [BUGGY]  w[2]  =  this.rightBlock.arrange(g2,  c2);  [CE]  incompatible  types  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.rightBlock.arrange(g2,  c2);  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.rightBlock.arrange(g2,  c2);	  w[2]    =    this.rightBlock.arrange(g2,    c1);    	non-compiled	[CE]  incompatible  types	1	None	replace
76	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.max(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[2]  =  Math.max(h[2],  w[3]  -  width);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
77	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.max(h[2],  w[3]  -  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.max(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[2]  =  Math.max(h[2],  w[3]  -  width);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[3]  =  Math.max(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[3]  =  Math.max(h[2],  w[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
79	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[3]  =  Math.max(h[2],  w[3]  -  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[3]  =  Math.max(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[3]  =  Math.max(h[2],  w[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.min(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[2]  =  Math.min(h[2],  w[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
81	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.min(h[2],  w[3]  -  width);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.min(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[2]  =  Math.min(h[2],  w[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	22	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  AssertionFailedError  	55	1	add
83	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  AssertionFailedError  	55	1	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.min(h[2],  h[4]);	  	compilable	  [FE]  AssertionFailedError  	55	1	add
85	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.min(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.min(h[2],  h[4]);	  	compilable	  [FE]  AssertionFailedError  	55	1	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(h[2],    h[4]);    h[2]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  AssertionFailedError  	55	1	add
87	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[2]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  AssertionFailedError  	55	1	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
89	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
91	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
92	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3);	  	non-compiled	[CE]  ']'  expected	28	None	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[2]  =  Math.min(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(h[2],    h[3]    -    1);    h[2]  =  Math.min(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
94	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[2]  =  Math.min(h[2],  h[3]  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[2]  =  Math.min(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    1);    h[2]  =  Math.min(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[3]  =  Math.min(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(h[2],    h[3]    -    1);    h[3]  =  Math.min(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
96	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[3]  =  Math.min(h[2],  h[3]  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[3]  =  Math.min(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    1);    h[3]  =  Math.min(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  w[2]  =  Math.min(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(h[2],    h[3]    -    1);    w[2]  =  Math.min(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
98	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  w[2]  =  Math.min(h[2],  h[3]  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  w[2]  =  Math.min(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    1);    w[2]  =  Math.min(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
99	[BUG]  [BUGGY]  w[2]  =  this.bottomBlock.arrange(g2,  c1);  [CE]  incompatible  types  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.bottomBlock.arrange(g2,  c1);  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.bottomBlock.arrange(g2,  c1);	  w[2]    =    this.bottomBlock.arrange(g2,    c3);    	non-compiled	[CE]  incompatible  types	60	None	replace
100	[BUG]  [BUGGY]  h[2]  =  Math.max(w[2],  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(w[2],  maxW);	  h[2]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  cannot  find  symbol  maxW	17	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]  =  Math.min(h[2],  h[4]);	  h[3]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
102	[BUG]  [BUGGY]  h[4]  =  Math.min(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]  =  Math.min(h[2],  h[4]);	  h[3]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.min(w[2],  h[3]  -  width);	  h[2]    =    Math.min(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
104	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(w[2],  h[3]  -  width);	  h[2]    =    Math.min(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.min(h[2],  w[3]  -  width);	  h[2]    =    Math.min(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
106	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  w[3]  -  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  w[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(h[2],  w[3]  -  width);	  h[2]    =    Math.min(h[2],    h[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	66	1	replace
107	[BUG]  [BUGGY]  RectangleConstraint  h[2]  =  this.rightBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  RectangleConstraint  h[2]  =  this.rightBlock.arrange(g2,  c1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	RectangleConstraint  h[2]  =  this.rightBlock.arrange(g2,  c1);	          RectangleConstraint    h[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	72	None	replace
108	[BUG]  [BUGGY]  RectangleConstraint  h[2]  =  this.bottomBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  RectangleConstraint  h[2]  =  this.bottomBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	RectangleConstraint  h[2]  =  this.bottomBlock.arrange(g2,  c3);	          RectangleConstraint    h[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	72	None	replace
109	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
110	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	46	1	add
112	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	46	1	add
113	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
114	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
116	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
118	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
119	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
120	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
121	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  -  width;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  h[3]  -  width;	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]    =    Math.max(h[2],    h[3]    -    width;    	non-compiled	[CE]  ')'  expected	63	None	replace
122	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  -  width;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.max(h[2],  h[3]  -  width;	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]    =    Math.max(h[2],    h[3]    -    width;    	non-compiled	[CE]  ')'  expected	63	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
124	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
126	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
128	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
129	[BUG]  [BUGGY]  h[2]  =  this.bottomBlock.arrange(g2,  c1);  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  this.bottomBlock.arrange(g2,  c1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  this.bottomBlock.arrange(g2,  c1);	          h[2]    =    this.bottomBlock.arrange(g2,    c3);    	non-compiled	[CE]  incompatible  types	77	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
131	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
133	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
135	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
137	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
139	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
141	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	26	1	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[1]  =  Math.max(h[2],  w[3]);	  h[2]    =    Math.max(h[2],    w[3]);    h[1]    =    Math.max(h[2],    w[3]);    	compilable	  [FE]  AssertionFailedError  	74	1	replace
143	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[1]  =  Math.max(h[2],  w[3]);	  h[2]    =    Math.max(h[2],    w[3]);    h[1]    =    Math.max(h[2],    w[3]);    	compilable	  [FE]  AssertionFailedError  	74	1	replace
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]  =  Math.max(w[2],  h[4]);	  h[3]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	56	1	replace
145	[BUG]  [BUGGY]  h[3]  =  Math.max(w[2],  h[4]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.max(w[2],  h[4]);	  h[3]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	56	1	replace
146	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c3	36	None	replace
147	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c4	36	None	replace
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
149	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.min(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.min(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
151	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.min(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.min(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.min(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
153	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	18	1	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.min(w[2],  h[3]  -  1);	  h[2]    =    Math.min(h[2],    h[3]    -    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
155	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(w[2],  h[3]  -  1);	  h[2]    =    Math.min(h[2],    h[3]    -    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
156	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c4	4	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  width;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	if(this.rightBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  width;  }	  if(this.rightBlock!=    null)    {    double    height    =    Math.max(w[2],    h[3]);    h[3]    =    size.height;    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
158	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  width;  }  [FE]  AssertionFailedError  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  width;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.rightBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  width;  }	  if(this.rightBlock!=    null)    {    double    height    =    Math.max(w[2],    h[3]);    h[3]    =    size.height;    }    	compilable	  [FE]  AssertionFailedError  	84	1	replace
159	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
160	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	30	1	add
162	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	30	1	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	30	1	add
164	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	30	1	add
165	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
166	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	50	1	add
168	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	50	1	add
169	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
170	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
171	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
172	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
173	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
174	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
175	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
176	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	48	1	add
177	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	70	None	replace
178	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	70	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.max(w[2],  h[3]  -  width);	  h[2]    =    Math.max(h[2],    w[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
180	[BUG]  [BUGGY]  h[2]  =  Math.max(w[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(w[2],  h[3]  -  width);	  h[2]    =    Math.max(h[2],    w[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.max(h[2],  w[3]  /  width);	  h[2]    =    Math.max(h[2],    w[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
182	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  /  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  w[3]  /  width);	  h[2]    =    Math.max(h[2],    w[3]    -    width);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
183	[BUG]  [BUGGY]  Size2D  h[2]  =  this.bottomBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  h[2]  =  this.bottomBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  h[2]  =  this.bottomBlock.arrange(g2,  c3);	  Size2D    h[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	64	None	replace
184	[BUG]  [BUGGY]  Size2D  h[2]  =  this.rightBlock.arrange(g2,  c1);  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  h[2]  =  this.rightBlock.arrange(g2,  c1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  h[2]  =  this.rightBlock.arrange(g2,  c1);	  Size2D    h[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	64	None	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
186	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(w[2],    h[3]);    h[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
188	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[3]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(w[2],    h[3]);    h[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
190	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
191	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[4]  =  size.height;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c3	71	None	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(w[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]  =  Math.max(w[2],  h[4]);	  h[4]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
193	[BUG]  [BUGGY]  h[4]  =  Math.max(w[2],  h[4]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(w[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]  =  Math.max(w[2],  h[4]);	  h[4]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
194	[BUG]  [BUGGY]  h[3]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  size.height;	  w[2]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	82	None	replace
195	[BUG]  [BUGGY]  w[2]  =  this.topBlock.arrange(g2,  c1);  [CE]  incompatible  types  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.topBlock.arrange(g2,  c1);  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.topBlock.arrange(g2,  c1);	  w[2]    =    this.topBlock.arrange(g2,    c3);    	non-compiled	[CE]  incompatible  types	61	None	replace
196	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.max(h[2],  width);	  h[2]    =    Math.max(h[2],    maxW);    	compilable	  [FE]  AssertionFailedError  	57	1	replace
197	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  width);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  width);	  h[2]    =    Math.max(h[2],    maxW);    	compilable	  [FE]  AssertionFailedError  	57	1	replace
198	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  height);  [CE]  cannot  find  symbol  height  [FE]          AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  height);	  h[2]    =    Math.max(h[2],    maxW);    	non-compiled	[CE]  cannot  find  symbol  height	57	None	replace
199	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
200	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	58	1	add
202	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.min(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.min(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	58	1	add
203	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	58	1	add
204	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	58	1	add
205	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c1);	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	62	None	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	32	1	add
207	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	32	1	add
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	32	1	add
209	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	32	1	add
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	32	1	add
211	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	32	1	add
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
213	[BUG]  [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
215	[BUG]  [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.min(h[2],    h[3]);    h[4]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
217	[BUG]  [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.min(h[2],    h[3]);    h[4]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    h[3]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
219	[BUG]  [BUGGY]  h[4]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]  =  Math.min(h[2],  h[3]);	  h[2]    =    Math.min(h[2],    h[3]);    h[3]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	27	1	replace
220	[BUG]  [BUGGY]  h[3]  =  Math.max(w[2],  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.max(w[2],  maxW);	  h[3]    =    Math.max(w[2],    h[3]);    	non-compiled	[CE]  cannot  find  symbol  maxW	43	None	replace
221	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(w[2],    h[3]);    h[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
222	[BUG]  [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(w[2],    h[3]);    h[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	add
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(w[2],    h[3]);    h[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
224	[BUG]  [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(w[2],    h[3]);    h[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
226	[BUG]  [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	42	1	add
227	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  -  maxW);  [CE]  cannot  find  symbol  maxW  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  -  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  h[3]  -  maxW);	  h[2]    =    Math.max(h[2],    h[3]    -    height);    	non-compiled	[CE]  cannot  find  symbol  maxW	86	None	replace
228	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c3	37	None	replace
229	[BUG]  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.centerBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c4	37	None	replace
230	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[3]  =  Math.max(h[2],  h[3]  -  width;	  	non-compiled	[CE]  ')'  expected	32	None	add
231	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
232	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
233	[BUG]  [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  size.width;  h[2]  =  size.height;	  w[3]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	79	None	replace
234	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  double  height  =  Math.max(w[2],  width);  h[3]  =  size.height;  }  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  double  height  =  Math.max(w[2],  width);  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.bottomBlock!=  null)  {  double  height  =  Math.max(w[2],  width);  h[3]  =  size.height;  }	  if(this.rightBlock!=    null)    {    double    height    =    Math.max(w[2],    width);    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	2	None	replace
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
236	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
237	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(h[2],  h[3]);  h[3]  =  size.height;  }  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(h[2],  h[3]);  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.rightBlock!=  null)  {  double  height  =  Math.max(h[2],  h[3]);  h[3]  =  size.height;  }	  if(this.rightBlock!=    null)    {    double    height    =    Math.max(w[2],    h[3]);    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	84	None	replace
238	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  size.height;  }  [CE]  cannot  find  symbol  size  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.bottomBlock!=  null)  {  double  height  =  Math.max(w[2],  h[3]);  h[3]  =  size.height;  }	  if(this.rightBlock!=    null)    {    double    height    =    Math.max(w[2],    h[3]);    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	84	None	replace
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  }	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
240	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  }  [FE]  AssertionFailedError  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  }	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	compilable	  [FE]  AssertionFailedError  	70	1	replace
241	[BUG]  [BUGGY]  w[2]  =  width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  width;  h[3]  =  size.height;	  w[2]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	82	None	replace
242	[BUG]  [BUGGY]  RectangleConstraint  h[2]  =  this.topBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  RectangleConstraint  h[2]  =  this.topBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	RectangleConstraint  h[2]  =  this.topBlock.arrange(g2,  c3);	          RectangleConstraint    h[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	72	None	replace
243	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  [CE]  cannot  find  symbol  c4  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c4);	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    	non-compiled	[CE]  cannot  find  symbol  c4	62	None	replace
244	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  height);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  h[3]  /  height);	  h[2]    =    Math.max(h[2],    h[3]    /    width);    	non-compiled	[CE]  cannot  find  symbol  height	21	None	replace
245	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3);	  	non-compiled	[CE]  ']'  expected	67	None	add
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[4]  =  Math.max(h[2],  h[3]);	  h[4]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
247	[BUG]  [BUGGY]  h[4]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[4]  =  Math.max(h[2],  h[3]);	  h[4]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	45	1	replace
248	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.max(h[2],  w[3]  -  width;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  width);  h[2]  =  Math.max(h[2],  w[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    w[3]    -    width);    h[2]  =  Math.max(h[2],  w[3]  -  width;	  	non-compiled	[CE]  ')'  expected	22	None	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
250	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
251	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width;  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  width;	  	non-compiled	[CE]  ')'  expected	30	None	add
252	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(h[2],  h[3]  -  maxW);	  h[2]    =    Math.min(h[2],    h[3]    -    width);    	non-compiled	[CE]  cannot  find  symbol  maxW	66	None	replace
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]  =  Math.min(h[2],  h[4]);	  h[3]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
254	[BUG]  [BUGGY]  h[3]  =  Math.min(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.min(h[2],  h[4]);	  h[3]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	41	1	replace
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  2);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]  =  Math.min(h[2],  h[3]  -  2);	  h[2]    =    Math.min(h[2],    h[3]    -    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
256	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  2);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(h[2],  h[3]  -  2);	  h[2]    =    Math.min(h[2],    h[3]    -    1);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	compilable	  [FE]  AssertionFailedError  	69	1	replace
258	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }  [FE]  AssertionFailedError  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	compilable	  [FE]  AssertionFailedError  	69	1	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	if(this.rightBlock!=  null)  {  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  }	  h[2]    =    Math.min(h[2],    h[3]);    h[2]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
260	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.rightBlock!=  null)  {  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  }	  h[2]    =    Math.min(h[2],    h[3]);    h[2]    =    Math.min(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
261	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  height);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.max(h[2],  h[3]  /  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[2]  =  Math.max(h[2],  h[3]  /  height);	  	non-compiled	[CE]  cannot  find  symbol  height	20	None	add
262	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  w[3]  -  maxW);	  h[2]    =    Math.max(h[2],    w[3]    -    width);    	non-compiled	[CE]  cannot  find  symbol  maxW	23	None	replace
263	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  }  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  }	  if(this.rightBlock!=    null)    {    Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[4]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	83	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
265	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
266	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  [CE]  cannot  find  symbol  c4  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  c4	53	None	replace
267	[BUG]  [BUGGY]  Size2D  w[2]  =  this.topBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  w[2]  =  this.topBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  w[2]  =  this.topBlock.arrange(g2,  c3);	  Size2D    w[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	75	None	replace
268	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  int  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  int  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    int  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);	  	non-compiled	[CE]  ']'  expected	26	None	add
269	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[3]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3);	  	non-compiled	[CE]  ']'  expected	26	None	add
270	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  maxW);  [CE]  cannot  find  symbol  maxW  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.max(h[2],  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]  =  Math.max(h[2],  maxW);	  h[3]    =    Math.max(h[2],    w[3]);    	non-compiled	[CE]  cannot  find  symbol  maxW	19	None	replace
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
272	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
273	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  height);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  width);  h[2]  =  Math.min(h[2],  h[3]  -  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    width);    h[2]  =  Math.min(h[2],  h[3]  -  height);	  	non-compiled	[CE]  cannot  find  symbol  height	65	None	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
275	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[4]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[4]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[4]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	12	1	add
276	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c4	71	None	replace
277	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  int  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  int  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    int  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	non-compiled	[CE]  ']'  expected	24	None	add
278	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3);  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3);	  	non-compiled	[CE]  ']'  expected	24	None	add
279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
280	[BUG]  [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]    =    Math.min(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	40	1	add
281	[BUG]  [BUGGY]  Size2D  h[2]  =  this.topBlock.arrange(g2,  c3);  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  h[2]  =  this.topBlock.arrange(g2,  c3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  h[2]  =  this.topBlock.arrange(g2,  c3);	  Size2D    h[2]    =    this.rightBlock.arrange(g2,    c3);    	non-compiled	[CE]  ']'  expected	64	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[0]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[0]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
283	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[0]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[0]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[0]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
285	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[3]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(w[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[3]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(w[2],  w[3]);  h[3]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	10	1	add
286	[BUG]  [BUGGY]  w[2]  =  this.bottomBlock.arrange(g2,  c3);  h[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.bottomBlock.arrange(g2,  c3);  h[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.bottomBlock.arrange(g2,  c3);  h[3]  =  size.width;  h[3]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	70	None	replace
287	[BUG]  [BUGGY]  w[3]  =  size.width;  [CE]  cannot  find  symbol  size  [FE]                  java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[3]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  size	15	None	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
289	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	24	1	add
290	[BUG]  [BUGGY]  w[4]  =  size.width;  [CE]  cannot  find  symbol  size  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[4]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[4]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    	non-compiled	[CE]  cannot  find  symbol  size	14	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
292	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	67	1	add
293	[BUG]  [BUGGY]  w[2]  =  this.centerBlock.arrange(g2,  c1);  h[3]  =  size.width;  [CE]  incompatible  types  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.centerBlock.arrange(g2,  c1);  h[3]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.centerBlock.arrange(g2,  c1);  h[3]  =  size.width;	  Size2D    size    =    this.centerBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  incompatible  types	37	None	replace
294	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  height);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.min(h[2],  h[3]  -  height);	  h[2]    =    Math.min(h[2],    h[3]    -    width);    	non-compiled	[CE]  cannot  find  symbol  height	66	None	replace
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
296	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[1]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	73	1	add
297	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(h[2],  width);  h[3]  =  size.height;  }  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  if(this.rightBlock!=  null)  {  double  height  =  Math.max(h[2],  width);  h[3]  =  size.height;  }  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.rightBlock!=  null)  {  double  height  =  Math.max(h[2],  width);  h[3]  =  size.height;  }	  if(this.rightBlock!=    null)    {    double    height    =    Math.max(w[2],    width);    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  size	2	None	replace
298	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
299	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	46	1	add
300	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  height);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[3]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  height);  h[3]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[3]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  height);  h[3]  =  Math.max(h[2],  h[3]  -  width);	  	non-compiled	[CE]  cannot  find  symbol  height	32	None	add
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.min(h[2],  h[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[2]  =  Math.min(h[2],  h[3]  /  width);	  	compilable	  [FE]  AssertionFailedError  	20	1	add
302	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.min(h[2],  h[3]  /  width);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  /  width);  h[2]  =  Math.min(h[2],  h[3]  /  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.max(h[2],    h[3]    /    width);    h[2]  =  Math.min(h[2],  h[3]  /  width);	  	compilable	  [FE]  AssertionFailedError  	20	1	add
303	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  height);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  height);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  height);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	non-compiled	[CE]  cannot  find  symbol  height	34	None	add
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
305	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[1]    =    Math.max(h[2],    h[3]    -    width);    h[1]  =  Math.max(h[2],  h[3]  -  width);  h[1]  =  Math.max(h[2],  h[3]  -  width);	  	compilable	  [FE]  AssertionFailedError  	34	1	add
306	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  height);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  w[3]  -  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  w[3]  -  height);	  h[2]    =    Math.max(h[2],    w[3]    -    width);    	non-compiled	[CE]  cannot  find  symbol  height	23	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[0]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	47	1	replace
308	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[0]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	47	1	replace
309	[BUG]  [BUGGY]  w[3]  =  size.width;  h[3]  =  this.rightBlock.arrange(g2,  c3);  [CE]  cannot  find  symbol  size  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[3]  =  size.width;  h[3]  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[3]  =  size.width;  h[3]  =  this.rightBlock.arrange(g2,  c3);	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	4	None	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[2]  =  Math.max(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]    =    Math.min(h[2],    h[3]    -    1);    h[2]  =  Math.max(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
311	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[2]  =  Math.max(h[2],  h[3]  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]  -  1);  h[2]  =  Math.max(h[2],  h[3]  -  1);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]    =    Math.min(h[2],    h[3]    -    1);    h[2]  =  Math.max(h[2],  h[3]  -  1);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
312	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  -  height;  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]  =  Math.max(h[2],  h[3]  -  height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]  =  Math.max(h[2],  h[3]  -  height;	  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]    =    Math.max(h[2],    h[3]    -    width;    	non-compiled	[CE]  ')'  expected	63	None	replace
313	[BUG]  [BUGGY]  w[2]  =  this.rightBlock.arrange(g2,  c1);  h[4]  =  size.width;  h[3]  =  size.height;  [CE]  incompatible  types  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.rightBlock.arrange(g2,  c1);  h[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.rightBlock.arrange(g2,  c1);  h[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  incompatible  types	5	None	replace
314	[BUG]  [BUGGY]  w[2]  =  this.rightBlock.arrange(g2,  c1);  h[3]  =  size.width;  [CE]  incompatible  types  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.rightBlock.arrange(g2,  c1);  h[3]  =  size.width;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.rightBlock.arrange(g2,  c1);  h[3]  =  size.width;	  Size2D    size    =    this.rightBlock.arrange(g2,    c1);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  incompatible  types	5	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
316	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    h[2]  =  Math.max(h[2],  w[3]);  h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        h[2]    =    Math.max(h[2],    w[3]);    h[1]  =  Math.max(h[2],  w[3]);  h[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  AssertionFailedError  	8	1	add
317	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
318	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        w[3]);        w[2]    =    Math.max(h[2],    w[3]);    w[2]  =  Math.max(h[2],  w[3]);  w[2]  =  Math.max(h[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
319	[BUG]  [BUGGY]  w[2]  =  this.bottomBlock.arrange(g2,  c3);  h[3]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  w[2]  =  this.bottomBlock.arrange(g2,  c3);  h[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	w[2]  =  this.bottomBlock.arrange(g2,  c3);  h[3]  =  size.width;  h[4]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	69	None	replace
320	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  c3	71	None	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
322	[BUG]  [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.min(h[2],    h[3]);    h[1]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.min(h[2],        h[3]);        h[1]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	28	1	add
323	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  height);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [CE]  cannot  find  symbol  height  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  width);  h[2]  =  Math.max(h[2],  h[3]  -  height);  h[2]  =  Math.max(h[2],  h[3]  -  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	h[2]        =        Math.max(h[2],        h[3]        -        width);        h[2]    =    Math.max(h[2],    h[3]    -    width);    h[2]  =  Math.max(h[2],  h[3]  -  height);  h[2]  =  Math.max(h[2],  h[3]  -  width);	  	non-compiled	[CE]  cannot  find  symbol  height	30	None	add
