bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	else  if(h  ==  LengthConstraintType.RANGE)  {	  else    if(w    ==    LengthConstraintType.FIXED)    {    else    if(h    ==    LengthConstraintType.FIXED)    {    	compilable	  [FE]  NullPointerException  	4	1	replace
2	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  [FE]  NullPointerException  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]  else  if(h  ==  LengthConstraintType.RANGE)  {  [BUGGY]      contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(h  ==  LengthConstraintType.RANGE)  {	  else    if(w    ==    LengthConstraintType.FIXED)    {    else    if(h    ==    LengthConstraintType.FIXED)    {    	compilable	  [FE]  NullPointerException  	4	1	replace
3	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	23	None	add
4	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	23	None	add
5	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	23	None	add
6	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	14	None	add
7	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	14	None	add
8	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	14	None	add
9	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [CE]  illegal  start  of  type  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getWidth());    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	9	None	add
11	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	9	None	add
12	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	9	None	add
13	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	16	None	add
14	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	16	None	add
15	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	16	1	add
16	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	16	1	add
17	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	11	None	add
18	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	11	None	add
19	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	11	1	add
20	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	11	1	add
21	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	add
22	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	add
23	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	add
24	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
25	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	11	None	add
26	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	11	None	add
27	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	16	None	add
28	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	7	1	add
29	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	7	1	add
30	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  [CE]  illegal  start  of  expression  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
31	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getHeight());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	9	None	add
32	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	add
33	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	7	1	add
34	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	7	1	add
35	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;	7	None	add
36	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	9	None	add
37	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	9	None	add
38	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	9	1	add
39	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	9	1	add
40	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	16	1	add
41	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	16	1	add
42	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;	16	None	add
43	[BUG]  [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [CE]  illegal  start  of  type  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFF(container,    g2,    constraint.getHeight());    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
44	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	14	None	add
45	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	14	None	add
46	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	14	1	add
47	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	14	1	add
48	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	23	None	add
49	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	23	1	add
50	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	23	1	add
51	[BUG]  [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(h        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(w    ==    LengthConstraintType.FIXED)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFF(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFF  in  class  BorderArrangement  cannot  be  applied  to  given  types;	23	None	add
52	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	11	1	add
53	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [FE]  StackOverflowError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }	  	compilable	  [FE]  StackOverflowError  	11	1	add
54	[BUG]  [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      throw  new  RuntimeException(     "Not  implemented.     ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }      [BUGGY]          else    if(w    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getHeight());  }  else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }  [BUGGY]      else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException(     "Not  implemented.     ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	                else        if(w        ==        LengthConstraintType.RANGE)        {        contentSize        =        arrangeFN(container,        g2,        constraint.getHeight());        }        else    if(h    ==    LengthConstraintType.RANGE)    {    contentSize    =    arrangeFN(container,    g2,    constraint.getHeight());    }    else  if(w  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFR(container,  g2,  constraint.getWidth());  }	  	non-compiled	[CE]  method  arrangeFR  in  class  BorderArrangement  cannot  be  applied  to  given  types;	11	None	add
