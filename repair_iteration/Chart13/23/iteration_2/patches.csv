bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[0]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]  =  h[0]  +  Math.max(h[1],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	replace
2	[BUG]  [BUGGY]  h[3]  =  h[0]  +  Math.max(h[1],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[0]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  h[0]  +  Math.max(h[1],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	76	1	replace
3	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c4);    w[3]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	78	None	replace
4	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	replace
5	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	31	1	replace
6	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  w[3]  +  maxW);  [CE]  cannot  find  symbol  maxW  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  w[3]  +  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  w[3]  +  maxW);	  w[2]    =    Math.min(w[2],    w[3]    +    height);    	non-compiled	[CE]  cannot  find  symbol  maxW	86	None	replace
7	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  w[3]  +  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.min(w[2],  w[3]  +  width);	  w[2]    =    Math.min(w[2],    w[3]    +    height);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	replace
8	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  w[3]  +  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  w[3]  +  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  w[3]  +  width);	  w[2]    =    Math.min(w[2],    w[3]    +    height);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	86	1	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
10	[BUG]  [BUGGY]  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	8	1	replace
11	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	47	None	replace
12	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[3]  =  Math.min(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]    =    Math.min(w[2],    w[4]);    w[3]  =  Math.min(w[2],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
13	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[3]  =  Math.min(w[2],  w[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[3]  =  Math.min(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]    =    Math.min(w[2],    w[4]);    w[3]  =  Math.min(w[2],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
14	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[2]  =  Math.min(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]    =    Math.min(w[2],    w[4]);    w[2]  =  Math.min(w[2],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
15	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[2]  =  Math.min(w[2],  w[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[2]  =  Math.min(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]    =    Math.min(w[2],    w[4]);    w[2]  =  Math.min(w[2],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
16	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[4]  =  Math.min(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]    =    Math.min(w[2],    w[4]);    w[4]  =  Math.min(w[2],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
17	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[4]  =  Math.min(w[2],  w[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  w[4]);  w[4]  =  Math.min(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]    =    Math.min(w[2],    w[4]);    w[4]  =  Math.min(w[2],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	14	1	add
18	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
19	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
20	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]	  	non-compiled	[CE]  ')'  expected	28	None	add
21	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4])  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4])  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4])	  	non-compiled	[CE]  ')'  expected	28	None	add
22	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
23	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
24	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
25	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
26	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
27	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[1]);	  h[0]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
29	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[1]);	  h[0]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	101	1	replace
30	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  height);  [CE]  cannot  find  symbol  height  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.min(w[2],  height);	  w[3]    =    Math.min(w[2],    maxW);    	non-compiled	[CE]  cannot  find  symbol  height	13	None	replace
31	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	77	None	replace
32	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]                java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	77	None	replace
33	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
34	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
35	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
36	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
37	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
38	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	103	1	replace
40	[BUG]  [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	103	1	replace
41	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	103	1	replace
42	[BUG]  [BUGGY]  h[3]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	103	1	replace
43	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.max(w[2],  w[1]  +  Math.min(w[3],  w[4]));	  w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	38	1	replace
44	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.min(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[2],  w[1]  +  Math.min(w[3],  w[4]));	  w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	38	1	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]  =  Math.max(h[2],  h[4]);	  h[3]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
46	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]  =  Math.max(h[2],  h[4]);	  h[3]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[4]);	  h[3]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
48	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[4]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[4]);	  h[3]    =    Math.max(h[2],    h[4]);    	compilable	  [FE]  AssertionFailedError  	12	1	replace
49	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
50	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
51	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
52	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
53	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
54	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
55	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
56	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
57	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    Math.max(h[2],    h[4]);    h[2]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
58	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[2]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[2]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
59	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    Math.max(h[2],    h[4]);    h[4]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
60	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.max(h[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[4]  =  Math.max(h[2],  h[4]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[4]  =  Math.max(h[2],  h[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	11	1	add
61	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3];  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[2],  w[3];	          w[2]    =    Math.max(w[2],    w[3]);    w[2]    =    Math.max(w[2],    w[3];    	non-compiled	[CE]  ')'  expected	85	None	replace
62	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3];  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[2],  w[3];	          w[2]    =    Math.max(w[2],    w[3]);    w[2]    =    Math.max(w[2],    w[3];    	non-compiled	[CE]  ')'  expected	85	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[0]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]  =  h[0]  +  Math.max(h[2],  h[3]);	  h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	111	1	replace
64	[BUG]  [BUGGY]  h[1]  =  h[0]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[0]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]  =  h[0]  +  Math.max(h[2],  h[3]);	  h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	111	1	replace
65	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  Math.max(h[2],  h[3];	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3];    	non-compiled	[CE]  ')'  expected	89	None	replace
66	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3];	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3];    	non-compiled	[CE]  ')'  expected	89	None	replace
67	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
68	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
69	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
70	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	60	1	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	60	1	add
72	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	60	1	add
73	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
74	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
75	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
76	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
77	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
78	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	94	1	add
79	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
80	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
81	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
82	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
83	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
84	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
85	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
86	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
87	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
88	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
89	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
90	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	96	1	add
91	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[0]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]  =  h[0]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	40	1	replace
92	[BUG]  [BUGGY]  h[3]  =  h[0]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[0]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  h[0]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	40	1	replace
93	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[4]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
94	[BUG]  [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[4]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
95	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[4]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
96	[BUG]  [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[4]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
97	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[4]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
98	[BUG]  [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[4]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	98	1	add
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
100	[BUG]  [BUGGY]  h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
101	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
102	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
103	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
104	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
105	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
106	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	24	1	add
107	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
108	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
109	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
110	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
111	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
112	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
113	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
114	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
115	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
116	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
117	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
118	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
119	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[2]    =    Math.max(w[2],    h[3));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	replace
120	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[2]    =    Math.max(w[2],    h[3));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	82	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    h[1]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	110	1	add
122	[BUG]  [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    h[1]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	110	1	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	110	1	add
124	[BUG]  [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	110	1	add
125	[BUG]  [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2]  +  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2]  +  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    h[1]  =  h[2]  +  Math.max(h[2],  h[3];	  	non-compiled	[CE]  ')'  expected	110	None	add
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  h[2]    =    Math.max(h[2],    h[3]);    h[1]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	107	1	replace
127	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  h[2]    =    Math.max(h[2],    h[3]);    h[1]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	107	1	replace
128	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.max(h[2],  h[3]);	  h[2]    =    Math.max(h[2],    h[3]);    w[2]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
129	[BUG]  [BUGGY]  w[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(h[2],  h[3]);	  h[2]    =    Math.max(h[2],    h[3]);    w[2]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
130	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.max(h[2],  h[3]);	  h[2]    =    Math.max(h[2],    h[3]);    w[2]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
131	[BUG]  [BUGGY]  w[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(h[2],  h[3]);	  h[2]    =    Math.max(h[2],    h[3]);    w[2]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	61	1	replace
132	[BUG]  [BUGGY]  w[2]  =  width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  width;  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  width;  h[3]  =  size.height;	  w[2]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	104	None	replace
133	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
134	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
135	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
136	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	3	1	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	3	1	add
138	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	3	1	add
139	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
140	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
141	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
142	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
143	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
144	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
145	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
146	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	56	1	add
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	56	1	add
148	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	56	1	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	56	1	add
150	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	56	1	add
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
152	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
154	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
156	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
157	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
158	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
159	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
160	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
161	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]    =    Math.max(w[2],    w[3]);    w[4]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
162	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]    =    Math.max(w[2],    w[3]);    w[4]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	41	1	add
163	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
164	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
165	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
166	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
167	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
168	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
169	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[4]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
170	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[4]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
171	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[4]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
172	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[4]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
173	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[4]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
174	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[4]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[4]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	20	1	add
175	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[1]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	replace
176	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[1]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	replace
177	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	replace
178	[BUG]  [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[0]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	replace
179	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  height);  [CE]  cannot  find  symbol  height  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  height);	  w[2]    =    Math.min(w[2],    maxW);    	non-compiled	[CE]  cannot  find  symbol  height	34	None	replace
180	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[1]  =  Math.min(w[2],  w[3]);	          w[2]    =    Math.min(w[2],    w[3]);    w[1]    =    Math.min(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	replace
181	[BUG]  [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[1]  =  Math.min(w[2],  w[3]);	          w[2]    =    Math.min(w[2],    w[3]);    w[1]    =    Math.min(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	55	1	replace
182	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3,  w[4]));  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3,  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3,  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3,    w[4]));    	non-compiled	[CE]  ']'  expected	90	None	replace
183	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3,  w[4]));  [CE]  ']'  expected  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3,  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3,  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3,    w[4]));    	non-compiled	[CE]  ']'  expected	90	None	replace
184	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
185	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
186	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
187	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
188	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
189	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
190	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
191	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
192	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
193	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
194	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[3],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[3],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
195	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[3],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[3],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[3],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
196	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.min(w[2],  h[4]);	  w[3]    =    Math.min(w[2],    w[4]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
197	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  h[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  h[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.min(w[2],  h[4]);	  w[3]    =    Math.min(w[2],    w[4]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	15	1	replace
198	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  height,  h[3]);  [CE]  cannot  find  symbol  height  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  height,  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  height,  h[3]);	  w[2]    =    Math.min(w[2],    maxW,    h[3]);    	non-compiled	[CE]  cannot  find  symbol  height	49	None	replace
199	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  width,  h[3]);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  width,  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  width,  h[3]);	  w[2]    =    Math.min(w[2],    maxW,    h[3]);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	49	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  +  width);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]  =  Math.max(h[2],  h[3]  +  width);	  h[3]    =    Math.max(h[2],    h[3]    +    height);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
201	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  +  width);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[3]  +  width);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  Math.max(h[2],  h[3]  +  width);	  h[3]    =    Math.max(h[2],    h[3]    +    height);    	compilable	  [FE]  AssertionFailedError  	87	1	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
203	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
204	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[4]  =  size.width;  h[3]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[4]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  arrangeFN(BlockContainer,Graphics2D,double)	1	None	replace
205	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
206	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
207	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
208	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
209	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[4]	  	non-compiled	[CE]  ')'  expected	32	None	add
210	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    w[2]    =    Math.min(w[2],    h[3);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	replace
211	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    w[2]    =    Math.min(w[2],    h[3);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	84	1	replace
212	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    h[3]  =  h[2]  +  Math.max(h[1],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	75	1	add
213	[BUG]  [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    h[3]  =  h[2]  +  Math.max(h[1],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	75	1	add
214	[BUG]  [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3];  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    h[3]  =  h[2]  +  Math.max(h[1],  h[3];	  	non-compiled	[CE]  ')'  expected	75	None	add
215	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	108	1	add
216	[BUG]  [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	108	1	add
217	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.min(h[2],    h[3]);    w[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	108	1	add
218	[BUG]  [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.min(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.min(h[2],    h[3]);    w[3]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	108	1	add
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	108	1	add
220	[BUG]  [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.min(h[2],    h[3]);    h[2]  =  Math.min(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	108	1	add
221	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
222	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
223	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]	  	non-compiled	[CE]  ')'  expected	30	None	add
224	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4])  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4])  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4])	  	non-compiled	[CE]  ')'  expected	30	None	add
225	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	79	None	replace
226	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[4]  =  size.height;  }	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
227	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
228	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
229	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
230	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
231	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
232	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
233	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
234	[BUG]  [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
235	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[2]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
236	[BUG]  [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[2]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	39	1	add
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[1]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[1]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	39	1	add
238	[BUG]  [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[1]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[1]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[1]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	39	1	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    h[2]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
240	[BUG]  [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    h[2]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	81	1	replace
241	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    h[2]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	81	1	replace
242	[BUG]  [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    h[2]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	81	1	replace
243	[BUG]  [BUGGY]  h[3]  =  h[2]  +  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  h[2]  +  Math.max(h[2],  h[3];	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[2]    +    Math.max(h[2],    h[3];    	non-compiled	[CE]  ')'  expected	88	None	replace
244	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3];	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[2]    +    Math.max(h[2],    h[3];    	non-compiled	[CE]  ')'  expected	88	None	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
246	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
248	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[0]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]    =    Math.max(h[2],    h[3]);    h[0]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
250	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[0]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[0]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    Math.max(h[2],    h[3]);    h[0]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	9	1	add
251	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
252	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
253	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
254	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
255	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
256	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
257	[BUG]  [BUGGY]  h[2]  =  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  Math.max(h[2],  h[3];	  h[2]    =    Math.max(h[2],    h[3]);    h[2]    =    Math.max(h[2],    h[3];    	non-compiled	[CE]  ')'  expected	83	None	replace
258	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.max(w[2],  w[3]  +  width);	  w[2]    =    Math.max(w[2],    w[3]    +    height);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	91	1	replace
259	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[2],  w[3]  +  width);	  w[2]    =    Math.max(w[2],    w[3]    +    height);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	91	1	replace
260	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  maxW);  [CE]  cannot  find  symbol  maxW  [FE]          java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  maxW);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[2],  w[3]  +  maxW);	  w[2]    =    Math.max(w[2],    w[3]    +    height);    	non-compiled	[CE]  cannot  find  symbol  maxW	91	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
262	[BUG]  [BUGGY]  h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
263	[BUG]  [BUGGY]  w[2]  =  width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  width;  h[4]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  width;  h[4]  =  size.height;	  w[2]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	105	None	replace
264	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
265	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
266	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
267	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
268	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
269	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
270	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
271	[BUG]  [BUGGY]  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
272	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
273	[BUG]  [BUGGY]  w[3]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
274	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
275	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
276	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
277	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
278	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
279	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
280	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
281	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
282	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
283	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	5	1	add
284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
285	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[2]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
287	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[2]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	25	1	replace
288	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
289	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
290	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
291	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
292	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
293	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.min(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
294	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.max(w[2],  w[4]);	  w[3]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	replace
295	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[4]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[4]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[2],  w[4]);	  w[3]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	replace
296	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
297	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
298	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
299	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
300	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
301	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
303	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
304	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
305	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
306	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[4]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[4]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
307	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[4]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[4]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[4]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
308	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[1]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.max(w[2],    w[3]);    w[1]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	replace
309	[BUG]  [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[1]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.max(w[2],    w[3]);    w[1]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	67	1	replace
310	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  w[3];  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  w[3];	          w[2]    =    Math.min(w[2],    w[3]);    w[2]    =    Math.min(w[2],    w[3];    	non-compiled	[CE]  ')'  expected	74	None	replace
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
312	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
314	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[2]  +  Math.min(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
316	[BUG]  [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        h[2]        +        Math.max(h[2],        h[3]);        h[2]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[2]  =  h[2]  +  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	7	1	add
317	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
318	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
319	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
320	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
321	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
322	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[0]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]    =    Math.max(h[2],    h[3]);    h[0]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	100	1	add
324	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[0]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[0]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]    =    Math.max(h[2],    h[3]);    h[0]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	100	1	add
325	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
326	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
327	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
328	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
329	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
330	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
331	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
332	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
334	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
336	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
337	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
338	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
339	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
340	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
341	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
342	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[1]);  h[4]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[4]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	113	1	replace
344	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[1]);  h[4]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[4]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	113	1	replace
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[1]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[4]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	113	1	replace
346	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[4]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	113	1	replace
347	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.min(w[2],    w[3]);    w[2]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	93	1	replace
348	[BUG]  [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	          w[2]    =    Math.min(w[2],    w[3]);    w[2]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	93	1	replace
349	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
350	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
351	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
352	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
353	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
354	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	35	1	add
355	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3);  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3);	  	non-compiled	[CE]  ']'  expected	68	None	add
356	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
357	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
358	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3];  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3];	  	non-compiled	[CE]  ')'  expected	62	None	add
359	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
360	[BUG]  [BUGGY]  w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[3],  w[3]  +  Math.min(w[3],  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	33	1	replace
361	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3];	  	non-compiled	[CE]  ')'  expected	70	None	add
362	[BUG]  [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4));  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  Math.max(h[2],  h[4]);  h[3]  =  Math.max(h[2],  h[4));  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    Math.max(h[2],    h[4]);    h[3]  =  Math.max(h[2],  h[4));	  	non-compiled	[CE]  ']'  expected	11	None	add
363	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
364	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    w[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        w[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  w[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	26	1	add
365	[BUG]  [BUGGY]  h[2]  =  size.width;  h[4]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]            java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  size.width;  h[4]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  size.width;  h[4]  =  size.height;	  w[2]    =    size.width;    h[4]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	105	None	replace
366	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3,  w[4]));  [CE]  ']'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3,  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3,  w[4]));	          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3,    w[4]));    	non-compiled	[CE]  ']'  expected	90	None	replace
367	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
368	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[3]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[3]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	30	1	add
369	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
370	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  }	          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
371	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3];	  	non-compiled	[CE]  ')'  expected	92	None	add
372	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3];  w[2]  =  Math.max(w[2],  w[3]);  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3];  w[2]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3];  w[2]  =  Math.max(w[2],  w[3]);	  	non-compiled	[CE]  ')'  expected	92	None	add
373	[BUG]  [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[1]  +  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    h[3]  =  h[1]  +  Math.max(h[2],  h[3];	  	non-compiled	[CE]  ')'  expected	39	None	add
374	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3];	  	non-compiled	[CE]  ')'  expected	45	None	add
375	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
376	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
377	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]  =  Math.min(h[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	103	1	replace
378	[BUG]  [BUGGY]  h[2]  =  Math.min(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]  =  Math.min(h[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  Math.min(h[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    h[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	103	1	replace
379	[BUG]  [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [CE]  cannot  find  symbol  c4  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.bottomBlock.arrange(g2,  c4);  w[3]  =  size.width;  h[3]  =  size.height;	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c4	77	None	replace
380	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	          w[2]    =    Math.min(w[2],    w[3]);    w[2]    =    Math.min(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	replace
381	[BUG]  [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	          w[2]    =    Math.min(w[2],    w[3]);    w[2]    =    Math.min(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	51	1	replace
382	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3];	  	non-compiled	[CE]  ')'  expected	52	None	add
383	[BUG]  [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  height);  [CE]  cannot  find  symbol  height  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.max(w[2],  w[3]  +  height);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.max(w[2],  w[3]  +  height);	  w[3]    =    Math.max(w[2],    w[3]);    	non-compiled	[CE]  cannot  find  symbol  height	42	None	replace
384	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]  +  height);  [CE]  cannot  find  symbol  height  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]  +  height);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]  =  Math.max(h[2],  h[3]  +  height);	  h[1]    =    Math.max(h[2],    h[3]);    	non-compiled	[CE]  cannot  find  symbol  height	10	None	replace
385	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[3]  =  Math.min(w[2],  width);	  w[3]    =    Math.min(w[2],    maxW);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
386	[BUG]  [BUGGY]  w[3]  =  Math.min(w[2],  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[3]  =  Math.min(w[2],  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[3]  =  Math.min(w[2],  width);	  w[3]    =    Math.min(w[2],    maxW);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	13	1	replace
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
388	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
389	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[1],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
390	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[1],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[1],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	58	1	add
391	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[2]  =  size.height;	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	48	None	replace
392	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[1]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    w[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
393	[BUG]  [BUGGY]  w[1]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[1]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[1]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	          w[2]    =    Math.min(w[2],    h[3]);    w[2]    =    Math.min(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	44	1	replace
394	[BUG]  [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  H[1]  =  h[2]  +  Math.max(h[2],  h[3]);  [CE]  cannot  find  symbol  H  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  H[1]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    H[1]  =  h[2]  +  Math.max(h[2],  h[3]);	  	non-compiled	[CE]  cannot  find  symbol  H	110	None	add
395	[BUG]  [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(h[2],  h[3]);  w[2]  =  Math.min(h[2],  h[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.min(h[2],    h[3]);    w[2]  =  Math.min(h[2],  h[3];	  	non-compiled	[CE]  ')'  expected	108	None	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[0],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]  =  h[2]  +  Math.max(h[0],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
397	[BUG]  [BUGGY]  h[3]  =  h[2]  +  Math.max(h[0],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[0],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  h[2]  +  Math.max(h[0],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
398	[BUG]  [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3));  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[2]  +  Math.max(h[1],  h[3));  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    h[3]  =  h[2]  +  Math.max(h[1],  h[3));	  	non-compiled	[CE]  ']'  expected	75	None	add
399	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
400	[BUG]  [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3));  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3));  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3));	  	non-compiled	[CE]  ']'  expected	9	None	add
401	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[0]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[0]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    w[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
402	[BUG]  [BUGGY]  w[0]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[0]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[0]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    w[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	27	1	replace
403	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  Size2D  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  Size2D  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    Size2D  w[2]  =  Math.min(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	non-compiled	[CE]  ']'  expected	102	None	add
404	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
405	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [CE]  illegal  start  of  expression  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  else  {  w[2]  =  Math.max(w[2],  w[3]);  }  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    else    {    w[2]    =    Math.max(w[2],    w[3]);    }    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.leftBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
406	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
407	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[1]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
408	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
409	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[4]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
410	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3];	  	non-compiled	[CE]  ')'  expected	64	None	add
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
412	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	23	1	replace
413	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3];  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3];  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3];	  	non-compiled	[CE]  ')'  expected	50	None	add
414	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3);  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3);	  	non-compiled	[CE]  ']'  expected	43	None	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
416	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
417	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3];  [CE]  ')'  expected  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3];  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[1]);  h[3]  =  Math.max(h[2],  h[3];	  h[3]    =    Math.max(h[2],    h[3]);    h[3]    =    Math.max(h[2],    h[3];    	non-compiled	[CE]  ')'  expected	89	None	replace
418	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3,  w[4]));  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3,  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3,  w[4]));	  	non-compiled	[CE]  ']'  expected	37	None	add
419	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3);  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3);	  	non-compiled	[CE]  ']'  expected	72	None	add
420	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[1],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	56	1	add
421	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[1],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[2]    =    Math.max(h[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(h[1],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	56	1	add
422	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
423	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[4]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
424	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
425	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[1]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[1]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[0]  =  Math.max(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	66	1	add
426	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  h[1]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
427	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  h[1]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[1]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	40	1	replace
428	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
429	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	32	1	add
430	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3,  w[4]));  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3,  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3,  w[4]));	  	non-compiled	[CE]  ']'  expected	35	None	add
431	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [CE]  illegal  start  of  expression  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
432	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]  [CE]  ')'  expected  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  }  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        if(this.rightBlock!=    null)    {    w[2]    =    Math.max(w[2],    w[3]);    }    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]	  	non-compiled	[CE]  ')'  expected	96	None	add
433	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
434	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	62	1	add
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
436	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        h[2]    =    Math.max(w[2],    h[3]);    h[2]  =  Math.max(h[2],  h[3]);  h[2]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	80	1	add
437	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1,  1]  +  Math.max(w[3],  w[4]));  [CE]  ']'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[1]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[1,  1]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[1]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[1,  1]  +  Math.max(w[3],  w[4]));	  	non-compiled	[CE]  ']'  expected	35	None	add
438	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[0]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	replace
439	[BUG]  [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[0]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[0]  =  Math.max(w[2],  h[3]);	          w[2]    =    Math.max(w[2],    h[3]);    w[1]    =    Math.max(w[2],    h[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	73	1	replace
440	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
441	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	18	1	add
442	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
443	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	52	1	add
444	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]  =  Math.min(w[2],  width);	  w[2]    =    Math.min(w[2],    maxW);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	replace
445	[BUG]  [BUGGY]  w[2]  =  Math.min(w[2],  width);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]        java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.min(w[2],  width);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]  =  Math.min(w[2],  width);	  w[2]    =    Math.min(w[2],    maxW);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	34	1	replace
446	[BUG]  [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2].  +  Math.max(h[2],  h[3]);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[1]  =  h[2]  +  Math.max(h[2],  h[3]);  h[1]  =  h[2].  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[1]    =    h[2]    +    Math.max(h[2],    h[3]);    h[1]  =  h[2].  +  Math.max(h[2],  h[3]);	  	non-compiled	[CE]  <identifier>  expected	110	None	add
447	[BUG]  [BUGGY]  h[3]  =  size.height;  [CE]  cannot  find  symbol  size  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  size.height;  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]  =  size.height;	  w[2]    =    size.width;    h[3]    =    size.height;    	non-compiled	[CE]  cannot  find  symbol  size	104	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	60	1	add
449	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    w[2]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        w[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  w[2]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	60	1	add
450	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
451	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	28	1	add
452	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
453	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]);    w[3]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]);        w[3]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  w[3]);  w[3]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	64	1	add
454	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
455	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[1]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[1]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[1]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	54	1	add
456	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
457	[BUG]  [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[3]    =    Math.min(w[2],    w[3]);    w[3]  =  Math.min(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[3]        =        Math.min(w[2],        w[3]);        w[3]    =    Math.min(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[3]  =  Math.min(w[2],  w[3]);  w[3]  =  Math.min(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	16	1	add
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[4]  =  h[2]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[4]  =  h[2]  +  Math.max(h[1],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
459	[BUG]  [BUGGY]  h[4]  =  h[2]  +  Math.max(h[1],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[4]  =  h[2]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[4]  =  h[2]  +  Math.max(h[1],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
460	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[4]  =  Math.max(w[2],  w[3]);	  w[3]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	replace
461	[BUG]  [BUGGY]  w[4]  =  Math.max(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[4]  =  Math.max(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[4]  =  Math.max(w[2],  w[3]);	  w[3]    =    Math.max(w[2],    w[3]);    	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	42	1	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[4]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	113	1	replace
463	[BUG]  [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  h[3]    =    Math.max(h[2],    h[3]);    h[4]    =    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	113	1	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
465	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    h[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        h[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  h[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	102	1	add
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	58	1	add
467	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	58	1	add
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
469	[BUG]  [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[0]  =  h[1]  +  Math.max(h[2],  h[3]);  h[3]  =  h[2]  +  Math.max(h[2],  h[3]);	  h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    h[3]    =    h[2]    +    Math.max(h[2],    h[3]);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
470	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
471	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[4]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	112	1	add
472	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
473	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[1]    =    Math.max(w[2],    h[3]);    w[1]  =  Math.max(w[2],  h[3]);  w[1]  =  Math.max(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	72	1	add
474	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  }  [CE]  cannot  find  symbol  c3  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	if(this.bottomBlock!=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c3);  w[4]  =  size.width;  h[3]  =  size.height;  }	  if(this.bottomBlock!=    null)    {    Size2D    size    =    this.bottomBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[3]    =    size.height;    }    	non-compiled	[CE]  cannot  find  symbol  c3	77	None	replace
475	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[4]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[4]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
476	[BUG]  [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[4]  +  Math.min(w[3],  w[4]));  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  w[2]  =  Math.max(w[2],  w[3]  +  Math.min(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[4]  +  Math.min(w[3],  w[4]));  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	w[2]    =    Math.max(w[2],    w[3]    +    Math.min(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[4]  +  Math.min(w[3],  w[4]));	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	37	1	add
477	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
478	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
479	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
480	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]      java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[3]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[3]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	45	1	add
481	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
482	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  w[2]  =  Math.min(w[2],  w[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	50	1	add
483	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
484	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.min(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        h[3]);        w[2]    =    Math.min(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.min(w[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	43	1	add
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
486	[BUG]  [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[2]    =    Math.max(h[2],    h[3]);    h[1]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]        =        Math.max(h[2],        h[3]);        h[1]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[1]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  AssertionFailedError  	106	1	add
487	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[1]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    h[3]  =  h[1]  +  Math.max(h[1],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	75	1	add
488	[BUG]  [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[1]  +  Math.max(h[1],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    AssertionFailedError    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]  =  h[2]  +  Math.max(h[1],  h[3]);  h[3]  =  h[1]  +  Math.max(h[1],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]    =    h[2]    +    Math.max(h[1],    h[3]);    h[3]  =  h[1]  +  Math.max(h[1],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	75	1	add
489	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
490	[BUG]  [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  h[3]    =    Math.max(h[2],    h[3]);    h[3]  =  Math.max(h[2],  h[3]);  h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);  [BUGGY]        if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[3]        =        Math.max(h[2],        h[3]);        h[3]    =    Math.max(h[2],    h[3]);    h[4]  =  Math.max(h[2],  h[3]);  h[3]  =  Math.max(h[2],  h[3]);	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	22	1	add
491	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4])  [CE]  ')'  expected  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4])  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        w[3]        +        Math.max(w[3],        w[4]));        w[2]    =    Math.max(w[3],    w[3]    +    Math.max(w[3],    w[4]));    w[2]  =  Math.max(w[2],  w[3]  +  Math.max(w[3],  w[4]));  w[2]  =  Math.max(w[3],  w[3]  +  Math.max(w[3],  w[4])	  	non-compiled	[CE]  ')'  expected	32	None	add
492	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
493	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[3]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[3]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[3]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	70	1	add
494	[BUG]  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }  [CE]  illegal  start  of  type  [FE]              java.lang.IllegalArgumentException:  Range(double      [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[3]  =  size.width;  h[4]  =  size.height;  }	  Size2D    size    =    this.rightBlock.arrange(g2,    c3);    w[3]    =    size.width;    h[4]    =    size.height;    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
495	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
496	[BUG]  [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.max(w[2],    h[3]);    w[2]  =  Math.max(w[2],  h[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.max(w[2],        h[3]);        w[2]    =    Math.max(w[2],    h[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.max(w[2],  h[3]);  w[2]  =  Math.max(w[2],  h[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	68	1	add
497	[BUG]  [BUGGY]  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
498	[BUG]  [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [FE]  java.lang.IllegalArgumentException:  Range(double  [FE]    java.lang.IllegalArgumentException:  Range(double    [CONTEXT]      RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);      [BUGGY]          w[2]    =    Math.min(w[2],    w[3]);    w[2]  =  Math.max(w[2],  w[3]);  if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }  [BUGGY]      h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	                w[2]        =        Math.min(w[2],        w[3]);        w[2]    =    Math.max(w[2],    w[3]);    if(this.rightBlock!=  null)  {  w[2]  =  Math.min(w[2],  w[3]);  w[2]  =  Math.max(w[2],  w[3]);  }	  	compilable	  [FE]  java.lang.IllegalArgumentException:  Range(double  	92	1	add
