bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	patch
1	[BUG] [BUGGY] else if (w == LengthConstraintType.FIXED) { [FE] double) [CONTEXT] if (h == LengthConstraintType.NONE) { contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } } [BUGGY] else if (w == LengthConstraintType.FIXED) { [BUGGY] if (h == LengthConstraintType.NONE) { contentSize = arrangeFN(container, g2, constraint.getWidth()); } else if (h == LengthConstraintType.FIXED) { contentSize = arrangeFF(container, g2, constraint); } else if (h == LengthConstraintType.RANGE) { contentSize = arrangeFR(container, g2, constraint); } } [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	147	147	1	
2	[BUG] [BUGGY] if (h == LengthConstraintType.NONE) { [FE] double) [CONTEXT] contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } } else if (w == LengthConstraintType.FIXED) { [BUGGY] if (h == LengthConstraintType.NONE) { [BUGGY] contentSize = arrangeFN(container, g2, constraint.getWidth()); } else if (h == LengthConstraintType.FIXED) { contentSize = arrangeFF(container, g2, constraint); } else if (h == LengthConstraintType.RANGE) { contentSize = arrangeFR(container, g2, constraint); } } else if (w == LengthConstraintType.RANGE) { [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	
3	[BUG] [BUGGY] contentSize = arrangeFN(container, g2, constraint.getWidth()); [FE] double) [CONTEXT] } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } } else if (w == LengthConstraintType.FIXED) { if (h == LengthConstraintType.NONE) { [BUGGY] contentSize = arrangeFN(container, g2, constraint.getWidth()); [BUGGY] } else if (h == LengthConstraintType.FIXED) { contentSize = arrangeFF(container, g2, constraint); } else if (h == LengthConstraintType.RANGE) { contentSize = arrangeFR(container, g2, constraint); } } else if (w == LengthConstraintType.RANGE) { if (h == LengthConstraintType.NONE) { [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	149	149	1	
4	[BUG] [BUGGY] else if (h == LengthConstraintType.FIXED) { [FE] double) [CONTEXT] throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } } else if (w == LengthConstraintType.FIXED) { if (h == LengthConstraintType.NONE) { contentSize = arrangeFN(container, g2, constraint.getWidth()); } [BUGGY] else if (h == LengthConstraintType.FIXED) { [BUGGY] contentSize = arrangeFF(container, g2, constraint); } else if (h == LengthConstraintType.RANGE) { contentSize = arrangeFR(container, g2, constraint); } } else if (w == LengthConstraintType.RANGE) { if (h == LengthConstraintType.NONE) { throw new RuntimeException("Not implemented."); } [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	
5	[BUG] [BUGGY] contentSize = arrangeFF(container, g2, constraint); [FE] double) [CONTEXT] } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } } else if (w == LengthConstraintType.FIXED) { if (h == LengthConstraintType.NONE) { contentSize = arrangeFN(container, g2, constraint.getWidth()); } else if (h == LengthConstraintType.FIXED) { [BUGGY] contentSize = arrangeFF(container, g2, constraint); [BUGGY] } else if (h == LengthConstraintType.RANGE) { contentSize = arrangeFR(container, g2, constraint); } } else if (w == LengthConstraintType.RANGE) { if (h == LengthConstraintType.NONE) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.FIXED) { [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	
6	[BUG] [BUGGY] double[] w = new double[5]; [FE] double) [CONTEXT] double width) { [BUGGY] double[] w = new double[5]; [BUGGY] double[] h = new double[5]; RectangleConstraint c1 = new RectangleConstraint(width, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); if (this.topBlock != null) { Size2D size = this.topBlock.arrange(g2, c1); w[0] = size.width; h[0] = size.height; } if (this.bottomBlock != null) { [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	277	277	1	
7	[BUG] [BUGGY] double[] h = new double[5]; [FE] double) [CONTEXT] double width) { double[] w = new double[5]; [BUGGY] double[] h = new double[5]; [BUGGY] RectangleConstraint c1 = new RectangleConstraint(width, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); if (this.topBlock != null) { Size2D size = this.topBlock.arrange(g2, c1); w[0] = size.width; h[0] = size.height; } if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	
8	[BUG] [BUGGY] RectangleConstraint c1 = new RectangleConstraint(width, null,  LengthConstraintType.FIXED, 0.0, null,  LengthConstraintType.NONE); [FE] double) [CONTEXT] double width) { double[] w = new double[5]; double[] h = new double[5]; [BUGGY] RectangleConstraint c1 = new RectangleConstraint(width, null,        LengthConstraintType.FIXED, 0.0, null,        LengthConstraintType.NONE); [BUGGY] LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); if (this.topBlock != null) { Size2D size = this.topBlock.arrange(g2, c1); w[0] = size.width; h[0] = size.height; } if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	279	281	1	
9	[BUG] [BUGGY] if (this.topBlock != null) { [FE] double) [CONTEXT] double width) { double[] w = new double[5]; double[] h = new double[5]; RectangleConstraint c1 = new RectangleConstraint(width, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); [BUGGY] if (this.topBlock != null) { [BUGGY] Size2D size = this.topBlock.arrange(g2, c1); w[0] = size.width; h[0] = size.height; } if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	282	282	1	
10	[BUG] [BUGGY] if (this.bottomBlock != null) { [FE] double) [CONTEXT] double[] w = new double[5]; double[] h = new double[5]; RectangleConstraint c1 = new RectangleConstraint(width, null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); if (this.topBlock != null) { Size2D size = this.topBlock.arrange(g2, c1); w[0] = size.width; h[0] = size.height; } [BUGGY] if (this.bottomBlock != null) { [BUGGY] Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	287	287	1	
11	[BUG] [BUGGY] RectangleConstraint c2 = new RectangleConstraint(0.0,  new Range(0.0, width), LengthConstraintType.RANGE,  0.0, null, LengthConstraintType.NONE); [FE] double) [CONTEXT] if (this.topBlock != null) { Size2D size = this.topBlock.arrange(g2, c1); w[0] = size.width; h[0] = size.height; } if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } [BUGGY] RectangleConstraint c2 = new RectangleConstraint(0.0,        new Range(0.0, width), LengthConstraintType.RANGE,        0.0, null, LengthConstraintType.NONE); [BUGGY] new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	292	294	1	
12	[BUG] [BUGGY] if (this.leftBlock != null) { [FE] double) [CONTEXT] h[0] = size.height; } if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); [BUGGY] if (this.leftBlock != null) { [BUGGY] Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	
13	[BUG] [BUGGY] Size2D size = this.leftBlock.arrange(g2, c2); [FE] double) [CONTEXT] } if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { [BUGGY] Size2D size = this.leftBlock.arrange(g2, c2); [BUGGY] w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	296	296	1	
14	[BUG] [BUGGY] w[2] = size.width; [FE] double) [CONTEXT] if (this.bottomBlock != null) { Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); [BUGGY] w[2] = size.width; [BUGGY] h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	297	297	1	
15	[BUG] [BUGGY] h[2] = size.height; [FE] double) [CONTEXT] Size2D size = this.bottomBlock.arrange(g2, c1); w[1] = size.width; h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; [BUGGY] h[2] = size.height; [BUGGY] } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	298	298	1	
16	[BUG] [BUGGY] if (this.rightBlock != null) { [FE] double) [CONTEXT] h[1] = size.height; } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; h[2] = size.height; } [BUGGY] if (this.rightBlock != null) { [BUGGY] double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; }  [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	300	300	1	
17	[BUG] [BUGGY] double maxW = Math.max(width - w[2], 0.0); [FE] double) [CONTEXT] } RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { [BUGGY] double maxW = Math.max(width - w[2], 0.0); [BUGGY] RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; } h[2] = Math.max(h[2], h[3]); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	301	301	1	
18	[BUG] [BUGGY] RectangleConstraint c3 = new RectangleConstraint(0.0,   new Range(Math.min(w[2], maxW), maxW),   LengthConstraintType.RANGE, 0.0, null, [FE] double) [CONTEXT] RectangleConstraint c2 = new RectangleConstraint(0.0, new Range(0.0, width), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); if (this.leftBlock != null) { Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); [BUGGY] RectangleConstraint c3 = new RectangleConstraint(0.0,          new Range(Math.min(w[2], maxW), maxW),          LengthConstraintType.RANGE, 0.0, null, [BUGGY] new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	
19	[BUG] [BUGGY] Size2D size = this.rightBlock.arrange(g2, c3); [FE] double) [CONTEXT] Size2D size = this.leftBlock.arrange(g2, c2); w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); [BUGGY] Size2D size = this.rightBlock.arrange(g2, c3); [BUGGY] w[3] = size.width; h[3] = size.height; } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	306	306	1	
20	[BUG] [BUGGY] w[3] = size.width; [FE] double) [CONTEXT] w[2] = size.width; h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); [BUGGY] w[3] = size.width; [BUGGY] h[3] = size.height; } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	
21	[BUG] [BUGGY] h[3] = size.height; [FE] double) [CONTEXT] h[2] = size.height; } if (this.rightBlock != null) { double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; [BUGGY] h[3] = size.height; [BUGGY] } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	
22	[BUG] [BUGGY] h[2] = Math.max(h[2], h[3]); [FE] double) [CONTEXT] double maxW = Math.max(width - w[2], 0.0); RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; } [BUGGY] h[2] = Math.max(h[2], h[3]); [BUGGY] h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; h[4] = size.height; } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	
23	[BUG] [BUGGY] h[3] = h[2]; [FE] double) [CONTEXT] RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(Math.min(w[2], maxW), maxW), LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; } h[2] = Math.max(h[2], h[3]); [BUGGY] h[3] = h[2]; [BUGGY]  if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; h[4] = size.height; } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	
24	[BUG] [BUGGY] if (this.centerBlock != null) { [FE] double) [CONTEXT] LengthConstraintType.RANGE, 0.0, null, LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; [BUGGY] if (this.centerBlock != null) { [BUGGY] RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; h[4] = size.height; } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); return arrange(container, g2, new RectangleConstraint(width, height)); } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	314	314	1	
25	[BUG] [BUGGY] RectangleConstraint c4 = new RectangleConstraint(width - w[2]   - w[3], null, LengthConstraintType.FIXED, 0.0, null,   LengthConstraintType.NONE); [FE] double) [CONTEXT] LengthConstraintType.NONE); Size2D size = this.rightBlock.arrange(g2, c3); w[3] = size.width; h[3] = size.height; } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { [BUGGY] RectangleConstraint c4 = new RectangleConstraint(width - w[2]          - w[3], null, LengthConstraintType.FIXED, 0.0, null,          LengthConstraintType.NONE); [BUGGY] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; h[4] = size.height; } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); return arrange(container, g2, new RectangleConstraint(width, height)); } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	315	317	1	
26	[BUG] [BUGGY] Size2D size = this.centerBlock.arrange(g2, c4); [FE] double) [CONTEXT] h[3] = size.height; } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); [BUGGY] Size2D size = this.centerBlock.arrange(g2, c4); [BUGGY] w[4] = size.width; h[4] = size.height; } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); return arrange(container, g2, new RectangleConstraint(width, height)); } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	
27	[BUG] [BUGGY] w[4] = size.width; [FE] double) [CONTEXT] } h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); [BUGGY] w[4] = size.width; [BUGGY] h[4] = size.height; } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); return arrange(container, g2, new RectangleConstraint(width, height)); } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	
28	[BUG] [BUGGY] h[4] = size.height; [FE] double) [CONTEXT] h[2] = Math.max(h[2], h[3]); h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; [BUGGY] h[4] = size.height; [BUGGY] } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); return arrange(container, g2, new RectangleConstraint(width, height)); } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	320	320	1	
29	[BUG] [BUGGY] double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); [FE] double) [CONTEXT] h[3] = h[2]; if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; h[4] = size.height; } [BUGGY] double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); [BUGGY] return arrange(container, g2, new RectangleConstraint(width, height)); } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	
30	[BUG] [BUGGY] return arrange(container, g2, new RectangleConstraint(width, height)); [FE] double) [CONTEXT] if (this.centerBlock != null) { RectangleConstraint c4 = new RectangleConstraint(width - w[2] - w[3], null, LengthConstraintType.FIXED, 0.0, null, LengthConstraintType.NONE); Size2D size = this.centerBlock.arrange(g2, c4); w[4] = size.width; h[4] = size.height; } double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4])); [BUGGY] return arrange(container, g2, new RectangleConstraint(width, height)); [BUGGY] } [CLASS] BorderArrangement [METHOD] arrangeFN [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 double width [VARIABLES] Size2D size boolean double[] h w BlockContainer container double height maxW width Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	323	323	1	
31	[BUG] [BUGGY] double[] w = new double[5]; [FE] double) [CONTEXT] RectangleConstraint constraint) { [BUGGY] double[] w = new double[5]; [BUGGY] double[] h = new double[5]; w[0] = constraint.getWidth(); if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	424	424	1	
32	[BUG] [BUGGY] double[] h = new double[5]; [FE] double) [CONTEXT] RectangleConstraint constraint) { double[] w = new double[5]; [BUGGY] double[] h = new double[5]; [BUGGY] w[0] = constraint.getWidth(); if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } w[1] = w[0]; [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	425	425	1	
33	[BUG] [BUGGY] w[0] = constraint.getWidth(); [FE] double) [CONTEXT] RectangleConstraint constraint) { double[] w = new double[5]; double[] h = new double[5]; [BUGGY] w[0] = constraint.getWidth(); [BUGGY] if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } w[1] = w[0]; if (this.bottomBlock != null) { [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	426	426	1	
34	[BUG] [BUGGY] if (this.topBlock != null) { [FE] double) [CONTEXT] RectangleConstraint constraint) { double[] w = new double[5]; double[] h = new double[5]; w[0] = constraint.getWidth(); [BUGGY] if (this.topBlock != null) { [BUGGY] RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } w[1] = w[0]; if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	427	427	1	
35	[BUG] [BUGGY] w[1] = w[0]; [FE] double) [CONTEXT] double[] h = new double[5]; w[0] = constraint.getWidth(); if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } [BUGGY] w[1] = w[0]; [BUGGY] if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	
36	[BUG] [BUGGY] if (this.bottomBlock != null) { [FE] double) [CONTEXT] w[0] = constraint.getWidth(); if (this.topBlock != null) { RectangleConstraint c1 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight()), LengthConstraintType.RANGE); Size2D size = this.topBlock.arrange(g2, c1); h[0] = size.height; } w[1] = w[0]; [BUGGY] if (this.bottomBlock != null) { [BUGGY] RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	436	436	1	
37	[BUG] [BUGGY] h[2] = constraint.getHeight() - h[1] - h[0]; [FE] double) [CONTEXT] h[0] = size.height; } w[1] = w[0]; if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } [BUGGY] h[2] = constraint.getHeight() - h[1] - h[0]; [BUGGY] if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	
38	[BUG] [BUGGY] if (this.leftBlock != null) { [FE] double) [CONTEXT] } w[1] = w[0]; if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; [BUGGY] if (this.leftBlock != null) { [BUGGY] RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	444	444	1	
39	[BUG] [BUGGY] RectangleConstraint c3 = new RectangleConstraint(0.0,   new Range(0.0, constraint.getWidth()),   LengthConstraintType.RANGE, h[2], null, [FE] double) [CONTEXT] w[1] = w[0]; if (this.bottomBlock != null) { RectangleConstraint c2 = new RectangleConstraint(w[0], null, LengthConstraintType.FIXED, 0.0, new Range(0.0, constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { [BUGGY] RectangleConstraint c3 = new RectangleConstraint(0.0,          new Range(0.0, constraint.getWidth()),          LengthConstraintType.RANGE, h[2], null, [BUGGY] new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	445	447	1	
40	[BUG] [BUGGY] Size2D size = this.leftBlock.arrange(g2, c3); [FE] double) [CONTEXT] constraint.getHeight() - h[0]), LengthConstraintType.RANGE); Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); [BUGGY] Size2D size = this.leftBlock.arrange(g2, c3); [BUGGY] w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	449	449	1	
41	[BUG] [BUGGY] w[2] = size.width; [FE] double) [CONTEXT] Size2D size = this.bottomBlock.arrange(g2, c2); h[1] = size.height; } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); [BUGGY] w[2] = size.width; [BUGGY] } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	450	450	1	
42	[BUG] [BUGGY] h[3] = h[2]; [FE] double) [CONTEXT] } h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } [BUGGY] h[3] = h[2]; [BUGGY] if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	452	452	1	
43	[BUG] [BUGGY] if (this.rightBlock != null) { [FE] double) [CONTEXT] h[2] = constraint.getHeight() - h[1] - h[0]; if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; [BUGGY] if (this.rightBlock != null) { [BUGGY] RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	453	453	1	
44	[BUG] [BUGGY] RectangleConstraint c4 = new RectangleConstraint(0.0,   new Range(0.0, constraint.getWidth() - w[2]),   LengthConstraintType.RANGE, h[2], null, [FE] double) [CONTEXT] if (this.leftBlock != null) { RectangleConstraint c3 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth()), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { [BUGGY] RectangleConstraint c4 = new RectangleConstraint(0.0,          new Range(0.0, constraint.getWidth() - w[2]),          LengthConstraintType.RANGE, h[2], null, [BUGGY] new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	454	456	1	
45	[BUG] [BUGGY] Size2D size = this.rightBlock.arrange(g2, c4); [FE] double) [CONTEXT] LengthConstraintType.FIXED); Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); [BUGGY] Size2D size = this.rightBlock.arrange(g2, c4); [BUGGY] w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	458	458	1	
46	[BUG] [BUGGY] w[3] = size.width; [FE] double) [CONTEXT] Size2D size = this.leftBlock.arrange(g2, c3); w[2] = size.width; } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); [BUGGY] w[3] = size.width; [BUGGY] } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	
47	[BUG] [BUGGY] h[4] = h[2]; [FE] double) [CONTEXT] } h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } [BUGGY] h[4] = h[2]; [BUGGY] w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	
48	[BUG] [BUGGY] w[4] = constraint.getWidth() - w[3] - w[2]; [FE] double) [CONTEXT] h[3] = h[2]; if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; [BUGGY] w[4] = constraint.getWidth() - w[3] - w[2]; [BUGGY] RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	
49	[BUG] [BUGGY] RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); [FE] double) [CONTEXT] if (this.rightBlock != null) { RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; [BUGGY] RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); [BUGGY] if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	463	463	1	
50	[BUG] [BUGGY] if (this.centerBlock != null) { [FE] double) [CONTEXT] RectangleConstraint c4 = new RectangleConstraint(0.0, new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); [BUGGY] if (this.centerBlock != null) { [BUGGY] this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	464	464	1	
51	[BUG] [BUGGY] this.centerBlock.arrange(g2, c5); [FE] double) [CONTEXT] new Range(0.0, constraint.getWidth() - w[2]), LengthConstraintType.RANGE, h[2], null, LengthConstraintType.FIXED); Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { [BUGGY] this.centerBlock.arrange(g2, c5); [BUGGY] } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	465	465	1	
52	[BUG] [BUGGY] if (this.topBlock != null) { [FE] double) [CONTEXT] Size2D size = this.rightBlock.arrange(g2, c4); w[3] = size.width; } h[4] = h[2]; w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } [BUGGY] if (this.topBlock != null) { [BUGGY] this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	468	468	1	
53	[BUG] [BUGGY] if (this.bottomBlock != null) { [FE] double) [CONTEXT] w[4] = constraint.getWidth() - w[3] - w[2]; RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]); if (this.centerBlock != null) { this.centerBlock.arrange(g2, c5); } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } [BUGGY] if (this.bottomBlock != null) { [BUGGY] this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	
54	[BUG] [BUGGY] if (this.leftBlock != null) { [FE] double) [CONTEXT] } if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } [BUGGY] if (this.leftBlock != null) { [BUGGY] this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	476	476	1	
55	[BUG] [BUGGY] this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],   h[2])); } [FE] double) [CONTEXT] if (this.topBlock != null) { this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0], h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { [BUGGY] this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],          h[2]));    } [BUGGY] h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	477	479	1	
56	[BUG] [BUGGY] if (this.rightBlock != null) { [FE] double) [CONTEXT] h[0])); } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } [BUGGY] if (this.rightBlock != null) { [BUGGY] this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } return new Size2D(constraint.getWidth(), constraint.getHeight()); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	480	480	1	
57	[BUG] [BUGGY] this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],   w[3], h[3])); } [FE] double) [CONTEXT] } if (this.bottomBlock != null) { this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2], w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { [BUGGY] this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],          w[3], h[3]));    } [BUGGY] w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } return new Size2D(constraint.getWidth(), constraint.getHeight()); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	481	483	1	
58	[BUG] [BUGGY] if (this.centerBlock != null) { [FE] double) [CONTEXT] w[1], h[1])); } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } [BUGGY] if (this.centerBlock != null) { [BUGGY] this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } return new Size2D(constraint.getWidth(), constraint.getHeight()); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	484	484	1	
59	[BUG] [BUGGY] this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],   h[4])); } [FE] double) [CONTEXT] } if (this.leftBlock != null) { this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2], h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { [BUGGY] this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],          h[4]));    } [BUGGY] h[4])); } return new Size2D(constraint.getWidth(), constraint.getHeight()); } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	485	487	1	
60	[BUG] [BUGGY] return new Size2D(constraint.getWidth(), constraint.getHeight()); [FE] double) [CONTEXT] h[2])); } if (this.rightBlock != null) { this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0], w[3], h[3])); } if (this.centerBlock != null) { this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4], h[4])); } [BUGGY] return new Size2D(constraint.getWidth(), constraint.getHeight()); [BUGGY] } [CLASS] BorderArrangement [METHOD] arrangeFF [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D size boolean double[] h w BlockContainer container Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint c1 c2 c3 c4 c5 constraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	488	488	1	
61	[BUG] [BUGGY] RectangleConstraint contentConstraint  = container.toContentConstraint(constraint); Size2D contentSize = null; [FE] double) [CONTEXT] RectangleConstraint constraint) { [BUGGY] RectangleConstraint contentConstraint        = container.toContentConstraint(constraint);    Size2D contentSize = null; [BUGGY] = container.toContentConstraint(constraint); Size2D contentSize = null; LengthConstraintType w = contentConstraint.getWidthConstraintType(); LengthConstraintType h = contentConstraint.getHeightConstraintType(); if (w == LengthConstraintType.NONE) { if (h == LengthConstraintType.NONE) { contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	131	133	1	
62	[BUG] [BUGGY] Size2D contentSize = null; [FE] double) [CONTEXT] RectangleConstraint constraint) { RectangleConstraint contentConstraint = container.toContentConstraint(constraint); [BUGGY] Size2D contentSize = null; [BUGGY] LengthConstraintType w = contentConstraint.getWidthConstraintType(); LengthConstraintType h = contentConstraint.getHeightConstraintType(); if (w == LengthConstraintType.NONE) { if (h == LengthConstraintType.NONE) { contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	133	133	1	
63	[BUG] [BUGGY] LengthConstraintType w = contentConstraint.getWidthConstraintType(); [FE] double) [CONTEXT] RectangleConstraint constraint) { RectangleConstraint contentConstraint = container.toContentConstraint(constraint); Size2D contentSize = null; [BUGGY] LengthConstraintType w = contentConstraint.getWidthConstraintType(); [BUGGY] LengthConstraintType h = contentConstraint.getHeightConstraintType(); if (w == LengthConstraintType.NONE) { if (h == LengthConstraintType.NONE) { contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	134	134	1	
64	[BUG] [BUGGY] LengthConstraintType h = contentConstraint.getHeightConstraintType(); [FE] double) [CONTEXT] RectangleConstraint constraint) { RectangleConstraint contentConstraint = container.toContentConstraint(constraint); Size2D contentSize = null; LengthConstraintType w = contentConstraint.getWidthConstraintType(); [BUGGY] LengthConstraintType h = contentConstraint.getHeightConstraintType(); [BUGGY] if (w == LengthConstraintType.NONE) { if (h == LengthConstraintType.NONE) { contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	135	135	1	
65	[BUG] [BUGGY] if (w == LengthConstraintType.NONE) { [FE] double) [CONTEXT] RectangleConstraint constraint) { RectangleConstraint contentConstraint = container.toContentConstraint(constraint); Size2D contentSize = null; LengthConstraintType w = contentConstraint.getWidthConstraintType(); LengthConstraintType h = contentConstraint.getHeightConstraintType(); [BUGGY] if (w == LengthConstraintType.NONE) { [BUGGY] if (h == LengthConstraintType.NONE) { contentSize = arrangeNN(container, g2); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { throw new RuntimeException("Not implemented."); } } [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	136	136	1	
66	[BUG] [BUGGY] return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),  container.calculateTotalHeight(contentSize.getHeight())); } [FE] double) [CONTEXT] throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.FIXED) { throw new RuntimeException("Not implemented."); } else if (h == LengthConstraintType.RANGE) { contentSize = arrangeRR(container, constraint.getWidthRange(), constraint.getHeightRange(), g2); } } [BUGGY] return new Size2D(container.calculateTotalWidth(contentSize.getWidth()),        container.calculateTotalHeight(contentSize.getHeight()));  } [BUGGY] container.calculateTotalHeight(contentSize.getHeight())); } [CLASS] BorderArrangement [METHOD] arrange [RETURN_TYPE] Size2D  BlockContainer container Graphics2D g2 RectangleConstraint constraint [VARIABLES] Size2D contentSize boolean BlockContainer container LengthConstraintType h w Block block bottomBlock centerBlock leftBlock rightBlock topBlock RectangleConstraint constraint contentConstraint long serialVersionUID Graphics2D g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	170	172	1	
67	[BUG] [BUGGY] this.centerBlock = null; [FE] double) [CONTEXT] public void clear() { [BUGGY] this.centerBlock = null; [BUGGY] this.topBlock = null; this.bottomBlock = null; this.leftBlock = null; this.rightBlock = null; } [CLASS] BorderArrangement [METHOD] clear [RETURN_TYPE] void  [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock long serialVersionUID boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	495	495	1	
68	[BUG] [BUGGY] this.topBlock = null; [FE] double) [CONTEXT] public void clear() { this.centerBlock = null; [BUGGY] this.topBlock = null; [BUGGY] this.bottomBlock = null; this.leftBlock = null; this.rightBlock = null; } [CLASS] BorderArrangement [METHOD] clear [RETURN_TYPE] void  [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock long serialVersionUID boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	
69	[BUG] [BUGGY] this.bottomBlock = null; [FE] double) [CONTEXT] public void clear() { this.centerBlock = null; this.topBlock = null; [BUGGY] this.bottomBlock = null; [BUGGY] this.leftBlock = null; this.rightBlock = null; } [CLASS] BorderArrangement [METHOD] clear [RETURN_TYPE] void  [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock long serialVersionUID boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	
70	[BUG] [BUGGY] this.leftBlock = null; [FE] double) [CONTEXT] public void clear() { this.centerBlock = null; this.topBlock = null; this.bottomBlock = null; [BUGGY] this.leftBlock = null; [BUGGY] this.rightBlock = null; } [CLASS] BorderArrangement [METHOD] clear [RETURN_TYPE] void  [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock long serialVersionUID boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	
71	[BUG] [BUGGY] this.rightBlock = null; [FE] double) [CONTEXT] public void clear() { this.centerBlock = null; this.topBlock = null; this.bottomBlock = null; this.leftBlock = null; [BUGGY] this.rightBlock = null; [BUGGY] } [CLASS] BorderArrangement [METHOD] clear [RETURN_TYPE] void  [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock long serialVersionUID boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	
72	[BUG] [BUGGY] } [FE] double) [CONTEXT] public void clear() { this.centerBlock = null; this.topBlock = null; this.bottomBlock = null; this.leftBlock = null; this.rightBlock = null; [BUGGY] } [BUGGY]  [CLASS] BorderArrangement [METHOD] clear [RETURN_TYPE] void  [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock long serialVersionUID boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	500	500	1	
73	[BUG] [BUGGY] if (key == null) { [FE] double) [CONTEXT] public void add(Block block, Object key) { [BUGGY] if (key == null) { [BUGGY] this.centerBlock = block; } else { RectangleEdge edge = (RectangleEdge) key; if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	98	98	1	
74	[BUG] [BUGGY] this.centerBlock = block; [FE] double) [CONTEXT] public void add(Block block, Object key) { if (key == null) { [BUGGY] this.centerBlock = block; [BUGGY] } else { RectangleEdge edge = (RectangleEdge) key; if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	99	99	1	
75	[BUG] [BUGGY] RectangleEdge edge = (RectangleEdge) key; [FE] double) [CONTEXT] public void add(Block block, Object key) { if (key == null) { this.centerBlock = block; } else { [BUGGY] RectangleEdge edge = (RectangleEdge) key; [BUGGY] if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { this.leftBlock = block; } else if (edge == RectangleEdge.RIGHT) { [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	102	102	1	
76	[BUG] [BUGGY] if (edge == RectangleEdge.TOP) { [FE] double) [CONTEXT] public void add(Block block, Object key) { if (key == null) { this.centerBlock = block; } else { RectangleEdge edge = (RectangleEdge) key; [BUGGY] if (edge == RectangleEdge.TOP) { [BUGGY] this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { this.leftBlock = block; } else if (edge == RectangleEdge.RIGHT) { this.rightBlock = block; [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	103	103	1	
77	[BUG] [BUGGY] else if (edge == RectangleEdge.BOTTOM) { [FE] double) [CONTEXT] public void add(Block block, Object key) { if (key == null) { this.centerBlock = block; } else { RectangleEdge edge = (RectangleEdge) key; if (edge == RectangleEdge.TOP) { this.topBlock = block; } [BUGGY] else if (edge == RectangleEdge.BOTTOM) { [BUGGY] this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { this.leftBlock = block; } else if (edge == RectangleEdge.RIGHT) { this.rightBlock = block; } } } [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	106	106	1	
78	[BUG] [BUGGY] else if (edge == RectangleEdge.LEFT) { [FE] double) [CONTEXT] this.centerBlock = block; } else { RectangleEdge edge = (RectangleEdge) key; if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } [BUGGY] else if (edge == RectangleEdge.LEFT) { [BUGGY] this.leftBlock = block; } else if (edge == RectangleEdge.RIGHT) { this.rightBlock = block; } } } [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	109	109	1	
79	[BUG] [BUGGY] this.leftBlock = block; [FE] double) [CONTEXT] } else { RectangleEdge edge = (RectangleEdge) key; if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { [BUGGY] this.leftBlock = block; [BUGGY] } else if (edge == RectangleEdge.RIGHT) { this.rightBlock = block; } } } [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	110	110	1	
80	[BUG] [BUGGY] else if (edge == RectangleEdge.RIGHT) { [FE] double) [CONTEXT] RectangleEdge edge = (RectangleEdge) key; if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { this.leftBlock = block; } [BUGGY] else if (edge == RectangleEdge.RIGHT) { [BUGGY] this.rightBlock = block; } } } [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	112	112	1	
81	[BUG] [BUGGY] this.rightBlock = block; [FE] double) [CONTEXT] if (edge == RectangleEdge.TOP) { this.topBlock = block; } else if (edge == RectangleEdge.BOTTOM) { this.bottomBlock = block; } else if (edge == RectangleEdge.LEFT) { this.leftBlock = block; } else if (edge == RectangleEdge.RIGHT) { [BUGGY] this.rightBlock = block; [BUGGY] } } } [CLASS] BorderArrangement [METHOD] add [RETURN_TYPE] void  Block block Object key [VARIABLES] Block block bottomBlock centerBlock leftBlock rightBlock topBlock Object key boolean long serialVersionUID RectangleEdge edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	
