bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	original_buggy	action	patch	execution_result	diagnosis	previous_bug_id	original_failing_test_number
51	[BUG]  [BUGGY]  [FE]  NullPointerException  [CONTEXT]  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [BUGGY]    [BUGGY]  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	add	  	contentSize  =  arrangeFF(container,  g2,  constraint);  	compilable	  [FE]  NullPointerException	9	1
52	[BUG]  [BUGGY]    [FE]  NullPointerException  [CONTEXT]  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [BUGGY]    [BUGGY]  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	152	152	1	replace	  	contentSize  =  arrangeFF(container,  g2,  constraint);  	compilable	  [FE]  NullPointerException	9	1
308	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }		compilable	  [FE]    double)	52	1
309	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [FE]  double)  [CONTEXT]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }		compilable	  [FE]    double)	52	1
309	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	add	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  }		compilable	  [FE]    double)	52	1
310	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  }  [FE]  double)  [CONTEXT]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	318	318	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[3]  =  size.height;  }		compilable	  [FE]    double)	52	1
643	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [BUGGY]  if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	476	476	1	add	if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }		compilable	  [FE]    double)	108	1
644	[BUG]  [BUGGY]  if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [FE]  double)  [CONTEXT]  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [BUGGY]  if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	476	476	1	replace	if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }		compilable	  [FE]    double)	108	1
645	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	476	476	1	add	if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }		compilable	  [FE]    double)	108	1
646	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [FE]  double)  [CONTEXT]  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	476	476	1	replace	if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }		compilable	  [FE]    double)	108	1
230	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]  w[2]  =  size.width;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	w[2]  =  size.width;	w[3]  =  size.width;  	compilable	  [FE]    double)	39	1
231	[BUG]  [BUGGY]  w[2]  =  size.width;  [FE]  double)  [CONTEXT]  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]  w[2]  =  size.width;  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	w[2]  =  size.width;	w[3]  =  size.width;  	compilable	  [FE]    double)	39	1
231	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]    [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	  	w[3]  =  size.width;  	compilable	  [FE]    double)	39	1
232	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]    [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	  	w[3]  =  size.width;  	compilable	  [FE]    double)	39	1
62	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]  double  width)  {  [BUGGY]  double[]  w  =  new  double[4];  [BUGGY]  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	277	277	1	add	double[]  w  =  new  double[4];	double[]  w  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	11	1
63	[BUG]  [BUGGY]  double[]  w  =  new  double[4];  [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]  double  width)  {  [BUGGY]  double[]  w  =  new  double[4];  [BUGGY]  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	277	277	1	replace	double[]  w  =  new  double[4];	double[]  w  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	11	1
314	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [BUGGY]  w[3]  =  size.width;  [BUGGY]  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	w[3]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
315	[BUG]  [BUGGY]  w[3]  =  size.width;  [FE]  double)  [CONTEXT]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [BUGGY]  w[3]  =  size.width;  [BUGGY]  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	w[3]  =  size.width;	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
315	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [BUGGY]    [BUGGY]  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	add	  	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
316	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [BUGGY]    [BUGGY]  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	319	319	1	replace	  	w[4]  =  size.width;  	compilable	  [FE]    double)	53	1
674	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [BUGGY]  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	481	482	1	add	if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }	this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],    w[3],  h[3]));  	compilable	  [FE]    double)	113	1
675	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [FE]  double)  [CONTEXT]  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  [BUGGY]  if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [BUGGY]  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	481	482	1	replace	if(this.rightBlock!=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }	this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],    w[3],  h[3]));  	compilable	  [FE]    double)	113	1
675	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  [BUGGY]    [BUGGY]  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	481	482	1	add	  	this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],    w[3],  h[3]));  	compilable	  [FE]    double)	113	1
676	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  [BUGGY]    [BUGGY]  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	481	482	1	replace	  	this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],    w[3],  h[3]));  	compilable	  [FE]    double)	113	1
847	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	add	this.rightBlock  =  null;		compilable	  [FE]    double)	142	1
848	[BUG]  [BUGGY]  this.rightBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	replace	this.rightBlock  =  null;		compilable	  [FE]    double)	142	1
848	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  [BUGGY]  this.topBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	add	this.topBlock  =  null;		compilable	  [FE]    double)	142	1
849	[BUG]  [BUGGY]  this.topBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  [BUGGY]  this.topBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	replace	this.topBlock  =  null;		compilable	  [FE]    double)	142	1
849	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	add	this.topBlock  =  null;  this.bottomBlock  =  null;		compilable	  [FE]    double)	142	1
850	[BUG]  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	499	499	1	replace	this.topBlock  =  null;  this.bottomBlock  =  null;		compilable	  [FE]    double)	142	1
236	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	add	if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[3]  =  size.height;  }		compilable	  [FE]    double)	40	1
237	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[3]  =  size.height;  }  [FE]  double)  [CONTEXT]  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [BUGGY]  if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	307	307	1	replace	if(this.leftBlock!=  null)  {  w[2]  =  size.width;  h[3]  =  size.height;  }		compilable	  [FE]    double)	40	1
811	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	add	this.rightBlock  =  null;		compilable	  [FE]    double)	136	1
812	[BUG]  [BUGGY]  this.rightBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	replace	this.rightBlock  =  null;		compilable	  [FE]    double)	136	1
812	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	add	this.leftBlock  =  null;		compilable	  [FE]    double)	136	1
813	[BUG]  [BUGGY]  this.leftBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	replace	this.leftBlock  =  null;		compilable	  [FE]    double)	136	1
813	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	add	this.centerBlock  =  null;		compilable	  [FE]    double)	136	1
814	[BUG]  [BUGGY]  this.centerBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  [BUGGY]  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	496	496	1	replace	this.centerBlock  =  null;		compilable	  [FE]    double)	136	1
261	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  h[3]  =  h[3];  }  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	if(this.centerBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  h[3]  =  h[3];  }		compilable	  [FE]    double)	44	1
262	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  h[3]  =  h[3];  }  [FE]  double)  [CONTEXT]  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  if(this.centerBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  h[3]  =  h[3];  }  [BUGGY]  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.centerBlock!=  null)  {  w[2]  =  Math.min(w[2],  h[3]);  h[3]  =  h[3];  }		compilable	  [FE]    double)	44	1
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	  	h[3]  =  size.height;  	compilable	  [FE]  AssertionFailedError	41	1
244	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]    [BUGGY]  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	  	h[3]  =  size.height;  	compilable	  [FE]  AssertionFailedError	41	1
434	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
435	[BUG]  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  [BUGGY]  h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];  [BUGGY]  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	h[2]  =  constraint.getWidth()  -  h[1]  -  h[0];	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
435	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  [BUGGY]    [BUGGY]  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	add	  	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
436	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  [BUGGY]    [BUGGY]  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	443	443	1	replace	  	h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  	compilable	  [FE]    double)	73	1
266	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]  h[2]  =  h[2];  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	h[2]  =  h[2];	h[3]  =  h[2];  	compilable	  [FE]    double)	45	1
267	[BUG]  [BUGGY]  h[2]  =  h[2];  [FE]  double)  [CONTEXT]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]  h[2]  =  h[2];  [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	h[2]  =  h[2];	h[3]  =  h[2];  	compilable	  [FE]    double)	45	1
267	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]    [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	add	  	h[3]  =  h[2];  	compilable	  [FE]    double)	45	1
268	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  [BUGGY]    [BUGGY]    if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	312	312	1	replace	  	h[3]  =  h[2];  	compilable	  [FE]    double)	45	1
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  if(this.centerBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  }  [BUGGY]  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	add	if(this.centerBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  }	h[2]  =  Math.max(h[2],  h[3]);  	compilable	  [FE]  AssertionFailedError	43	1
255	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  }  [FE]  AssertionFailedError  [CONTEXT]  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  if(this.centerBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  }  [BUGGY]  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	311	311	1	replace	if(this.centerBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  }	h[2]  =  Math.max(h[2],  h[3]);  	compilable	  [FE]  AssertionFailedError	43	1
554	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]  w[4]  =  h[2];  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	add	w[4]  =  h[2];	h[4]  =  h[2];  	compilable	  [FE]    double)	93	1
555	[BUG]  [BUGGY]  w[4]  =  h[2];  [FE]  double)  [CONTEXT]  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]  w[4]  =  h[2];  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	replace	w[4]  =  h[2];	h[4]  =  h[2];  	compilable	  [FE]    double)	93	1
555	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]    [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	add	  	h[4]  =  h[2];  	compilable	  [FE]    double)	93	1
556	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]    [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	replace	  	h[4]  =  h[2];  	compilable	  [FE]    double)	93	1
631	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	add	if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }		compilable	  [FE]    double)	106	1
632	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [FE]  double)  [CONTEXT]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	replace	if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }		compilable	  [FE]    double)	106	1
632	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  w[2],  w[1],  h[1]));  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	add	if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  w[2],  w[1],  h[1]));  }		compilable	  [FE]    double)	106	1
633	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  w[2],  w[1],  h[1]));  }  [FE]  double)  [CONTEXT]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  w[2],  w[1],  h[1]));  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	replace	if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  w[2],  w[1],  h[1]));  }		compilable	  [FE]    double)	106	1
633	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[1],  h[1]));  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	add	if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[1],  h[1]));  }		compilable	  [FE]    double)	106	1
634	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[1],  h[1]));  }  [FE]  double)  [CONTEXT]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[1],  h[1]));  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	472	472	1	replace	if(this.bottomBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[1],  h[1]));  }		compilable	  [FE]    double)	106	1
932	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  this.centerBlock  =  block;  }  else  {  RectangleEdge  edge  =  (RectangleEdge)  key;  if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  [BUGGY]  else  if(edge  ==  RectangleEdge.BOTTOM)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void  Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	109	109	1	add	else  if(edge  ==  RectangleEdge.BOTTOM)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }		compilable	  [FE]    double)	156	1
933	[BUG]  [BUGGY]  else  if(edge  ==  RectangleEdge.BOTTOM)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [FE]  double)  [CONTEXT]  this.centerBlock  =  block;  }  else  {  RectangleEdge  edge  =  (RectangleEdge)  key;  if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  [BUGGY]  else  if(edge  ==  RectangleEdge.BOTTOM)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void  Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	109	109	1	replace	else  if(edge  ==  RectangleEdge.BOTTOM)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }		compilable	  [FE]    double)	156	1
548	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  [BUGGY]  if(this.leftBlock!=  null)  {  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	if(this.leftBlock!=  null)  {  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }		compilable	  [FE]    double)	92	1
549	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  [BUGGY]  if(this.leftBlock!=  null)  {  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	if(this.leftBlock!=  null)  {  size  =  this.leftBlock.arrange(g2,  c4);  w[3]  =  size.width;  }		compilable	  [FE]    double)	92	1
597	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	464	464	1	add	if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }		compilable	  [FE]    double)	100	1
598	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [FE]  double)  [CONTEXT]  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }  [BUGGY]  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	464	464	1	replace	if(this.leftBlock!=  null)  {  this.leftBlock.arrange(g2,  c5);  }		compilable	  [FE]    double)	100	1
607	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  [BUGGY]  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  [BUGGY]  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	465	465	1	add	this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));		compilable	  [FE]    double)	102	1
608	[BUG]  [BUGGY]  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  [FE]  double)  [CONTEXT]  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  [BUGGY]  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  [BUGGY]  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	465	465	1	replace	this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));		compilable	  [FE]    double)	102	1
608	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  [BUGGY]  if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	465	465	1	add	if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }		compilable	  [FE]    double)	102	1
609	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [FE]  double)  [CONTEXT]  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  [BUGGY]  if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	465	465	1	replace	if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }		compilable	  [FE]    double)	102	1
380	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  RectangleConstraint  constraint)  {  double[]  w  =  new  double[5];  [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]  double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  w[1]  =  w[0];  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	425	425	1	add	w[0]  =  constraint.getWidth();		compilable	  [FE]    double)	64	1
381	[BUG]  [BUGGY]  w[0]  =  constraint.getWidth();  [FE]  double)  [CONTEXT]  RectangleConstraint  constraint)  {  double[]  w  =  new  double[5];  [BUGGY]  w[0]  =  constraint.getWidth();  [BUGGY]  double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  w[1]  =  w[0];  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	425	425	1	replace	w[0]  =  constraint.getWidth();		compilable	  [FE]    double)	64	1
333	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  [BUGGY]  if(this.centerBlock!=  null)  {  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  }  [BUGGY]  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	320	320	1	add	if(this.centerBlock!=  null)  {  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  }		compilable	  [FE]    double)	56	1
334	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  }  [FE]  double)  [CONTEXT]  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  [BUGGY]  if(this.centerBlock!=  null)  {  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  }  [BUGGY]  h[4]  =  size.height;  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	320	320	1	replace	if(this.centerBlock!=  null)  {  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  }		compilable	  [FE]    double)	56	1
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	287	287	1	add	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	20	1
116	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [FE]  AssertionFailedError  [CONTEXT]  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	287	287	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	20	1
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	287	287	1	add	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	20	1
117	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[0]  =  size.height;  }  [FE]  AssertionFailedError  [CONTEXT]  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	287	287	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	20	1
386	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  RectangleConstraint  constraint)  {  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  [BUGGY]  w[0]  =  constraint.getHeight();  [BUGGY]  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	426	426	1	add	w[0]  =  constraint.getHeight();	w[0]  =  constraint.getWidth();  	compilable	  [FE]    double)	65	1
387	[BUG]  [BUGGY]  w[0]  =  constraint.getHeight();  [FE]  double)  [CONTEXT]  RectangleConstraint  constraint)  {  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  [BUGGY]  w[0]  =  constraint.getHeight();  [BUGGY]  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	426	426	1	replace	w[0]  =  constraint.getHeight();	w[0]  =  constraint.getWidth();  	compilable	  [FE]    double)	65	1
362	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]  RectangleConstraint  constraint)  {  [BUGGY]  double[]  w  =  new  double[0];  [BUGGY]  double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	424	424	1	add	double[]  w  =  new  double[0];	double[]  w  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	61	1
363	[BUG]  [BUGGY]  double[]  w  =  new  double[0];  [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]  RectangleConstraint  constraint)  {  [BUGGY]  double[]  w  =  new  double[0];  [BUGGY]  double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	424	424	1	replace	double[]  w  =  new  double[0];	double[]  w  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	61	1
716	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [BUGGY]  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	488	488	1	add	if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }		compilable	  [FE]    double)	120	1
717	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [FE]  double)  [CONTEXT]  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [BUGGY]  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	488	488	1	replace	if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }		compilable	  [FE]    double)	120	1
698	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  [BUGGY]  if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [BUGGY]  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	485	486	1	add	if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }	this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],    h[4]));  	compilable	  [FE]    double)	117	1
699	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [FE]  double)  [CONTEXT]  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  [BUGGY]  if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [BUGGY]  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	485	486	1	replace	if(this.centerBlock!=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }	this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],    h[4]));  	compilable	  [FE]    double)	117	1
699	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  [BUGGY]    [BUGGY]  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	485	486	1	add	  	this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],    h[4]));  	compilable	  [FE]    double)	117	1
700	[BUG]  [BUGGY]    [FE]  double)  [CONTEXT]  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  [BUGGY]    [BUGGY]  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	485	486	1	replace	  	this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],    h[4]));  	compilable	  [FE]    double)	117	1
561	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	add	if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }		compilable	  [FE]    double)	94	1
562	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [FE]  double)  [CONTEXT]  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  [BUGGY]  if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [BUGGY]  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	461	461	1	replace	if(this.leftBlock!=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }		compilable	  [FE]    double)	94	1
44	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	add	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }		compilable	  [FE]    double)	8	1
45	[BUG]  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  [FE]  double)  [CONTEXT]  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  [BUGGY]  else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  [BUGGY]  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  if  (h  ==  LengthConstraintType.NONE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	151	151	1	replace	else  if(h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }		compilable	  [FE]    double)	8	1
223	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  h[2];  }  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	306	306	1	add	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  h[2];  }		compilable	  [FE]    double)	38	1
224	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  h[2];  }  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  h[2];  }  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	306	306	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  h[2];  }		compilable	  [FE]    double)	38	1
224	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	306	306	1	add	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  size.height;  }		compilable	  [FE]    double)	38	1
225	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  size.height;  }  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  size.height;  }  [BUGGY]  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	306	306	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c3);  w[2]  =  size.width;  h[3]  =  size.height;  }		compilable	  [FE]    double)	38	1
122	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.00,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	292	294	1	add	RectangleConstraint  c2  =  new  RectangleConstraint(0.00,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,    0.0,  null,  LengthConstraintType.NONE);  	compilable	  [FE]    double)	21	1
123	[BUG]  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.00,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [FE]  double)  [CONTEXT]  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  [BUGGY]  RectangleConstraint  c2  =  new  RectangleConstraint(0.00,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	292	294	1	replace	RectangleConstraint  c2  =  new  RectangleConstraint(0.00,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);	RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,    0.0,  null,  LengthConstraintType.NONE);  	compilable	  [FE]    double)	21	1
938	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  else  {  RectangleEdge  edge  =  (RectangleEdge)  key;  if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  [BUGGY]  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void  Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	110	110	1	add	if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.leftBlock  =  block;  	compilable	  [FE]    double)	157	1
939	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [FE]  double)  [CONTEXT]  }  else  {  RectangleEdge  edge  =  (RectangleEdge)  key;  if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  [BUGGY]  if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void  Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	110	110	1	replace	if(edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.leftBlock  =  block;  	compilable	  [FE]    double)	157	1
410	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  [BUGGY]  w[1]  =  constraint.getWidth();  [BUGGY]  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	add	w[1]  =  constraint.getWidth();	w[1]  =  w[0];  	compilable	  [FE]    double)	69	1
411	[BUG]  [BUGGY]  w[1]  =  constraint.getWidth();  [FE]  double)  [CONTEXT]  double[]  h  =  new  double[5];  w[0]  =  constraint.getWidth();  if  (this.topBlock  !=  null)  {  RectangleConstraint  c1  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()),  LengthConstraintType.RANGE);  Size2D  size  =  this.topBlock.arrange(g2,  c1);  h[0]  =  size.height;  }  [BUGGY]  w[1]  =  constraint.getWidth();  [BUGGY]  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	435	435	1	replace	w[1]  =  constraint.getWidth();	w[1]  =  w[0];  	compilable	  [FE]    double)	69	1
693	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[3]));  }  [BUGGY]  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	484	484	1	add	if(this.bottomBlock!=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[3]));  }		compilable	  [FE]    double)	116	1
694	[BUG]  [BUGGY]  if(this.bottomBlock!=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[3]));  }  [FE]  double)  [CONTEXT]  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [BUGGY]  if(this.bottomBlock!=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[3]));  }  [BUGGY]  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	484	484	1	replace	if(this.bottomBlock!=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[3]));  }		compilable	  [FE]    double)	116	1
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]  w[2]  =  size.height;  [BUGGY]  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	298	298	1	add	w[2]  =  size.height;	h[2]  =  size.height;  	compilable	  [FE]  AssertionFailedError	29	1
171	[BUG]  [BUGGY]  w[2]  =  size.height;  [FE]  AssertionFailedError  [CONTEXT]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]  w[2]  =  size.height;  [BUGGY]  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	298	298	1	replace	w[2]  =  size.height;	h[2]  =  size.height;  	compilable	  [FE]  AssertionFailedError	29	1
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]    [BUGGY]  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	298	298	1	add	  	h[2]  =  size.height;  	compilable	  [FE]  AssertionFailedError	29	1
172	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [CONTEXT]  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  [BUGGY]    [BUGGY]  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	298	298	1	replace	  	h[2]  =  size.height;  	compilable	  [FE]  AssertionFailedError	29	1
572	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  [BUGGY]  if(constraint!=  null)  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  constraint.getHeight()  -  h[3]  -  w[2];  }  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	if(constraint!=  null)  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  constraint.getHeight()  -  h[3]  -  w[2];  }		compilable	  [FE]    double)	96	1
573	[BUG]  [BUGGY]  if(constraint!=  null)  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  constraint.getHeight()  -  h[3]  -  w[2];  }  [FE]  double)  [CONTEXT]  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  [BUGGY]  if(constraint!=  null)  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  constraint.getHeight()  -  h[3]  -  w[2];  }  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	if(constraint!=  null)  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  constraint.getHeight()  -  h[3]  -  w[2];  }		compilable	  [FE]    double)	96	1
573	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  [BUGGY]  if(constraint.getWidth()  >  w[3])  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  h[2];  }  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	add	if(constraint.getWidth()  >  w[3])  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  h[2];  }		compilable	  [FE]    double)	96	1
574	[BUG]  [BUGGY]  if(constraint.getWidth()  >  w[3])  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  h[2];  }  [FE]  double)  [CONTEXT]  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  [BUGGY]  if(constraint.getWidth()  >  w[3])  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  h[2];  }  [BUGGY]  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	462	462	1	replace	if(constraint.getWidth()  >  w[3])  {  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  h[4]  =  h[2];  }		compilable	  [FE]    double)	96	1
248	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[3];  }  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[3];  }		compilable	  [FE]    double)	42	1
249	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[3];  }  [FE]  double)  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[3];  }  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[3];  }		compilable	  [FE]    double)	42	1
249	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  }  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	add	if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  }		compilable	  [FE]    double)	42	1
250	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  }  [FE]  double)  [CONTEXT]  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  [BUGGY]  if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  }  [BUGGY]  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	308	308	1	replace	if(this.leftBlock!=  null)  {  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  }		compilable	  [FE]    double)	42	1
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  double  width)  {  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	282	282	1	add	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	18	1
105	[BUG]  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [FE]  AssertionFailedError  [CONTEXT]  double  width)  {  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	282	282	1	replace	if(this.leftBlock!=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	18	1
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  double  width)  {  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	282	282	1	add	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	18	1
106	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [FE]  AssertionFailedError  [CONTEXT]  double  width)  {  double[]  w  =  new  double[5];  double[]  h  =  new  double[5];  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  [BUGGY]  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	282	282	1	replace	if(this.rightBlock!=  null)  {  Size2D  size  =  this.rightBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }		compilable	  [FE]  AssertionFailedError	18	1
458	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  [BUGGY]  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	445	447	1	add	RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,    new  Range(0.0,  constraint.getWidth()),      LengthConstraintType.RANGE,  h[2],  null,  	compilable	  [FE]    double)	77	1
459	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  [FE]  double)  [CONTEXT]  w[1]  =  w[0];  if  (this.bottomBlock  !=  null)  {  RectangleConstraint  c2  =  new  RectangleConstraint(w[0],  null,  LengthConstraintType.FIXED,  0.0,  new  Range(0.0,  constraint.getHeight()  -  h[0]),  LengthConstraintType.RANGE);  Size2D  size  =  this.bottomBlock.arrange(g2,  c2);  h[1]  =  size.height;  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  [BUGGY]  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	445	447	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,    new  Range(0.0,  constraint.getWidth()),      LengthConstraintType.RANGE,  h[2],  null,  	compilable	  [FE]    double)	77	1
151	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0);  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	296	296	1	add	double  maxW  =  Math.max(width  -  w[2],  0.0);		compilable	  [FE]    double)	26	1
152	[BUG]  [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0);  [FE]  double)  [CONTEXT]  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  [BUGGY]  double  maxW  =  Math.max(width  -  w[2],  0.0);  [BUGGY]  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	296	296	1	replace	double  maxW  =  Math.max(width  -  w[2],  0.0);		compilable	  [FE]    double)	26	1
823	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	add	this.rightBlock  =  null;		compilable	  [FE]    double)	138	1
824	[BUG]  [BUGGY]  this.rightBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	replace	this.rightBlock  =  null;		compilable	  [FE]    double)	138	1
824	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  [BUGGY]  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	add	this.leftBlock  =  null;		compilable	  [FE]    double)	138	1
825	[BUG]  [BUGGY]  this.leftBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  [BUGGY]  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	replace	this.leftBlock  =  null;		compilable	  [FE]    double)	138	1
825	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  [BUGGY]  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	add	this.centerBlock  =  null;		compilable	  [FE]    double)	138	1
826	[BUG]  [BUGGY]  this.centerBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  [BUGGY]  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	497	497	1	replace	this.centerBlock  =  null;		compilable	  [FE]    double)	138	1
542	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  [BUGGY]  w[2]  =  size.width;  [BUGGY]  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	add	w[2]  =  size.width;	w[3]  =  size.width;  	compilable	  [FE]    double)	91	1
543	[BUG]  [BUGGY]  w[2]  =  size.width;  [FE]  double)  [CONTEXT]  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  h[3]  =  h[2];  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  [BUGGY]  w[2]  =  size.width;  [BUGGY]  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  RectangleConstraint  c5  =  new  RectangleConstraint(w[4],  h[4]);  if  (this.centerBlock  !=  null)  {  this.centerBlock.arrange(g2,  c5);  }  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	459	459	1	replace	w[2]  =  size.width;	w[3]  =  size.width;  	compilable	  [FE]    double)	91	1
835	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
836	[BUG]  [BUGGY]  this.rightBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.rightBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
836	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  this.rightBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.centerBlock  =  null;  this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
837	[BUG]  [BUGGY]  this.centerBlock  =  null;  this.rightBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  this.rightBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.centerBlock  =  null;  this.rightBlock  =  null;		compilable	  [FE]    double)	140	1
837	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	add	this.centerBlock  =  null;		compilable	  [FE]    double)	140	1
838	[BUG]  [BUGGY]  this.centerBlock  =  null;  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  [BUGGY]  this.centerBlock  =  null;  [BUGGY]  this.leftBlock  =  null;  this.rightBlock  =  null;  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	498	498	1	replace	this.centerBlock  =  null;		compilable	  [FE]    double)	140	1
494	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]  h[2]  =  h[2];  [BUGGY]  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	452	452	1	add	h[2]  =  h[2];	h[3]  =  h[2];  	compilable	  [FE]    double)	83	1
495	[BUG]  [BUGGY]  h[2]  =  h[2];  [FE]  double)  [CONTEXT]  }  h[2]  =  constraint.getHeight()  -  h[1]  -  h[0];  if  (this.leftBlock  !=  null)  {  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.leftBlock.arrange(g2,  c3);  w[2]  =  size.width;  }  [BUGGY]  h[2]  =  h[2];  [BUGGY]  if  (this.rightBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(0.0,  new  Range(0.0,  constraint.getWidth()  -  w[2]),  LengthConstraintType.RANGE,  h[2],  null,  LengthConstraintType.FIXED);  Size2D  size  =  this.rightBlock.arrange(g2,  c4);  w[3]  =  size.width;  }  h[4]  =  h[2];  w[4]  =  constraint.getWidth()  -  w[3]  -  w[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	452	452	1	replace	h[2]  =  h[2];	h[3]  =  h[2];  	compilable	  [FE]    double)	83	1
962	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {  [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]  }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void  Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	add	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
963	[BUG]  [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [FE]  double)  [CONTEXT]  if  (edge  ==  RectangleEdge.TOP)  {  this.topBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.BOTTOM)  {  this.bottomBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.LEFT)  {  this.leftBlock  =  block;  }  else  if  (edge  ==  RectangleEdge.RIGHT)  {  [BUGGY]  if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }  [BUGGY]  }  }  }  [CLASS]  BorderArrangement  [METHOD]  add  [RETURN_TYPE]  void  Block  block  Object  key  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  Object  key  boolean  long  serialVersionUID  RectangleEdge  edge  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.5773502691896258	113	113	1	replace	if(edge  ==  RectangleEdge.RIGHT)  {  this.rightBlock  =  block;  }	this.rightBlock  =  block;  	compilable	  [FE]    double)	161	1
668	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [BUGGY]  if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [BUGGY]  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	480	480	1	add	if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }		compilable	  [FE]    double)	112	1
669	[BUG]  [BUGGY]  if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [FE]  double)  [CONTEXT]  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  }  [BUGGY]  if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  [BUGGY]  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  return  new  Size2D(constraint.getWidth(),  constraint.getHeight());  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	480	480	1	replace	if(this.topBlock!=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }		compilable	  [FE]    double)	112	1
338	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]  double  height  =  w[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	add	double  height  =  w[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  	compilable	  [FE]    double)	57	1
339	[BUG]  [BUGGY]  double  height  =  w[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [FE]  double)  [CONTEXT]  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  h[4]  =  size.height;  }  [BUGGY]  double  height  =  w[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  [BUGGY]  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	322	322	1	replace	double  height  =  w[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));	double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  	compilable	  [FE]    double)	57	1
655	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  [BUGGY]  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  [BUGGY]  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],      h[2]));  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	477	478	1	add	this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));		compilable	  [FE]    double)	110	1
656	[BUG]  [BUGGY]  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  [FE]  double)  [CONTEXT]  if  (this.topBlock  !=  null)  {  this.topBlock.setBounds(new  Rectangle2D.Double(0.0,  0.0,  w[0],  h[0]));  }  if  (this.bottomBlock  !=  null)  {  this.bottomBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0]  +  h[2],  w[1],  h[1]));  }  if  (this.leftBlock  !=  null)  {  [BUGGY]  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));  [BUGGY]  this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],      h[2]));  h[2]));  }  if  (this.rightBlock  !=  null)  {  this.rightBlock.setBounds(new  Rectangle2D.Double(w[2]  +  w[4],  h[0],  w[3],  h[3]));  }  if  (this.centerBlock  !=  null)  {  this.centerBlock.setBounds(new  Rectangle2D.Double(w[2],  h[0],  w[4],  h[4]));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFF  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  c5  constraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	477	478	1	replace	this.leftBlock.setBounds(new  Rectangle2D.Double(0.0,  h[0],  w[2],  h[2]));		compilable	  [FE]    double)	110	1
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [CONTEXT]  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  [BUGGY]  w[4]  =  size.height;  [BUGGY]  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	320	320	1	add	w[4]  =  size.height;	h[4]  =  size.height;  	compilable	  [FE]  AssertionFailedError	55	1
327	[BUG]  [BUGGY]  w[4]  =  size.height;  [FE]  AssertionFailedError  [CONTEXT]  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  if  (this.centerBlock  !=  null)  {  RectangleConstraint  c4  =  new  RectangleConstraint(width  -  w[2]  -  w[3],  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.centerBlock.arrange(g2,  c4);  w[4]  =  size.width;  [BUGGY]  w[4]  =  size.height;  [BUGGY]  }  double  height  =  h[0]  +  h[1]  +  Math.max(h[2],  Math.max(h[3],  h[4]));  return  arrange(container,  g2,  new  RectangleConstraint(width,  height));  }  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	320	320	1	replace	w[4]  =  size.height;	h[4]  =  size.height;  	compilable	  [FE]  AssertionFailedError	55	1
19	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint);  [BUGGY]  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	add	contentSize  =  arrangeFF(container,  g2,  constraint);		compilable	  [FE]    double)	4	1
20	[BUG]  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint);  [FE]  double)  [CONTEXT]  contentSize  =  arrangeNN(container,  g2);  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  throw  new  RuntimeException( "Not  implemented. ");  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  throw  new  RuntimeException( "Not  implemented. ");  }  }  else  if  (w  ==  LengthConstraintType.FIXED)  {  [BUGGY]  contentSize  =  arrangeFF(container,  g2,  constraint);  [BUGGY]  if  (h  ==  LengthConstraintType.NONE)  {  contentSize  =  arrangeFN(container,  g2,  constraint.getWidth());  }  else  if  (h  ==  LengthConstraintType.FIXED)  {  contentSize  =  arrangeFF(container,  g2,  constraint);  }  else  if  (h  ==  LengthConstraintType.RANGE)  {  contentSize  =  arrangeFR(container,  g2,  constraint);  }  }  else  if  (w  ==  LengthConstraintType.RANGE)  {  [CLASS]  BorderArrangement  [METHOD]  arrange  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  RectangleConstraint  constraint  [VARIABLES]  Size2D  contentSize  boolean  BlockContainer  container  LengthConstraintType  h  w  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  constraint  contentConstraint  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	148	148	1	replace	contentSize  =  arrangeFF(container,  g2,  constraint);		compilable	  [FE]    double)	4	1
861	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  [BUGGY]  if(this.rightBlock!=  null)  {  leftBlock  =  null;  rightBlock  =  null;  }  [BUGGY]  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	500	500	1	add	if(this.rightBlock!=  null)  {  leftBlock  =  null;  rightBlock  =  null;  }		compilable	  [FE]    double)	144	1
862	[BUG]  [BUGGY]  if(this.rightBlock!=  null)  {  leftBlock  =  null;  rightBlock  =  null;  }  [FE]  double)  [CONTEXT]  public  void  clear()  {  this.centerBlock  =  null;  this.topBlock  =  null;  this.bottomBlock  =  null;  this.leftBlock  =  null;  this.rightBlock  =  null;  [BUGGY]  if(this.rightBlock!=  null)  {  leftBlock  =  null;  rightBlock  =  null;  }  [BUGGY]  }  [CLASS]  BorderArrangement  [METHOD]  clear  [RETURN_TYPE]  void  [VARIABLES]  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  long  serialVersionUID  boolean  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	0.7071067811865475	500	500	1	replace	if(this.rightBlock!=  null)  {  leftBlock  =  null;  rightBlock  =  null;  }		compilable	  [FE]    double)	144	1
206	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  [BUGGY]  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	add	RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,    new  Range(Math.min(w[2],  maxW),  maxW),      LengthConstraintType.RANGE,  0.0,  null,  	compilable	  [FE]    double)	35	1
207	[BUG]  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  [FE]  double)  [CONTEXT]  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  [BUGGY]  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  h[3]  =  h[2];  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	302	304	1	replace	RectangleConstraint  c3  =  new  RectangleConstraint(0.00,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,	RectangleConstraint  c3  =  new  RectangleConstraint(0.0,    new  Range(Math.min(w[2],  maxW),  maxW),      LengthConstraintType.RANGE,  0.0,  null,  	compilable	  [FE]    double)	35	1
139	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }		compilable	  [FE]    double)	24	1
140	[BUG]  [BUGGY]  if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.topBlock!=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }		compilable	  [FE]    double)	24	1
140	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	add	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }		compilable	  [FE]    double)	24	1
141	[BUG]  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [FE]  double)  [CONTEXT]  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  w[1]  =  size.width;  h[1]  =  size.height;  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [BUGGY]  if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  [BUGGY]  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  double  maxW  =  Math.max(width  -  w[2],  0.0);  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	295	295	1	replace	if(this.centerBlock!=  null)  {  Size2D  size  =  this.centerBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }		compilable	  [FE]    double)	24	1
194	[BUG]  [BUGGY]  [FE]  double)  [CONTEXT]  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  [BUGGY]  double  maxW  =  Math.max(width  /  w[2],  0.0);  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	301	301	1	add	double  maxW  =  Math.max(width  /  w[2],  0.0);	double  maxW  =  Math.max(width  -  w[2],  0.0);  	compilable	  [FE]    double)	33	1
195	[BUG]  [BUGGY]  double  maxW  =  Math.max(width  /  w[2],  0.0);  [FE]  double)  [CONTEXT]  }  RectangleConstraint  c2  =  new  RectangleConstraint(0.0,  new  Range(0.0,  width),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  if  (this.leftBlock  !=  null)  {  Size2D  size  =  this.leftBlock.arrange(g2,  c2);  w[2]  =  size.width;  h[2]  =  size.height;  }  if  (this.rightBlock  !=  null)  {  [BUGGY]  double  maxW  =  Math.max(width  /  w[2],  0.0);  [BUGGY]  RectangleConstraint  c3  =  new  RectangleConstraint(0.0,  new  Range(Math.min(w[2],  maxW),  maxW),  LengthConstraintType.RANGE,  0.0,  null,  LengthConstraintType.NONE);  Size2D  size  =  this.rightBlock.arrange(g2,  c3);  w[3]  =  size.width;  h[3]  =  size.height;  }  h[2]  =  Math.max(h[2],  h[3]);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	301	301	1	replace	double  maxW  =  Math.max(width  /  w[2],  0.0);	double  maxW  =  Math.max(width  -  w[2],  0.0);  	compilable	  [FE]    double)	33	1
74	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]  double  width)  {  double[]  w  =  new  double[5];  [BUGGY]  double[]  h  =  new  double[4];  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	add	double[]  h  =  new  double[4];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
75	[BUG]  [BUGGY]  double[]  h  =  new  double[4];  [FE]  ArrayIndexOutOfBoundsException  [CONTEXT]  double  width)  {  double[]  w  =  new  double[5];  [BUGGY]  double[]  h  =  new  double[4];  [BUGGY]  RectangleConstraint  c1  =  new  RectangleConstraint(width,  null,  LengthConstraintType.FIXED,  0.0,  null,  LengthConstraintType.NONE);  if  (this.topBlock  !=  null)  {  Size2D  size  =  this.topBlock.arrange(g2,  c1);  w[0]  =  size.width;  h[0]  =  size.height;  }  if  (this.bottomBlock  !=  null)  {  Size2D  size  =  this.bottomBlock.arrange(g2,  c1);  [CLASS]  BorderArrangement  [METHOD]  arrangeFN  [RETURN_TYPE]  Size2D  BlockContainer  container  Graphics2D  g2  double  width  [VARIABLES]  Size2D  size  boolean  double[]  h  w  BlockContainer  container  double  height  maxW  width  Block  block  bottomBlock  centerBlock  leftBlock  rightBlock  topBlock  RectangleConstraint  c1  c2  c3  c4  long  serialVersionUID  Graphics2D  g2  	projects/Chart13/source/org/jfree/chart/block/BorderArrangement.java	1.0	278	278	1	replace	double[]  h  =  new  double[4];	double[]  h  =  new  double[5];  	compilable	  [FE]  ArrayIndexOutOfBoundsException	13	1
